unit MoPreVenda;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, Buttons, Grids, ComCtrls, ExtCtrls, Db, DBTables, DBGrids,
  RelOrcamentos,
  Menus, ShellApi, IniFiles, ADODB, Variants, XPMan, TypInfo {, letreiro} ,
  {WinSkinData,} Math, DateUtils, RLConsts, MaskUtils, Themes, NEGCliente,
  NEGLoja,
  Vcl.ActnMan, System.Generics.Collections, NEGFabricante,
  RLReport, NEGPrevenda, frmComprouJunto, DOMCliente,
  formUltimasVendasDoProdutoAoCliente, DOMPrevenda, UitemPrevenda,
  DOMFuncionario,
  NEGAmbiente, NEGFuncionario, Produto, IdMessage, IdIOHandler,
  IdIOHandlerSocket, IdIOHandlerStack, IdSSL, IdSSLOpenSSL, IdBaseComponent,
  IdComponent, IdTCPConnection, IdTCPClient, IdExplicitTLSClientServerBase,
  IdMessageClient, IdSMTPBase, IdSMTP, QRPDFFilt, Vcl.Imaging.pngimage,
  ACBrBase, ACBrPosPrinter;

type
  VetorPermissao = Array [1 .. 900, 1 .. 7] of String;
  TAuxDBGrid = class(TDBGrid);

  TDBGrid = class(DBGrids.TDBGrid)
  private
    FColResize: TNotifyEvent;
    procedure ColWidthsChanged; override;
  protected
    property OnColResize: TNotifyEvent read FColResize write FColResize;
  end;

type
  TRestricao = (ATRASO, LIMITE, CHEQUE);
  // tipo de restricoes que um cliente pode ter

type
  TListaRestricao = set of TRestricao;

type
  TProdutoEtiqueta = class
    cdProduto    : integer;
    nmProduto    : string;
    vlPreco      : Currency;
    dsReferencia : string;
  end;

  type
    TLiveracao = class

      _descricao : string;
      _valor : Real;
      _operador : Integer;

    constructor novo();
  end;

type
  TFrmPrincipalPreVenda = class(TForm)
    Label28: TLabel;
    EdtLancto: TEdit;
    Label29: TLabel;
    CbxNome: TComboBox;
    Label30: TLabel;
    CbxCliente: TComboBox;
    EdtCdCliente: TEdit;
    DtLancto: TDateTimePicker;
    Label32: TLabel;
    BtnAprazo: TBitBtn;
    BtnConfirmar: TBitBtn;
    BtnCancelar: TBitBtn;
    BtnSair: TBitBtn;
    EdtTotal: TEdit;
    EdtDesconto: TEdit;
    EdtSubTotal: TEdit;
    EdtOperador: TEdit;
    EdtCdNome: TEdit;
    RadioGroup1: TRadioGroup;
    CmbConsulta: TComboBox;
    BtnMdPrimeiro: TBitBtn;
    BtnMdAnterior: TBitBtn;
    BtnMdProximo: TBitBtn;
    BtnMdUltimo: TBitBtn;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    DsConsulta: TDataSource;
    PopupMenu1: TPopupMenu;
    Banese1: TMenuItem;
    HiperCard1: TMenuItem;
    VisaNet1: TMenuItem;
    AmericanExpress1: TMenuItem;
    Limpatextoparapesquisa1: TMenuItem;
    ConsultaProduto1: TMenuItem;
    Help1: TMenuItem;
    Alterarpreodoproduto1: TMenuItem;
    RgOpcoes: TRadioGroup;
    ConsultaEspecificacao1: TMenuItem;
    ADOSPConsulta: TADOStoredProc;
    ADOQryProcura: TADOQuery;
    ADOQryEspecificacao: TADOQuery;
    ADOQryProduto: TADOQuery;
    ADOQryNome: TADOQuery;
    ADOQryCliente: TADOQuery;
    ADOQryUltimo: TADOQuery;
    ADOQrySalvar: TADOQuery;
    Produtossimilares1: TMenuItem;
    AdoQrySimilar: TADOQuery;
    Label9: TLabel;
    EdtEndereco: TEdit;
    Label10: TLabel;
    EdtApelido: TEdit;
    ADOSPQryCliente: TADOStoredProc;
    SpeedButton1: TSpeedButton;
    AdoQryLocaliza: TADOQuery;
    Cadastrodeclientes1: TMenuItem;
    Registraperdadevemdaporestoqueinsuficiente1: TMenuItem;
    Consultadecrditodocliente1: TMenuItem;
    Alteraquantidade1: TMenuItem;
    ADOSPLiberacao1: TADOStoredProc;
    ADOSPLiberacao2: TADOStoredProc;
    ADOSPLiberacao4: TADOStoredProc;
    ADOSPLiberacao3: TADOStoredProc;
    Label12: TLabel;
    Consultapedidodecompra1: TMenuItem;
    ADOSP_PEDIDO_GARANTIA: TADOStoredProc;
    IntegerField1: TIntegerField;
    StringField1: TStringField;
    StringField2: TStringField;
    StringField3: TStringField;
    StringField4: TStringField;
    StringField5: TStringField;
    StringField6: TStringField;
    StringField7: TStringField;
    StringField8: TStringField;
    FloatField1: TFloatField;
    FloatField2: TFloatField;
    FloatField3: TFloatField;
    FloatField4: TFloatField;
    Label14: TLabel;
    ADOQuery1: TADOQuery;
    Excluiritens1: TMenuItem;
    Desconto1: TMenuItem;
    Cancelaraprvenda1: TMenuItem;
    Alterar1: TMenuItem;
    Oramento1: TMenuItem;
    Label16: TLabel;
    CdigoAdicional1: TMenuItem;
    Cancelar1: TMenuItem;
    Imprimiretiquetas1: TMenuItem;
    Editor: TRichEdit;
    EdtUsuario: TEdit;
    Label7: TLabel;
    CadastrodeEscola1: TMenuItem;
    CadastrodeSrie1: TMenuItem;
    CadastrodeLista1: TMenuItem;
    ConsultarListas1: TMenuItem;
    ListBox1: TListBox;
    Timer1: TTimer;
    ConsultarCrdito1: TMenuItem;
    ransferncia1: TMenuItem;
    Label18: TLabel;
    LblVista: TLabel;
    Label19: TLabel;
    LblPrazo: TLabel;
    ADOQryUltimoCodigo: TADOQuery;
    DsDeposito: TDataSource;
    Especificao1: TMenuItem;
    Relatriodecontagem1: TMenuItem;
    ADOSPConsultaCDIGO_BARRAS: TStringField;
    ADOSPConsultaREFERNCIA: TStringField;
    ADOSPConsultaDESCRIO: TStringField;
    ADOSPConsultaFABRICANTE: TStringField;
    ADOSPConsultaCDCODIGODIC: TStringField;
    ADOSPConsultaPRATELEIRA: TStringField;
    ADOSPConsultaESTOQUE: TFloatField;
    ADOSPConsultaPEDIDO: TFloatField;
    ADOSPConsultaUNIDADE: TStringField;
    ADOSPConsultaEMBALAGEM: TStringField;
    ADOSPConsultaPESO: TFloatField;
    ADOSPConsultaGRUPO: TStringField;
    ADOSPConsultaFORNECEDOR: TIntegerField;
    ADOSPConsultaDSPROMOCAO: TStringField;
    ADOSPConsultadsAtivo: TStringField;
    ADOSPConsultaPRECO: TFloatField;
    Label20: TLabel;
    edtQtdItens: TEdit;
    Imprimir1: TMenuItem;
    Visualizarapelidodocliente1: TMenuItem;
    Voltarparaotemaoriginal1: TMenuItem;
    ADOVarejo: TADOQuery;
    ADOQryProcura1: TADOQuery;
    ADOSPConsultadsCFOPD: TStringField;
    ADOSPConsultadsCFOPF: TStringField;
    DesbloquearPrVenda1: TMenuItem;
    Declaraodedevoluodecliente1: TMenuItem;
    adoEntrada: TADOQuery;
    ADOSPConsultaVALOR: TFloatField;
    Importarvendasexternas1: TMenuItem;
    GroupBox1: TGroupBox;
    LblMdConsulta: TLabel;
    LblListados: TLabel;
    Label1: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    LblEspecificacao: TLabel;
    Label21: TLabel;
    EdtQtd: TEdit;
    EdtConsulta: TEdit;
    CheckBox1: TCheckBox;
    EdtPreco: TEdit;
    CbPrevisao: TCheckBox;
    EdtDescUnit: TEdit;
    EdtCFOP: TEdit;
    Label22: TLabel;
    CbLote: TComboBox;
    Label23: TLabel;
    Shape2: TShape;
    Shape3: TShape;
    Shape4: TShape;
    Shape1: TShape;
    Shape5: TShape;
    Shape6: TShape;
    edtValorBruto: TEdit;
    Timer2: TTimer;
    MiCadastroAmbientes: TMenuItem;
    CbxAmbiente: TComboBox;
    EdtCdAmbiente: TEdit;
    AdoAmbiente: TADOQuery;
    LblAmbiente: TLabel;
    SimplesRemessa1: TMenuItem;
    ConsultarporCdigoAdicional1: TMenuItem;
    edtcdLista: TEdit;
    elaPrincipal1: TMenuItem;
    Consultas1: TMenuItem;
    Escola1: TMenuItem;
    N1: TMenuItem;
    N2: TMenuItem;
    N4: TMenuItem;
    N5: TMenuItem;
    ADOSPConsultadspromocaoatacado: TStringField;
    ADOSPConsultadspromocaovarejo: TStringField;
    ADOSPConsultanrqtdpromocao: TFloatField;
    miProdutosVendidosJunto: TMenuItem;
    miÚltimasVendasDoProdutoAoCliente: TMenuItem;
    cbxUsuario: TComboBox;
    Label8: TLabel;
    chkOcultarProdutosSemEstoque: TCheckBox;
    ro1: TMenuItem;
    edtLogin: TEdit;
    btnLogoff: TBitBtn;
    Memo1: TMemo;
    Label11: TEdit;
    LblReserva: TEdit;
    Label15: TEdit;
    Conferncia1: TMenuItem;
    Label13: TEdit;
    edtDisponivel: TEdit;
    Shape7: TShape;
    Label17: TLabel;
    Shape8: TShape;
    Consultarprvendas1: TMenuItem;
    Logoff1: TMenuItem;
    SBF5: TBitBtn;
    edtTotalIPI: TEdit;
    Label24: TLabel;
    Panel2: TPanel;
    Panel3: TPanel;
    SgDados: TStringGrid;
    Splitter1: TSplitter;
    Panel4: TPanel;
    DBGrid1: TDBGrid;
    Panel1: TPanel;
    lblMensagem: TLabel;
    btnMensagem: TBitBtn;
    chkbxBaixarEstoque: TCheckBox;
    SMTP: TIdSMTP;
    SSLSocket: TIdSSLIOHandlerSocketOpenSSL;
    MSG_XML: TIdMessage;
    chkbxOrcamentoExterno: TCheckBox;
    ADOSPConsultanrQtdAtacarejo: TFloatField;
    ADOSPConsultavlAtacado: TFloatField;
    edtReferencia: TEdit;
    Label25: TLabel;
    ADOSPConsultavlComissao: TFloatField;
    SpeedButton2: TSpeedButton;
    LucronaVenda1: TMenuItem;
    Image2: TImage;
    Image3: TImage;
    Image4: TImage;
    imgBaixa: TImage;
    imgNormal: TImage;
    imgAlta: TImage;
    imgTransparente: TImage;
    ACBrPosPrinter: TACBrPosPrinter;
    chkbxEtiqueta: TCheckBox;
    ADOSPConsultaCÓDIGO: TStringField;
    procedure ProcessaMsg(var Msg: Tmsg; var Handled: Boolean);
    procedure NaoProcessaMsg(var Msg: Tmsg; var Handled: Boolean);
    procedure FormCreate(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure EdtQtdExit(Sender: TObject);
    procedure EdtDescontoExit(Sender: TObject);
    procedure BtnCancelarClick(Sender: TObject);
    procedure BtnConfirmarClick(Sender: TObject);
    procedure SgDadosDblClick(Sender: TObject);
    procedure CbxClienteChange(Sender: TObject);
    procedure SBF5Click(Sender: TObject);
    procedure EdtPrecoExit(Sender: TObject);
    procedure EdtQtdKeyPress(Sender: TObject; var Key: Char);
    procedure EdtPrecoKeyPress(Sender: TObject; var Key: Char);
    procedure EdtSubTotalKeyPress(Sender: TObject; var Key: Char);
    procedure EdtSubTotalExit(Sender: TObject);
    procedure CbxNomeChange(Sender: TObject);
    procedure BtnAprazoClick(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure BtnSairClick(Sender: TObject);
    procedure CheckBox1Click(Sender: TObject);
    procedure CheckBox1Enter(Sender: TObject);
    procedure RadioGroup1Click(Sender: TObject);
    procedure EdtConsultaChange(Sender: TObject);
    procedure Banese1Click(Sender: TObject);
    procedure HiperCard1Click(Sender: TObject);
    procedure RedeCard1Click(Sender: TObject);
    procedure VisaNet1Click(Sender: TObject);
    procedure AmericanExpress1Click(Sender: TObject);
    procedure DescrioContendo1Click(Sender: TObject);
    procedure BtnMdPrimeiroClick(Sender: TObject);
    procedure BtnMdProximoClick(Sender: TObject);
    procedure BtnMdAnteriorClick(Sender: TObject);
    procedure BtnMdUltimoClick(Sender: TObject);
    procedure DBGrid1CellClick(Column: TColumn);
    procedure EdtDescontoKeyPress(Sender: TObject; var Key: Char);
    procedure DBGrid1DblClick(Sender: TObject);
    procedure ConsultaProduto1Click(Sender: TObject);
    procedure Help1Click(Sender: TObject);
    procedure Alterarpreodoproduto1Click(Sender: TObject);
    procedure RgOpcoesClick(Sender: TObject);
    procedure Ds(Sender: TObject);
    procedure EdtLanctoKeyPress(Sender: TObject; var Key: Char);
    procedure ConsultaEspecificacao1Click(Sender: TObject);
    procedure Produtossimilares1Click(Sender: TObject);
    procedure EdtDescUnitExit(Sender: TObject);
    procedure DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure EdtConsultaKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure SpeedButton1Click(Sender: TObject);
    procedure Cadastrodeclientes1Click(Sender: TObject);
    procedure ConsultaClientepeloCPFouCNPJ1Click(Sender: TObject);
    procedure Registraperdadevemdaporestoqueinsuficiente1Click(Sender: TObject);
    procedure Consultadecrditodocliente1Click(Sender: TObject);
    procedure Alteraquantidade1Click(Sender: TObject);
    procedure SgDadosExit(Sender: TObject);
    procedure SgDadosSelectCell(Sender: TObject; ACol, ARow: Integer;
      var CanSelect: Boolean);
    procedure CbxClienteExit(Sender: TObject);
    procedure Consultapedidodecompra1Click(Sender: TObject);
    procedure Excluiritens1Click(Sender: TObject);
    procedure Desconto1Click(Sender: TObject);
    procedure CbxClienteKeyPress(Sender: TObject; var Key: Char);
    procedure CbxNomeKeyPress(Sender: TObject; var Key: Char);
    procedure BtnAprazoKeyPress(Sender: TObject; var Key: Char);
    procedure BtnConfirmarKeyPress(Sender: TObject; var Key: Char);
    procedure BtnCancelarKeyPress(Sender: TObject; var Key: Char);
    procedure BtnSairKeyPress(Sender: TObject; var Key: Char);
    procedure DBGrid1KeyPress(Sender: TObject; var Key: Char);
    procedure Alterar1Click(Sender: TObject);
    procedure Oramento1Click(Sender: TObject);
    procedure EdtCdNomeExit(Sender: TObject);
    procedure Cancelaraprvenda1Click(Sender: TObject);
    procedure CdigoAdicional1Click(Sender: TObject);
    procedure EdtConsultaKeyPress(Sender: TObject; var Key: Char);
    procedure Imprimiretiquetas1Click(Sender: TObject);
    procedure EdtUsuarioExit(Sender: TObject);
    procedure EdtUsuarioKeyPress(Sender: TObject; var Key: Char);
    procedure SgDadosClick(Sender: TObject);
    procedure Monta_Combo;
    procedure CadastrodeEscola1Click(Sender: TObject);
    procedure CadastrodeSrie1Click(Sender: TObject);
    procedure CadastrodeLista1Click(Sender: TObject);
    procedure ConsultarListas1Click(Sender: TObject);
    procedure SgDadosDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect;
      State: TGridDrawState);
    procedure ransferncia1Click(Sender: TObject);
    procedure ConsultarCrdito1Click(Sender: TObject);
    procedure Especificao1Click(Sender: TObject);
    procedure Relatriodecontagem1Click(Sender: TObject);
    procedure atualizaEditQtdItens;
    procedure Imprimir1Click(Sender: TObject);
    procedure Visualizarapelidodocliente1Click(Sender: TObject);
    procedure Voltarparaotemaoriginal1Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure EdtPrecoEnter(Sender: TObject);
    procedure EdtCFOPKeyPress(Sender: TObject; var Key: Char);
    procedure btnMensagemClick(Sender: TObject);
    procedure DesbloquearPrVenda1Click(Sender: TObject);
    procedure Declaraodedevoluodecliente1Click(Sender: TObject);
    procedure Importarvendasexternas1Click(Sender: TObject);
    procedure CbLoteChange(Sender: TObject);
    procedure EdtCFOPExit(Sender: TObject);
    procedure DBGrid1ColumnMoved(Sender: TObject; FromIndex, ToIndex: Integer);
    procedure Timer2Timer(Sender: TObject);
    procedure MiCadastroAmbientesClick(Sender: TObject);
    procedure CbxAmbienteChange(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure SgDadosGetEditText(Sender: TObject; ACol, ARow: Integer;
      var Value: string);
    procedure SgDadosSetEditText(Sender: TObject; ACol, ARow: Integer;
      const Value: string);
    procedure SgDadosKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure SgDadosKeyPress(Sender: TObject; var Key: Char);
    procedure CbxClienteEnter(Sender: TObject);
    procedure ConsultarporCdigoAdicional1Click(Sender: TObject);
    procedure miProdutosVendidosJuntoClick(Sender: TObject);
    procedure miÚltimasVendasDoProdutoAoClienteClick(Sender: TObject);
    procedure EdtUsuarioChange(Sender: TObject);
    procedure cbxUsuarioChange(Sender: TObject);
    procedure chkOcultarProdutosSemEstoqueClick(Sender: TObject);
    procedure cbxUsuarioExit(Sender: TObject);
    procedure EdtDescUnitKeyPress(Sender: TObject; var Key: Char);
    procedure lblLogoffClick(Sender: TObject);
    procedure ro1Click(Sender: TObject);
    procedure EdtCdNomeChange(Sender: TObject);
    procedure btnLogoffClick(Sender: TObject);
    procedure EdtSubTotalEnter(Sender: TObject);
    procedure Conferncia1Click(Sender: TObject);
    procedure Consultarprvendas1Click(Sender: TObject);
    procedure Logoff1Click(Sender: TObject);
    procedure EdtLanctoEnter(Sender: TObject);
    procedure Panel3Resize(Sender: TObject);
    procedure edtReferenciaExit(Sender: TObject);
    procedure SpeedButton2Click(Sender: TObject);
    procedure LucronaVenda1Click(Sender: TObject);
    procedure chkbxEtiquetaClick(Sender: TObject);
    procedure EdtConsultaEnter(Sender: TObject);
  private
    valorAjustar: Real;
    indexGridAux: Integer; // grava a ultima linha editada na grid manualmente
    qtdAnteriorNaGrid: Real;
    // quantidade do produto antes da alteração direta na grid, usada para corrigir os totais após a alteração
    intemIndexRgOpcoesOLD: Integer;
    // controla o itenindex do radiogroup RGOpcoes
    vQtdPrint: string[1];
    vPrintSetup: string[01];
    // define se sobe o print setup na impressao da pre-venda 80 colunas
    QuantidadeGridMaiorQueZero: Boolean;
    // indica se a quantidade setada diretamente na grid é maior quer zero
    listaProdutosAcrescimo : TList<Integer>;  // adiciona os produtos q tiveram acrescimo

    function possuiItensLançados: Boolean;
    Procedure AuxiliarLancto(i: Integer);
    Procedure RemontaSgDados(i: Integer);
    Procedure ImprimirRequisicao(vCliente: String; vRequisicao: Integer);
    Procedure Consulta_Deposito;
    Procedure ImprimeComprovanteTransferencia;
    procedure SalvaTransferencia; // somente p proauto
    Procedure AtualizaCombProduto;
    Procedure AtualizaQryConsulta;
    Procedure FiltraConsulta;
    Procedure ConsultaGarantia;
    Procedure AjustarAposConsultaProduto;
    Procedure LimpaGrid; overload;
    Procedure LimpaGrid(var prevenda: TPrevenda;
      deletarSomenteItens: Boolean = false); overload;
    procedure CriarIniSQL;
    procedure CriarIniSQLDeposito;
    Procedure ConsultaReserva;
    procedure ConsultaPreVendas;
    Function PegaValorAtacado(cdProduto: Integer): Real;
    function PegaValorVarejo(cdProduto: Integer): Real;
    function PegaNomeFabricante(cdProduto: Integer): string;
    function isProdutoPromocao(cdProduto: Integer): Boolean;
    Procedure SalvaEtiquetas;
    Procedure ImprimeEtiquetasBijouArts;
    procedure ImprimeEtiquetasBijouArtsMaior;
    procedure ImprimeEtiquetasLindaStore;
    Procedure ImprimeEtiquetasBijouArtsZebra;
    procedure ImprimeEtiquetaAmorBebe;
    procedure ImprimeEtiquetaAliceDiniz;
    procedure ImprimeEtiquetaRosaMenina;
    procedure ImprimeEtiquetaListo;
    procedure ImprimeEtiquetaLayeVictor;
    procedure ImprimeEtiquetaLayeLuc;
    procedure ImprimeEtiquetaLordKids;
    procedure ImprimeEtiquetaLayeVictorOS214;
    procedure ImprimeEtiquetaLayeVictorArgoxOS214;
    procedure ImprimeEtiquetaGrandeLayeVictor;
    Procedure ImprimeEtiquetasPipelaine;
    procedure ImprimeEtiquetaTecno;
    Procedure ImprimeEtiquetasPipelaineShopping;
    Procedure ImprimeEtiquetasBijouArtsOS214;
    procedure ImprimeEtiquetasBijouArtsOS214TT;
    procedure ImprimeEtiquetasShoez;
    procedure ImprimeEtiquetasDiju;
    procedure ImprimeEtiquetas_Diju_New;
    procedure ImprimeEtiquetasDalBosco;
    procedure ImprimeEtiquetasComercialGraca;
    procedure ImprimeEtiquetasSaoJose;
    procedure ImprimeEtiquetas_Anadri_A;
    procedure ImprimeEtiquetas_MiniMercadoMaisEconomia_Gondola;
    procedure ImprimeEtiquetas_MiniMercadoMaisEconomia_Gondola_Mini;
    procedure ImprimeEtiquetas_ConstruFort_Gondola;
    procedure ImprimeEtiquetas_JMComercio;
    procedure ImprimeEtiquetas_MaisRacoes;
    procedure ImprimeEtiquetas_CAMPOS_1Col_Varejo;
    procedure ImprimeEtiquetas_CAMPOS_1Col_VarejoAtacado;
    procedure ImprimeEtiquetas_CAMPOS_Menor_Descricao;
    procedure ImprimeEtiquetas_CAMPOS_1Col_Varejo_Logo;
    procedure ImprimeEtiquetas_CAMPOS_1Col_VarejoAtacado_Logo;
    procedure ImprimeEtiquetas_CAMPOS_Sem_Descricao_Varejo_Logo;
    procedure ImprimeEtiquetas_CAMPOS_Sem_Descricao_2Col_Logo;
    procedure ImprimeEtiquetas_CAMPOS_Sem_Descricao_VarejoAtacado_Logo;
    procedure ImprimeEtiquetas_CAMPOS_Mini_3Col_Logo;
    procedure ImprimeEtiquetas_CAMPOS_Maior_Descricao;
    procedure ImprimeEtiquetas_CAMPOS_2Col_1SubGrupo;
    procedure ImprimeEtiquetas_CAMPOS_2Col_2SubGrupo;
    procedure ImprimeEtiquetas_CAMPOS_2Col_3SubGrupo;
    procedure ImprimeEtiquetas_CAMPOS_2Col_4SubGrupo;
    procedure ImprimeEtiquetas_CAMPOS_2Col_Gaveta;
    procedure ImprimeEtiquetas_CAMPOS_2Col_AtacadoVarejo;
    procedure ImprimeEtiquetas_EmporioVerdeBrasil;
    procedure ImprimeEtiquetas_JAKIDS_Gondola_Varejo_Atacado;
    procedure ImprimeEtiquetas_JAKIDS_Gondola_Varejo;
    procedure ImprimeEtiquetas_JAKIDS_3Col_CdBarras;
    procedure ImprimeEtiquetas_JAKIDS_3Col_Desc_Preco;
    procedure ImprimeEtiquetas_AsaBranca_Gondola_ARGOX;
    procedure ImprimeEtiquetas_AsaBranca_StGreide;
    procedure ImprimeEtiquetas_AsaBranca_StGreide_Varejo;
    procedure ImprimeEtiquetas_NovoGarden_3Col;
    procedure ImprimeEtiquetas_NovoGarden_Menor;
    procedure ImprimeEtiquetas_NovoGarden_Maior;
    procedure ImprimeEtiquetas_NegroMonte_Joia;
    procedure ImprimeEtiquetas_Pandoro_Pequena;
    procedure ImprimeEtiquetas_AquiAcha;
    procedure ImprimeEtiquetas_SAOMARCOS;
    procedure ImprimeEtiquetas_TokaDasGrifes;
    procedure ImprimeEtiquetas_Cardoso;
    procedure ImprimeEtiquetas_Geovana;
    procedure ImprimeEtiquetas_NegroMonte_3_Colunas;
    procedure ImprimeEtiquetas_ConstruFort_3_Colunas;
    procedure ImprimeEtiquetas_ConstruFort_3_Colunas_Preco;
    procedure ImprimeEtiqueta_Dumbu_Gondola_Pequena;
    procedure ImprimeEtiquetas_ELGIN_LAYELUC;
    procedure ImprimeEtiquetas_Mercatto;
    procedure ImprimeEtiquetas_DUMBU;
    procedure ImprimeEtiquetas_AMORBEBE;
    procedure ImprimeEtiquetas_Anadri_B;
    procedure ImprimeEtiquetas_Anadri_C;
    procedure ImprimeEtiquetasCaribe;
    procedure ImprimeEtiquetasCaribe2;
    procedure ImprimeEtiquetasJoalheriaFontes;
    Procedure ImprimeEtiquetasTemdeTudoSempre;
    procedure ImprimeEtiquetasJALVES_Grande;
    procedure ImprimeEtiquetasDIEGOCUNHA_3COLUNAS;
    procedure ImprimeEtiquetasVIVA_3COLUNAS;
    procedure ImprimeEtiquetaGrandeTriploRural;
    procedure ImprimeEtiquetaPequenoTriploRural;
    procedure ImprimeEtiquetaZANQUY_ELGIN;
    procedure ImprimeEtiquetaEquilibrio_ELGIN;
    procedure ImprimeEtiquetaAQUARELA_ELGIN;
    procedure ImprimeEtiquetaSerafina;
    procedure ImprimeEtiquetaZANQUY;
    procedure ImprimeEtiquetaQUIVER;
    procedure ImprimeEtiquetaYZLU;
    procedure ImprimeEtiquetaYZLUCENTRO;
    procedure ImprimeEtiquetaYZLUPEIXOTO;
    procedure ImprimeEtiquetaYZLUCALCADOS;
    procedure ImprimeEtiquetaIMA;
    procedure ImprimeEtiquetaDOFF;
    procedure ImprimeEtiquetaCASADOROSARIO2COLUNAS;
    procedure ImprimeEtiquetaCASADOROSARIO3COLUNAS;
    procedure ImprimeEtiquetaGrandeDuploRural;
    procedure ImprimeEtiquetasVIVA_GONDOLA_PEQUENA;
    procedure ImprimeEtiquetasDIEGOCUNHA_GONDOLA;
    procedure ImprimeEtiquetasAquarium;
    procedure ImprimeEtiquetasJNUNES_Gondola;
    procedure ImprimeEtiquetasFarofaChicBijoux;
    procedure ImprimeEtiquetasCasaDasPickups;
    procedure ImprimeEtiquetasJNUNES_3COL;
    procedure ImprimeEtiquetasRITMOS;
    procedure ImprimeEtiquetasPontoDasTintas;
    procedure ImprimeEtiquetasDulalar;
    procedure ImprimeEtiquetasSA;
    procedure ImprimeEtiquetasCOISABOA;
    procedure ImprimeEtiquetasCruzeiro;
    procedure ImprimeEtiquetasMiniMercadoBemBaratinho;
    procedure ImprimeEtiquetasLosSantos;
    procedure ImprimeEtiquetasSaboresDaVila;
    procedure ImprimeEtiquetasLaCasaDecor;
    procedure ImprimeEtiquetasLosSantos_3Colunas;
    procedure ImprimeEtiquetasCHALOC_Lingerie;
    procedure ImprimeEtiquetasCHALOC_Tecidos;
    procedure ImprimeEtiquetasSUAQUITANDA;
    procedure ImprimeEtiquetasJABUTIANA;
    procedure ImprimeEtiquetasSA_Gondola;
    procedure ImprimeEtiquetasFRUTARIA;
    procedure ImprimeEtiquetasGentePequena;
    procedure ImprimeEtiquetasJALVES_Gondola;
    procedure ImprimeEtiquetasGoncalves;
    procedure ImprimeEtiquetasJALVES_Pequena;
    procedure ImprimeEtiquetasMIXTUDO;
    procedure ImprimeEtiquetasBOXXE;
    procedure ImprimeEtiquetasDeluc;
    Procedure ImprimeEtiquetasDisCabos;
    procedure ImprimeEtiquetaSantoAntonio;
    procedure ImprimeEtiquetaParPerfeito;
    procedure ImprimeEtiquetaBrumar_Nova;
    procedure ImprimeEtiquetaEmporioJardins;
    procedure ImprimeEtiquetaSaoJudasTadeus2;
    procedure ImprimeEtiquetaSuperDelli;
    procedure ImprimeEtiquetaSaoMiguel;
    procedure ImprimeEtiquetaPrecoBom;
    procedure ImprimeEtiquetasONIX_OURO;
    procedure ImprimeEtiquetasDONA_SANTA;
    procedure ImprimeEtiquetasONIX_FOLHEADOS;
    procedure ImprimeEtiquetaMaisEconomia;
    procedure ImprimeEtiquetaGAMBIARRA;
    procedure ImprimeEtiquetasAsaBranca_Gondola;
    procedure ImprimeEtiquetasAsaBranca_Gondola_Varejo;
    procedure ImprimeEtiquetaECOLLIMP;
    procedure ImprimeEtiquetaEmporioJardins_Pequeno;
    procedure ImprimeEtiquetas_ZeroGrauDepositoMercearia; // Elgin L42 DT
    procedure ImprimeEtiquetas_MerceariaDandan; // Elgin L42 Pro
    procedure ImprimeEtiquetas_EldoradoCasaDaArte;
    Procedure AjustaForm;
    procedure RodaScripts;
    function ExisteDescontoFornecedorInvalido: Boolean;
    function Arredonda_Pra_Cima(numero: Real; numero_de_casas: Integer): Real;
    procedure Corrige_Desconto;
    procedure tiraLinhasVazias(Grid: TStringGrid);
    Procedure LimpaGrid2(Grid: TStringGrid; comeco: Integer);
    procedure cancelar_item(linha: Integer);
    procedure exibirExclamacao;
    procedure ocultarExclamacao;
    function qtdInsuficienteParaPrevend(cdProduto: Integer;
      qtdSolicitada: Real): Real;
    procedure pintarLinhaStringGrid(Grid: TStringGrid; linha: Integer;
      cor: TColor);
    function quantidadeEmReserva(cdProduto: Integer): Real;
    procedure montaComboLote;
    function QuantidadeDispNoLote(nrLote: string; cdProduto: Integer;
      cdFabricanteLote: Integer): Real;
    function QuantidadeNoLoteNaGrid(nrLote: string; cdProduto: Integer;
      cdFabricanteLote: Integer): Real;
    procedure setLabel23(quantidade: Real);
    function QuantidadeDispEmLotes(cdProduto: Integer): Real;
    function DisponivelNoEstoque(quantidade: Real; cdProduto: Integer;
      alterandoQuantidadeNaGrid: Boolean;
      out tipoComposicao: TTipoComposicaoProduto;
      out estoqueDisponivel: Real): Boolean;
    procedure preencheArrayLinhasDestacadas;
    procedure LiberaCopia;
    function GetVersaoArq: string;
    procedure carregarPosicaoColunasDbGrid1;
    procedure salvarPosicaoColunasDbGrid1;
    procedure MontaComboAmbiente;
    procedure moverCamposImpressao(var relOrcamento: TFrmRelOrcamentos;
      movimento: Integer);
    function getVMudaPreco: string;
    procedure ProautoPreencherVDescontoCliente(codCliente: string);
    procedure preencherVariaveisCliente(codCliente: string);
    procedure atualizarQuantidadeNaGrid(cdProduto: Integer; quantidade: Real;
      out quantidadeAnterior: Real);
    function mudouTipoClienteAtacadoVarejo: Boolean;
    function mudouTabelaCliente: Boolean;
    function mudouTipoClienteCrediario: Boolean;
    function Desconto_Fornecedor: Boolean;
    function MessageDlgDef2(const Msg, MyCaption: string; AType: TMsgDlgType;
      AButtons: TMsgDlgButtons; DefButton: TModalResult;
      HelpCtx: Integer): Word;
    procedure DesativarCamposDescontoTotal;
    procedure consultarProdutosVendidosJunto;
    function mudouDescontoCadastroCliente: Boolean;
    procedure consultarUltimasVendasDoProdutoAoCliente;
    procedure listarUsuariosNaCombo;
    procedure limparDadosDoUsuario;
    procedure persistirFormulario;
    procedure verificaLucro(PorcCustoTotal : real; Inicializar : boolean = false);
    procedure persistirUltimoEstadoForm;
    function mudouClienteAlterandoPrevenda: Boolean;
    function getSomaCustoFinal: Currency;
    procedure HabilitaDesabilitaDesconto;
    function isDescontoValido(prevenda: TPrevenda): Boolean;
    procedure ColResize(Sender: TObject);
    function Empresas_UmaEtiqueta_porColuna : Boolean;
  public
    prevenda: TPrevenda;
    { Public declarations }

    listaLiberacoes : Tlist<TLiveracao>;
    modeloImpressora : string;
    driveSpooler : integer;
    portaImp : String;
    imprimeImpressora40Windows: String;
    tipoForro: string;
    turno: string;
    ArraylinhasDestacadas: array [0 .. 299] of Boolean;
    transformarOrcamentoPrevenda: Boolean;
    vlDescontoVendedor: Real;
    vDescontoCliente: Real;
    // Desconto do cliente definico no campo motivo da restricao do cadstro do cliente
    vLimiteCredito: Real;
    valorLimiteDisponivel: Real;
    // pega o limite de credito disponível antes da confirmação da pre-venda p ser utilizada no formulario de forma de pagamento p teste do limite ha hora da confirmação
    vUltimo_USUARIO: string[10];
    // pega o nome do ultimo usuário a fazer alguma liberação no sistema
    vMensagem_Promoc: string[40];
    vLimCredito: String[01];
    vCheqDev: String[01];
    // vSenha_Alteracao : String[50];
    vCliDevedor: String[01];
    vImpressao_80: String[01];
    vImpressao_40: String[01];
    vTipoImpressora: string[01];
    vPreVisualizarPrevenda: string[01];
    vUF_Cliente: string; // estado do cliente para uso do SugereCFOP
    vUF: string; // estado do cliente para uso do SugereCFOP
    vcidade: string;
    vDescricaoGama, vUndGama: string;
    vFatorGama: Real;
    vLimitarDescontoFornecedor: Boolean;
    Acao: Integer; // 0 - atualizacao, 1 - backup
    vCorrige_Desconto: string[01];
    // 'S' ou 'N', indica se é pra corrigir o desconto da prevenda
    vPergunta_Apos_Comprovante: String[01];
    vAutoPecas: String[01]; // define o ramo de atividade do cliente
    vProdutoPromocao: string[01];
    vTeste_do_Financeiro: string[01];
    // 0 --> testa no caixa 1 --> testa na pre-venda
    usarLoteValidade: Boolean;
    // define se o cliente irá selecionar lote e validade p os produtos
    vConferencia: Boolean;
    vAtacarejo: Boolean;
    vTipoCodigoBalanca: Integer;
    // define se o codigo de barras está com o preço ou peso do produto
    liberaDigitacaoLancamento: Boolean;
    vLancamento: string; // usada na nota de transferencia da PBFARMA
    quantidade: Real;
    codigoClienteAtual: string;
    // código do cliente selecionado para a prevenda ou orçamento
    tipoClienteAtual: string;
    // tipo do cliente selecionado para a prevenda ou orçamento
    vqtd: Integer;
    vcdVendedor, vnmVendedor: string;
    nrOrcamentoDia: Integer;
    possuiLivro: Boolean;
    vSimplesRemessa: Integer;
    auxiLiberacao: Boolean;
    dsCGC: string;
    liberouVenda: Boolean;
    possuiPermissaoVenderAbaixoDoCusto : Boolean;
    vPorcDesconto: Real;
    vcdAutorizador: Integer;
    formaPagamentoImp: string;
    // LblMensagem: Tletreiro;
    // procedure EnviaProdutosHospitalar;
    function getValorVendaProduto: Real;
    procedure LimparPesquisa;
    procedure BloqueiaAlteracaoPreVenda(nrOrcamento: Integer);
    procedure DesbloqueiaAlteracaoPreVenda(nrOrcamento: Integer);
    procedure ImprimeEtiquetasSafiraZebra;
    procedure ImprimeEtiquetasSafiraArgox;
    procedure LancaProdutos(quantidade: Real; lote: string = '';
      cdFabricanteLote: string = '');
    procedure CarregarItensGrid(prevenda: TPrevenda; ponteiro: string = '');
    procedure ImprimeOrcamentoPBFARMA(indexRadioGroupFormaPgto_: Integer;
      observacao: string = '');
    procedure ImprimeOrcamentoAmbiente(valor: Integer);
    function Envia_Email(tipo: string; pdf_enviado: string; email: string;
      numero: string): Boolean;
    Procedure LancaProdutosHospitalar;
    function SugereCFOP: string;
    function MessageDlgDef(const Msg, MyCaption: string; AType: TMsgDlgType;
      AButtons: TMsgDlgButtons; DefButton: TModalResult;
      HelpCtx: Longint): Word;
    procedure RodaScripts1;
    // procedure RodaScripts2;
    Procedure LiberaVanda;
    function validarQuantidadeItemFracionado(unidade: string): Boolean;
    // valida se o produto esta definido como fracionado no cadastro de unidade
    function ChamaInputBox(const ACaption, APrompt: string): string;
    function ChamaInputBoxTipoForracao(const ACaption, APrompt: string): string;
    function ChamaInputBoxEtiquetaZanquy(const ACaption,APrompt: string): integer;
    function ChamaInputBoxEtiquetaCAMPOS(const ACaption,APrompt: string): integer;
    function ChamaInputBoxTurno(const ACaption, APrompt: string): Integer;
    procedure AuxiliarLanctoNFe(i: Integer);
    function item_cancelado(linha: Integer): Boolean;
    procedure Gera_Desconto_Correto(var Preco_Desconto, Desconto_Atual: Real;
      valor_Total: Real; casas_decimais: Integer);
    // Procedure EnviaProdutos(quantidade:real; lote:string = '');
    Procedure EnviaProdutos;
    procedure Limpar_Tela;
    function SoNumeros(Const Texto: String): String;
    procedure Recalcula_Desconto;
    Procedure ImprimeOrcamento(valor: Integer; enviar_email: Boolean = false);
    procedure ImprimeOrcamento2(valor: Integer);
    Procedure ImprimeOrcamentoExterno(enviar_email: Boolean = false);
    Procedure UltimoLancamento;
    function UltimoLancamentoBloqueandoTabela(qry: TADOQuery): string;
    Function SystemDateTime(tDate: TDateTime; tTime: TDateTime): Boolean;
    // atualizar a data do sistema com o banco de dados, para as máquinas que perdem a hora
    Function TestaRestricao: Boolean;
    function LimpaEdtDesconto: string;
    Procedure ImprimeComprovante(valor: Integer);
    Procedure ImprimeLL(valor: Integer);
    procedure ImprimeEtiquetasVarejao;
    procedure ImprimeEtiquetasJUDASTADEU_L42;
    procedure ImprimeEtiquetaPR;
    procedure ImprimeEtiquetaDescontao;
    procedure ImprimeEtiquetaComplementusELGIN;
    procedure ImprimeEtiquetaPR_ELGIN;
    procedure ImprimeEtiquetaSAOJOAO;
    procedure ImprimeEtiquetaPRECINHO10;
    procedure ImprimeEtiquetaBRAZNAMODA;
    procedure ImprimeEtiquetaMERCADINHOSAOJUDASTADEU18_ELGIN;
    procedure ImprimeEtiquetaECONOMIZE_ELGIN;
    procedure ImprimeEtiquetaElBarretoTriplaGrande;
    procedure ImprimeEtiquetaElBarretoTriplaMenor;
    procedure ImprimeEtiquetaElBarretoJoias;
    procedure ImprimeEtiquetaEletroSatGrande;
    procedure ImprimeEtiquetaEletroSatDuplaGrande;
    procedure ImprimeEtiquetaEletroSatTriplaGrande;
    procedure ImprimeEtiquetaEletroSatTriplaPequena;
    procedure ImprimeEtiquetaDAYA_ELGIN;
    procedure ImprimeEtiquetaAtacarejo;
    procedure ImprimeEtiquetaDISSEMEDISSE_ELGIN;
    procedure ImprimeEtiquetaFlorDLis;
    procedure ImprimeEtiquetaCLOSETMARIAFLOR_ELGIN;
    procedure ImprimeEtiquetaNutriMix;
    procedure ImprimeEtiquetaMEGA;
    procedure ImprimeEtiquetaJetLaser;
    procedure ImprimeEtiquetaPS;
    procedure ImprimeEtiquetaBrumar;
    procedure ImprimeEtiquetaChavesDeOuro;
    procedure ImprimeEtiquetaPoliana;
    procedure ImprimeEtiquetaHIS;
    PROCEDURE ImprimeEtiquetaHITZ;
    procedure ImprimeEtiquetasMarttina;
    procedure ImprimeEtiquetasComplemento;
    procedure ImprimeEtiquetaChaloc;
    procedure ImprimeEtiquetasSaboramil;
    procedure ImprimeEtiquetasPazone;
    procedure ImprimeEtiquetaOticaSantaLuiza;
    Procedure PegaClienteAtacadoVarejo;
    procedure atualizaGridDados;
    Procedure SalvaLogEventos(dsEvento: String; dtEvento: TDateTime;
      hrEvento: String; dsLancamento: String; dsDocumento: String;
      vlvalor: Real; cdUsuario: Integer; cdOpcao: String);
    Function PegaDatabanco: TDateTime;
    Function pegaHoraBanco: String;
    function Verifica_PREVENDA_SALVANOCAIXA: Boolean;
    function Existe_Numero_Orcamento(nrOrcamento: string): Boolean;
    function Verifica_Se_Produto_Fracionado(cdProduto: string): Boolean;
    function clienteComRestricaoFinanceira(var restricao: TListaRestricao;
      VendaAtual: string): Boolean;
    procedure SetarClienteNaCombo(cdCliente: string);
    procedure PreencherCamposDoClienteSetadoNaCombo;
    function PERMISSAO(vTag: String; vColuna: String;
      exibirMsgAcessoNegado: Boolean = True): String;
    procedure Cancelar;
    function Solicitar_Login(forcarLogin: String = 'N'): Boolean;
    function getMensagemRestricao(restricao: TListaRestricao): string;
    function RequisitosAtendidos: Boolean;
    function QuantidadePositiva: Boolean;
    function Vender_Proibida_Fracionado: Boolean;
    function PossuiEstoque: Boolean;
    function ProdutoJaReservado: Boolean;
    function ClienteValido: Boolean;
    function VendedorValido: Boolean;
    function LoginValido: Boolean;
    function ExisteItemPrevenda: Boolean;
    function ValidarNumeroLancamento_LIBEL: Boolean;
    function getHoraServidor: string;
    procedure Verifica_Livro_Forracao;
    procedure SalvarPreVenda(prevenda: TPrevenda;
      enviar_email: Boolean = false);
    function GetFlagEmpresa: string;
    function GetValorIPIBruto(prevenda: TPrevenda): Real;
    function GetValorIPILiquido(prevenda: TPrevenda): Real;
    function ValidarVersaoExeVersaoBAnco: Boolean;
    function Formatar13Digitos(codigo: string): string;
    function isClienteRegistrado: Boolean;
    procedure RegistraCliente;
  end;

const
  ScreenWidth: Longint = 800; { I designed my form in 800x600 mode. }
  ScreenHeight: Longint = 600;
  sw: Longint = 800;
  sh: Longint = 600;

var
  FrmPrincipalPreVenda: TFrmPrincipalPreVenda;
  vInternet: Boolean; // true - conectado  false - desconectado
  vSalvar: Integer;
  vdtBloqueio: Integer;
  TestaFinanceiroNaConfirmacao: Boolean;
  // Indica se o teste do financeiro do cliente é feito na confirmação ou na escolha do cliente
  // vData_Banco         : String[10];
  vTime: String[10];
  vEscolheProduto: String[01];
  // verifica se abilita a combo da descrição dos produtos
  vEstqNegativo: String[01]; // vender com estoque negativo ?
  vSelecionaForma: String[01]; // Selciona forma de pagamento.
  vSelecionaCFOP: String[01]; // Selciona CFOP por item
  vJurosCobrado: Real;
  // porcentagem padrao de juros cobrado & pega a porcentagem padrao de desconto
  vMudaPreco, vTipoImp: String[01];
  // saso seja S o preço de venda é liberado para alteração no ato da venda
  vcdOperador: String[04]; // codigo na tabela de pessoa do funcionario que loga
  vFlag: String[02];
  Ativa: Char;
  DTipoImp: TIniFile;
  // Variáveis que irão cahamar o support.ini para achar o tipo de impressão
  vOpcoes: String[01];
  vTesteFinanceiro: String[01];
  // variável para testar se já foi testado o financeiro
  vAtacadoVarejo: String[01];
  cdTabelaPreco : integer;
  // variável para saber se o cliente é de atacado ou varejo
  vMemo: TMemo;
  vTipoDescontoNF: string[1];
  vPAFECF: Boolean;
  vVetor: VetorPermissao;
  vObs: string; // variavel usada para gravar a observacao da pre-venda
  vCasasPreco, vCasasQtd: Integer;
  vEmpresa: String[50]; // Pega o nome da empresa do Support.ini
  vGerarSpedFiscal, vGerarSpedPis, vGerarSintegra, vDescontoClienteAuto
    : Boolean;
  vFlagEtiqueta: String[50];
  vcdDeposito: string[6];
  // Pega o flag do cliente usado nas etiquetas do support.ini
  nmEmpresa: String[50];
  vOcultaDesconto: string[1];
  // nao mostra valor com desconto na impressao da pre-venda
  vendereco: String[100]; // Pega o nome da empresa do Support.ini
  vOrcamento: String[01]; // indica se é uma prevenda ou orcamento
  vConferencia: Boolean;
  vMatrizFilial: String[50];
  duasVias40Colunas: String[1];
  // indica se limpa ou nao limpa a grid ao trocar de cliente
  vLimiteCasasPreco: Integer; // diz a partir de quantas casas decimais do preço
  // será usada a máscara antiga do edtdesconto "com cinco casas decimais"
  vlTotalAnterior: Real;
  vExibir: Boolean;
  vOcultaReferenciaNaImpressao: Boolean;
  vBloqueioPreVenda: Boolean;
  vAutoLogoff: Boolean;
  vBloquearDescontoAtacado: Boolean;
  vBloqueiaDesconto: Boolean;
  vDestacarItensOcupados: Boolean;
  // indica se os itens que são insuficientes para atender todas as prevendas em aberto
  // devem ficar destacados em amarelo...
  vUsuarioProxy: string; // usuario usado na dll se tiver
  vSenhaProxy: string; // senha usado na dll se tiver
  restricaoFinanceira: TListaRestricao;
  indiceClienteAtual: Integer; // índice do cliente atual
  vLogoMarca: TStream;
  vIpFTP, vDsUsuarioFTP, vDsSenhaFTP: String;

implementation

uses uFuncoesPadrao, DataModulo, FrmPrincipal, relOrcamentosPBFARMA,
  cdConsultaProduto, FrmConsultaEspecificacao, CancelamentoVenda,
  FormaPag, Consulta_Prevenda, cdCliente,
  FrmSaida, UFrmcadEscola, UfrmcadSerieEscola, UfrmCadLista,
  FrmRelContagem, TresEtiquetas, AlteraDescricao, cdCFOP, Informacao,
  Thread_Conexao3, Declaracao, formBuscaCliente, ListaPedidos,
  FormCdAmbiente, relOrcamentosAmbiente, NEGProduto, PedeSenh,
  FormEtiquetaPontoDasTintas,
  Conferencia, NEGUnidade, DOMUnidade, FormLancaVendaPerdida,
  ConsultaComposicao, FormDuasEtiquetas, IdAttachmentFile, Rel_Orcamentos,
  Rel_Orcamentos_Novo.dcu, FrmTresEtiquetasViva, FrmQuatroEtiquetas, DOMPremio,
  NEGPremio,DOMPessoa, NEGPessoa,unitLogoMaker,
  BuscaObjetos, FrmTresEtiquetasRural,
  uThreadChaveAcesso, FormRegistroSistema, uThreadBlockChave, RelOrcamentos40,
  comobj, LucroVenda, NEGACBrPosPrint;

{$R *.DFM}

function TFrmPrincipalPreVenda.isClienteRegistrado: Boolean;
var
  qry: TADOQuery;
  temCOD_FTP, temCNPJ, temCampoCriptografado, campoCodFTPPreenchido,
    campoResgistroPreenchido: Boolean;
  chaveInvalida: Boolean;
begin
  qry := TADOQuery.Create(nil);
  qry.Connection := DModulo.Conexao;
  with qry do
  begin
    // verifico se o campo do ftp existe
    sql.Text := 'SELECT 1 FROM syscolumns WHERE name = ''cdCodFTP'' ';
    open;
    temCOD_FTP := RecordCount > 0;
    Close;

    // agora verifico se o codigo do cliente do ftp está vazio
    sql.Text := 'select cdCodFTP from configuracao';
    open;
    campoCodFTPPreenchido := FieldByName('cdCodFTP').AsString <> '';
    Close;

    // agora verifico se o cliente tem o cnpj cadastrado
    sql.Text := 'select dsCGC from configuracao';
    open;
    temCNPJ := FieldByName('dsCGC').AsString <> '';
    Close;

    // verifico se o campo da chave criptografada existe
    sql.Text := 'SELECT 1 FROM syscolumns WHERE name = ''dsRegistro'' ';
    open;
    temCampoCriptografado := RecordCount > 0;
    Close;
    if not temCampoCriptografado then
    begin // crio a o campo do registro e flag de emergência nas configurações
      sql.Text :=
        'ALTER TABLE CONFIGURACAO ADD dsRegistro varchar(50), Emergencia bit, EmTolerancia bit ';
      ExecSQL;
    end;

    sql.Text := 'select dsRegistro from configuracao';
    open;
    campoResgistroPreenchido := qry.FieldByName('dsRegistro').AsString <> '';
    Close;

  end;
  result := (temCOD_FTP) and (temCNPJ) and (temCampoCriptografado) and
    (campoCodFTPPreenchido) and (campoResgistroPreenchido);
  FreeAndNil(qry);
end;

function isChaveInvalida: Boolean;
var
  qry: TADOQuery;
  temCOD_FTP, temCNPJ, temCampoCriptografado, campoCodFTPvazio: Boolean;
  chaveInvalida: Boolean;
  cnpjBanco, dvBanco, DigitoCnpj, cnpjChave, dvChave, chave: string;
begin
  qry := TADOQuery.Create(nil);
  qry.Connection := DModulo.Conexao;
  chaveInvalida := false;
  with qry do
  begin
    // valido a chave que foi registrada que está no campo dsRegistro com o cnpj do banco
    sql.Text := 'select dsRegistro, dsCGC from configuracao';
    open;
    if FieldByName('dsRegistro').AsString <> '' then
    begin
      chave := Descriptografar(PWideChar(FieldByName('dsRegistro').AsString));
      cnpjBanco := RemoveEspaco(RetiraPontuacao(FieldByName('dsCGC').AsString));
      if Length(cnpjBanco) = 11 then // cpf
        dvBanco :=
          Copy(RemoveEspaco(RetiraPontuacao(FieldByName('dsCGC')
          .AsString)), 10, 2)
      else // cnpj
        dvBanco :=
          Copy(RemoveEspaco(RetiraPontuacao(FieldByName('dsCGC')
          .AsString)), 13, 2);
      cnpjBanco :=
        Copy(RemoveEspaco(RetiraPontuacao(FieldByName('dsCGC')
        .AsString)), 1, 5);
      cnpjChave := Copy(chave, 11, 5);
      DigitoCnpj := Copy(chave, 16, 2);
      Close;
      chaveInvalida := (cnpjBanco <> cnpjChave) or (dvBanco <> DigitoCnpj);;
    end
    else
    begin
      chaveInvalida := True;
    end;
  end;
  result := (chaveInvalida);
  FreeAndNil(qry);
end;

function EstaEmTolerancia: Boolean;
var
  qry: TADOQuery;
  EmTolerancia: Boolean;
  chave, DtExpiracao: string;

begin
  qry := TADOQuery.Create(nil);
  qry.Connection := DModulo.Conexao;

  with qry do
  begin

    // funcao que retorna a data de expriração
    DtExpiracao := DateToStr(RetornaDtExpira);
    // se a data de expiração faltar menos de 5 dias coloco o flag para sim - true = 1
    if ((strtodate(DtExpiracao) - strtodate(vData_Banco)) < 5) then
    begin
      sql.Text := 'update configuracao set EmTolerancia = 1';
      ExecSQL;
      EmTolerancia := True;
    end
    else
    begin
      sql.Text := 'update configuracao set EmTolerancia = 0';
      ExecSQL;
      EmTolerancia := false;
    end;
    result := EmTolerancia;
  end;
  FreeAndNil(qry);
end;

function DataSequencial_Maior_DataBrasilia: Boolean;
var
  qry: TADOQuery;
  dataSequencial, dataBrasilia: TDateTime;
begin
  qry := TADOQuery.Create(nil);
  qry.Connection := DModulo.Conexao;
  with qry do
  begin
    sql.Text := 'select nrVlAvulso from sequencial';
    open;
    dataSequencial := FloatToDateTime(FieldByName('nrVlAvulso').AsInteger);
    Close;
  end;
  FreeAndNil(qry);

  dataBrasilia := DateOf(ObterDataHoraInternet);

  if DateToStr(dataBrasilia) = '30/12/1899' then
    dataBrasilia := dataSequencial;

  result := dataSequencial > dataBrasilia;
end;

procedure TFrmPrincipalPreVenda.RegistraCliente;
var
  qry: TADOQuery;
  threadChave: ThreadChaveAcesso;
  threadBloqueio: threadBlockChave;
  data: TDateTime;
  clienteRegistrado, EmTolerancia: Boolean;
  diaDaSemana: String;
begin
  diaDaSemana := RetirarAcento(UpperCase(NomeDoDia(strtodate(vData_Banco))));
  // não solicita a chave no fim de semana
  if ((diaDaSemana = 'SABADO') or (diaDaSemana = 'DOMINGO') or
    (isFeriadoNacional(strtodate(vData_Banco)))) then
    exit;

  clienteRegistrado := isClienteRegistrado;
  EmTolerancia := EstaEmTolerancia();
  // testa se a data do sistema esta de acordo com a de brasilia
  // testa se o cliente esta registrado
  // testa se o cliente esta no periodo de tolerancia
  // libera quado o cliente não for registrado e a data for correta e tiver prazo de uso do sistema

  // verifico nessa thread se possui o arquivo de bloqueio, se existir entra na thread pra pegar a chave nova
  threadBloqueio := threadBlockChave.Create(false);
  threadBloqueio.FreeOnTerminate := True;

  while FrmPrincipal.finalizouThreadBloqueio = false do
  begin
    Sleep(500);
  end;

  // esse caso é para os clientes que tinha a chave antiga.
  // if (bloquearChave = false) then begin
  // if (DataSequencial_Maior_DataBrasilia) then //qd colocar a chave nos outros módulos, tirar essa linha
  // exit;                                     //e tirar todas as comparações do nrVlAvulso e comparar só com a data da chave
  // end;

  // se o cliente for novo ou a chave for invalida abro form de registro
  if (clienteRegistrado = false) or (isChaveInvalida) then
  begin
    FrmRegistroSistema := TFrmRegistroSistema.Create(Application);
    FrmRegistroSistema.chaveInvalida := isChaveInvalida;
    FrmRegistroSistema.ShowModal;
  end
  else
  begin // o cliente possui todos os requisitos e já foi registrado, então busco a chave via internet
    // verifico se está no prazo para baixar o arquivo do ftp para não fazer isso toda vez q entrar no sistema
    if (EmTolerancia) or (FrmPrincipal.bloquearChave) then
    begin
      qry := TADOQuery.Create(nil);
      qry.Connection := DModulo.Conexao;
      qry.sql.Text := 'select top 1 cdCodFtp from configuracao';
      qry.open;
      // crio a thread pra baixar o arquivo e executar as validações
      threadChave := ThreadChaveAcesso.Create(True);
      threadChave.FreeOnTerminate := True;
      threadChave.vCodFtp := qry.FieldByName('cdCodFtp').AsString;
      threadChave.Resume;
    end;
  end;
  finalizouThreadBloqueio := false;
end;

function TFrmPrincipalPreVenda.PERMISSAO(vTag: String; vColuna: String;
  exibirMsgAcessoNegado: Boolean = True): String;
var
  i: Integer;
  vOpcao: Integer; // Opcão passada como parâmetro convertida para forma integer
  vPermissao: String[1]; // variável de permissão S ou N
begin
  // Não realiza montagem de vetor com opções de acesso de super usuário
  // Coluna 0 = Acesso Total; 2 = Novo; 3 = Altera; 4 = Exclui; 5 = Visualiza; 6 = Imprime
  // 7 = Baixa
  // Atribui a Opção a uma variável integer
  vPermissao := '';
  if vColuna = '0' then
    vOpcao := 0;
  if vColuna = 'N' then
    vOpcao := 1;
  if vColuna = 'A' then
    vOpcao := 2;
  if vColuna = 'E' then
    vOpcao := 3;
  if vColuna = 'V' then
    vOpcao := 4;
  if vColuna = 'I' then
    vOpcao := 5;
  if vColuna = 'B' then
    vOpcao := 6;
  // Localiza opção no vetor
  for i := 1 to 900 do
  begin // 60 número máximo de opções do menu
    // Acesso Total na opção
    case vOpcao of
      0:
        if vVetor[i, 1] = vTag then
          vPermissao := 'S';
      1:
        if (vVetor[i, 1] = vTag) and (vVetor[i, 2] = 'X') then
          vPermissao := 'S';
      2:
        if (vVetor[i, 1] = vTag) and (vVetor[i, 3] = 'X') then
          vPermissao := 'S';
      3:
        if (vVetor[i, 1] = vTag) and (vVetor[i, 4] = 'X') then
          vPermissao := 'S';
      4:
        if (vVetor[i, 1] = vTag) and (vVetor[i, 5] = 'X') then
          vPermissao := 'S';
      5:
        if (vVetor[i, 1] = vTag) and (vVetor[i, 6] = 'X') then
          vPermissao := 'S';
      6:
        if (vVetor[i, 1] = vTag) and (vVetor[i, 7] = 'X') then
          vPermissao := 'S';
    end; // Case
  end; // for
  if vPermissao <> 'S' then
  begin
    vPermissao := 'N';
    if exibirMsgAcessoNegado then
    begin
      // Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
      Application.MessageBox('Necessário permissão para executar esta ação.',
        'Aviso', mb_Ok + mb_IconExclamation);
      // MessageDlg ('Necessário permissão para executar esta ação.', mtInformation, [mbOk],0);
    end;
  end; // else
  PERMISSAO := vPermissao;
end;

{ Configuração que pede senha para liberar desconto para cliente atacado }
function bloquearDescontoAtacado: Boolean;
// indica se é permitido dar desconto a cliente Atacado
var
  query: TADOQuery;
  resultado: Boolean;
begin
  query := TADOQuery.Create(nil);
  query.Connection := DModulo.Conexao;
  with query do
  begin
    sql.Text :=
      'Select bloquearDescontoAtacado From Configuracao WITH (NOLOCK) ';
    open;
    resultado := FieldByName('bloquearDescontoAtacado').AsBoolean;
  end;
  FreeAndNil(query);
  result := resultado;
end;

function GetLimiteDescontoFornecedor(cdCliente, cdProduto: Integer): Real;
// pega o desconto maximo permitido por fornecedor
var
  query: TADOQuery;
  resultado: Real;
begin
  query := TADOQuery.Create(nil);
  query.Connection := DModulo.Conexao;
  with query do
  begin
    sql.Text := 'SELECT CASE ' +
      '(SELECT EXISTIR FROM PESSOA with (nolock) WHERE cdPessoa = :cdCliente) WHEN ''F'' THEN '
      + '(SELECT F.DescontoMaxPFisica FROM Produto P with (nolock) INNER JOIN Fornecedor F with (nolock) ON P.cdPessoa = F.cdPessoa '
      + '			WHERE cdProduto = :cdProduto1) ' + 'WHEN ''J'' THEN ' +
      '(SELECT F.DescontoMaxPJuridica FROM Produto P with (nolock) INNER JOIN Fornecedor F with (nolock) ON P.cdPessoa = F.cdPessoa '
      + '			WHERE cdProduto = :cdProduto2) ' + 'END AS LimiteDescontoFor ';
    Parameters.ParamByName('cdProduto1').Value := cdProduto;
    Parameters.ParamByName('cdProduto2').Value := cdProduto;
    Parameters.ParamByName('cdCliente').Value := cdCliente;
    open;
    if FieldByName('LimiteDescontoFor').AsFloat <= 0 then
      resultado := 100
    else
      resultado := FieldByName('LimiteDescontoFor').AsFloat;
  end;
  FreeAndNil(query);
  result := resultado;
end;

function isClienteRegistrado: Boolean;
var
  qry: TADOQuery;
  temCOD_FTP, temCNPJ, temCampoCriptografado, campoCodFTPPreenchido,
    campoResgistroPreenchido: Boolean;
  chaveInvalida: Boolean;
begin
  qry := TADOQuery.Create(nil);
  qry.Connection := DModulo.Conexao;
  with qry do
  begin
    // verifico se o campo do ftp existe
    sql.Text := 'SELECT 1 FROM syscolumns WHERE name = ''cdCodFTP'' ';
    open;
    temCOD_FTP := RecordCount > 0;
    Close;

    // agora verifico se o codigo do cliente do ftp está vazio
    sql.Text := 'select cdCodFTP from configuracao WITH (NOLOCK)';
    open;
    campoCodFTPPreenchido := FieldByName('cdCodFTP').AsString <> '';
    Close;

    // agora verifico se o cliente tem o cnpj cadastrado
    sql.Text := 'select dsCGC from configuracao WITH (NOLOCK)';
    open;
    temCNPJ := FieldByName('dsCGC').AsString <> '';
    Close;

    // verifico se o campo da chave criptografada existe
    sql.Text := 'SELECT 1 FROM syscolumns WHERE name = ''dsRegistro'' ';
    open;
    temCampoCriptografado := RecordCount > 0;
    Close;
    if not temCampoCriptografado then
    begin // crio a o campo do registro e flag de emergência nas configurações
      sql.Text :=
        'ALTER TABLE CONFIGURACAO ADD dsRegistro varchar(50), Emergencia bit, EmTolerancia bit ';
      ExecSQL;
    end;

    sql.Text := 'select dsRegistro from configuracao WITH (NOLOCK)';
    open;
    campoResgistroPreenchido := qry.FieldByName('dsRegistro').AsString <> '';
    Close;

  end;
  result := (temCOD_FTP) and (temCNPJ) and (temCampoCriptografado) and
    (campoCodFTPPreenchido) and (campoResgistroPreenchido);
  FreeAndNil(qry);
end;

function LiberadoUso: Boolean;
var
  DtExpiracao: string;
begin
  // funcao que retorna a data de expriração
  DtExpiracao := DateToStr(RetornaDtExpira);
  // se a data de expiração faltar menos de 10 dias coloco o flag para sim - true = 1
  if ((strtodate(DtExpiracao) - strtodate(vData_Banco)) >= 0) then
    LiberadoUso := True
  else
    LiberadoUso := false;
end;

function RegistraCliente: Boolean;
var
  clienteRegistrado, podeUsar: Boolean;
  diaDaSemana: String;
begin
  diaDaSemana := UpperCase(NomeDoDia(strtodate(vData_Banco)));
  podeUsar := false;

  clienteRegistrado := isClienteRegistrado;
  if (clienteRegistrado = false) then
  begin
    Application.MessageBox('Acesse o sistema saef para atualizar a chave.',
      'Atenção', mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
  end
  else if (LiberadoUso = false) then
  begin
    // não solicita a chave no fim de semana
    if ((diaDaSemana = 'SABADO') or (diaDaSemana = 'DOMINGO') or
      (isFeriadoNacional(strtodate(vData_Banco)))) then
      podeUsar := True
    else
    begin
      Application.MessageBox
        (Pchar('A chave de acesso ao sistema está expirada. ' + #13#10 +
        'Acesse o sistema saef para atualizar sua chave'), 'Atenção',
        mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
      podeUsar := false;
    end;
  end
  else
    podeUsar := True;
  result := podeUsar;
end;

{ Retorna o índice da coluna na dbGrid que tem o fieldName }
function IndexOfDbGrid(dbGrid: TDBGrid; fieldName: string): Integer;
var
  i: Integer;
  resultado: Integer;
begin
  resultado := -1;
  for i := 0 to dbGrid.Columns.Count - 1 do
  begin
    if dbGrid.Columns[i].fieldName = fieldName then
    begin
      resultado := i;
      Break;
    end;
  end;
  result := resultado;
end;

{ Troca as colunas de lugar, a coluna de índice "fromIndex" troca de lugar com a coluna de índice "toIndex" }
procedure trocarColunaDbGrid(dbGrid: TDBGrid;
  FromIndex, ToIndex, cwidth: Integer);
var
  coluna: TColumn;
begin
  coluna := TColumn.Create(nil);
  with coluna do
  begin
    alignment := dbGrid.Columns[ToIndex].alignment;
    fieldName := dbGrid.Columns[ToIndex].fieldName;
    Title := dbGrid.Columns[ToIndex].Title;
    // width:= DBGrid.Columns[toIndex].Width;
  end;
  with dbGrid.Columns[ToIndex] do
  begin
    alignment := dbGrid.Columns[FromIndex].alignment;
    fieldName := dbGrid.Columns[FromIndex].fieldName;
    Title := dbGrid.Columns[FromIndex].Title;
    if cwidth > -1 then
      width := cwidth
    else
      width := dbGrid.Columns[FromIndex].width;
  end;
  with dbGrid.Columns[FromIndex] do
  begin
    alignment := coluna.alignment;
    fieldName := coluna.fieldName;
    Title := coluna.Title;
    // width:= Coluna.Width;
  end;
  FreeAndNil(coluna);
end;

procedure TFrmPrincipalPreVenda.RodaScripts;
begin
  try
    with DModulo.ADOCommand1 do
    begin
      CommandText := '';
      CommandText := 'DECLARE @TESTE AS INTEGER ' + 'SET @TESTE = ' +
        '(SELECT COUNT(COLUMN_NAME) AS OK FROM INFORMATION_SCHEMA.COLUMNS ' +
        'WHERE TABLE_NAME = ''IteOrcamento'' AND COLUMN_NAME  = ''dsMetragem'') '
        + 'IF (@TESTE = 0) BEGIN ' + ' ALTER TABLE IteOrcamento ADD ' +
        ' dsMetragem varchar(10) ' + 'END ';
      Execute;

      CommandText :=
        'DECLARE @TESTE AS INTEGER                                              '
        + 'SET @TESTE =                                                           '
        + '(SELECT COUNT(COLUMN_NAME) AS OK FROM INFORMATION_SCHEMA.COLUMNS       '
        + 'WHERE TABLE_NAME = ''IteOrcamento'' AND COLUMN_NAME  = ''dsServico'') '
        + 'IF (@TESTE = 0) BEGIN                                                  '
        + ' ALTER TABLE IteOrcamento ADD                                          '
        + ' dsServico  varchar(150)                                               '
        + 'END                                                                    ';
      Execute;

      // Cria SerieEscolar
      CommandText := ' DECLARE @TESTE AS INTEGER        ' +
        'SET @TESTE =                    ' +
        '(SELECT COUNT(COLUMN_NAME) AS OK FROM INFORMATION_SCHEMA.COLUMNS ' +
        'WHERE TABLE_NAME = ''Escola'')  ' + 'IF (@TESTE = 0) BEGIN           '
        + ' CREATE TABLE Escola (          ' +
        ' CdEscola int NOT NULL,         ' + ' DsEscola varchar(60) NULL )    '
        + ' ALTER TABLE Escola             ' +
        ' ADD PRIMARY KEY (CdEscola ASC) ' + 'END                             ';
      Execute;
      CommandText := '';
      CommandText := ' DECLARE @TESTE AS INTEGER        ' +
        'SET @TESTE =                    ' +
        '(SELECT COUNT(COLUMN_NAME) AS OK FROM INFORMATION_SCHEMA.COLUMNS ' +
        'WHERE TABLE_NAME = ''IteOrcamento'')  ' +
        ' Alter TABLE IteOrcamento       ' + ' ALTER Column vlDesconto real   ';
      Execute;
      CommandText := '';
      CommandText := 'DECLARE @TESTE AS INTEGER      ' +
        'SET @TESTE =                   ' +
        '(SELECT COUNT(COLUMN_NAME) AS OK FROM INFORMATION_SCHEMA.COLUMNS  ' +
        'WHERE TABLE_NAME = ''SerieEscolar'')                              ' +
        ' IF (@TESTE = 0) BEGIN         ' + ' CREATE TABLE SerieEscolar (   ' +
        ' cdSerie   int NOT NULL,       ' + ' dsSerie   varchar(50) NULL,   ' +
        ' CdEscola  int NOT NULL )      ' + 'ALTER TABLE SerieEscolar       ' +
        ' ADD PRIMARY KEY (cdSerie ASC) ' + 'ALTER TABLE SerieEscolar       ' +
        ' ADD FOREIGN KEY (CdEscola)    ' + ' REFERENCES Escola  (CdEscola) ' +
        ' ON DELETE NO ACTION           ' + ' ON UPDATE NO ACTION           ' +
        ' END                           ';
      Execute;
      CommandText := '';
      CommandText := 'DECLARE @TESTE AS INTEGER  ' +
        'SET @TESTE =               ' +
        '(SELECT COUNT(COLUMN_NAME) AS OK FROM INFORMATION_SCHEMA.COLUMNS ' +
        'WHERE TABLE_NAME = ''ListaEscolar'') ' +
        ' IF (@TESTE = 0) BEGIN               ' +
        ' CREATE TABLE ListaEscolar ( ' + ' CdLista  int NOT NULL,   ' +
        ' Ano      datetime NULL,  ' + ' cdSerie  int NOT NULL,   ' +
        ' CdEscola int NOT NULL  ) ' + ' ALTER TABLE ListaEscolar ' +
        ' ADD PRIMARY KEY (CdLista ASC) ' + ' ALTER TABLE ListaEscolar   ' +
        ' ADD FOREIGN KEY (CdEscola) ' + ' REFERENCES Escola  (CdEscola) ' +
        ' ON DELETE NO ACTION  ' + ' ON UPDATE NO ACTION  ' +
        ' ALTER TABLE ListaEscolar ' + ' ADD FOREIGN KEY (cdSerie) ' +
        ' REFERENCES SerieEscolar  (cdSerie) ' + ' ON DELETE NO ACTION ' +
        ' ON UPDATE NO ACTION ' + 'END   ';
      Execute;
      CommandText := '';
      CommandText := 'DECLARE @TESTE AS INTEGER ' + 'SET @TESTE =              '
        + '(SELECT COUNT(COLUMN_NAME) AS OK FROM INFORMATION_SCHEMA.COLUMNS ' +
        'WHERE TABLE_NAME = ''ItensLista'') ' +
        ' IF (@TESTE = 0) BEGIN             ' + ' CREATE TABLE ItensLista ( ' +
        ' CdItemLista int IDENTITY, ' + ' CdObjeto    int NOT NULL, ' +
        ' dsObjeto    varchar(50) NULL, ' + ' Qtd         int NULL, ' +
        ' CdLista     int NOT NULL ) ' + ' ALTER TABLE ItensLista ' +
        ' ADD PRIMARY KEY (CdItemLista ASC) ' + ' ALTER TABLE ItensLista ' +
        ' ADD FOREIGN KEY (CdLista) ' + ' REFERENCES ListaEscolar  (CdLista) ' +
        ' ON DELETE NO ACTION ' + ' ON UPDATE NO ACTION ' + 'END   ';
      Execute;

      CommandText :=
        'DECLARE @TESTE AS INTEGER                                        ' +
        'SET @TESTE =                                                     ' +
        '(SELECT COUNT(COLUMN_NAME) AS OK FROM INFORMATION_SCHEMA.COLUMNS ' +
        'WHERE TABLE_NAME = ''Profissional'' )                            ' +
        'IF (@TESTE = 0) BEGIN                                            ' +
        ' CREATE TABLE Profissional (                                     ' +
        '       cdPessoa         int Not Null   )                         ' +
        'ALTER TABLE Profissional ADD PRIMARY KEY (cdPessoa ASC)          ' +
        'END                                                              ';
      Execute;

      CommandText :=
        'DECLARE @TESTE AS INTEGER                                          ' +
        'SET @TESTE =                                                       ' +
        '(SELECT COUNT(COLUMN_NAME) AS OK FROM INFORMATION_SCHEMA.COLUMNS   ' +
        'WHERE TABLE_NAME = ''ITEORCAMENTO'' and COLUMN_NAME = ''dsCFOP'' ) ' +
        'IF (@TESTE = 0) BEGIN                                              ' +
        ' ALTER TABLE ITEORCAMENTO ADD dsCFOP varchar(4)                    ' +
        'END                                                                ';
      Execute;

      CommandText :=
        'DECLARE @TESTE AS INTEGER                                               '
        + 'SET @TESTE =                                                            '
        + '(SELECT COUNT(COLUMN_NAME) AS OK FROM INFORMATION_SCHEMA.COLUMNS        '
        + 'WHERE TABLE_NAME = ''ORCAMENTO'' and COLUMN_NAME = ''cdProfissional'' ) '
        + 'IF (@TESTE = 0) BEGIN                                                   '
        + ' ALTER TABLE ORCAMENTO ADD cdProfissional int Null                      '
        + 'END                                                                     ';
      Execute;

      // ' ALTER TABLE ORCAMENTO                                                  '+
      // ' ADD FOREIGN KEY (cdPessoa)                                             '+
      // ' REFERENCES Pessoa (cdPessoa)                                           '+
      // ' ON DELETE NO ACTION                                                    '+
      // ' ON UPDATE NO ACTION                                                    '+

    end;
  except
    on e: Exception do
    begin
      ShowMessage('Errou ao GERAR TABELAS MOTIVO :' + e.Message);
      Salvar_erro(vData_Banco + ' | ' + pegaHoraBanco, 'PREVENDA',
        'TFrmPrincipalPreVenda.RodaScripts', e.Message);
    end;
  end;
end;

// procedure TFrmPrincipalPreVenda.RodaScripts2;
// begin
// try
// with DModulo.ADOCommand1 do begin
// if (UpperCase(vEmpresa) = 'JP LIVROS') then begin
// CommandText :='ALTER      PROCEDURE SUP_Imp_Pedido_Prevenda        '+
// '@DSLANCAMENTO VarChar(10) = Null,@CODIGO Int = Null,'+
// '@FLAG Int = Null   '+
// 'As                 '+
// 'If @FLAG = 1 Begin '+
// 'SELECT P.nmProduto,P.dsUnidade,P.cdFabricante,I.cdProduto,L.cdPessoa,I.nrQtd,I.vlUnitario,'+
// 'I.vlUnitario_Bruto,L.vlValor,L.vlDesconto,L.vlAcrescimo,P.dsReferencia,P.dsPrateleira   '+
// 'FROM Produto P WITH (NOLOCK),IteLcto I WITH (NOLOCK),Lancto L WITH (NOLOCK)  '+
// 'WHERE L.dsStatus = ''F'' And L.dsLancamento = I.dsLancamento And             '+
// 'I.cdProduto = P.cdProduto And L.dsStatus = I.dsStatus And                    '+
// 'I.dsCancelado Is Null And                                                    '+
// 'I.dsLancamento = @DSLANCAMENTO And I.cdPessoa = @CODIGO ORDER BY P.nmProduto '+
// 'End                                                                          '+
// 'If @FLAG = 2 Begin                                                           '+
// 'SELECT P.nmPessoa,T.nmProduto,T.dsProdutoNota,T.dsReferencia,O.cdPessoa,     '+
// 'O.nrOrcamento,O.cdCliente,I.cdProduto,O.dtEmissao,I.NrQtd,I.vlPreco,         '+
// 'O.nrDesconto,T.dsUnidade,T.dsPrateleira                                      '+
// 'FROM Orcamento O WITH (NOLOCK),Pessoa P WITH (NOLOCK),Produto T WITH (NOLOCK),IteOrcamento I WITH (NOLOCK) '+
// 'WHERE P.cdPessoa = O.cdPessoa And T.cdProduto = I.cdProduto And '+
// 'O.cdPessoa = P.cdPessoa And I.dsSituacao = '''' And             '+
// 'O.nrOrcamento = I.nrOrcamento And O.nrOrcamento = @DSLANCAMENTO '+
// 'order by T.nmProduto                                            '+
// 'End Else Begin                                                  '+
// 'SELECT P.nmPessoa,T.nmProduto,T.dsProdutoNota,T.dsReferencia,O.cdPessoa,O.nrOrcamento,O.cdCliente,'+
// 'I.cdProduto,O.dtEmissao,I.NrQtd,I.vlPreco,O.nrDesconto,T.dsUnidade,T.dsPrateleira       '+
// 'FROM Orcamento O WITH (NOLOCK),Pessoa P WITH (NOLOCK),Produto T WITH (NOLOCK),IteOrcamento I WITH (NOLOCK) '+
// 'WHERE P.cdPessoa = O.cdPessoa And T.cdProduto = I.cdProduto And      '+
// 'O.cdPessoa = P.cdPessoa And I.cdProduto <> 1 And I.dsSituacao = '''' '+
// 'And                                                                  '+
// 'O.nrOrcamento = I.nrOrcamento And O.nrOrcamento = @DSLANCAMENTO      '+
// 'order by T.nmProduto                                                 '+
// 'End                                                                  ';
// Execute;
// end else begin
// CommandText:= 'Alter PROCEDURE SUP_Imp_Pedido_Prevenda                                                                                                                   '+
// '@DSLANCAMENTO VarChar(10) = Null, @CODIGO Int = Null, @FLAG Int = Null  As                                                                                '+
// 'If @FLAG = 1 Begin                                                                                                                                        '+
// ' SELECT P.nmProduto,P.dsUnidade,P.cdFabricante,P.cdProduto,L.cdPessoa,I.nrQtd,I.vlUnitario,I.vlUnitario_Bruto,L.vlValor,L.vlDesconto,L.vlAcrescimo,       '+
// ' P.dsReferencia,P.dsPrateleira FROM Produto P WITH (NOLOCK),IteLcto I WITH (NOLOCK),Lancto L WITH (NOLOCK)  WHERE L.dsStatus = ''F'' And L.dsLancamento = '+
// ' I.dsLancamento and I.cdProduto = P.cdProduto And L.dsStatus = I.dsStatus And I.dsCancelado Is Null And I.dsLancamento = @DSLANCAMENTO And I.cdPessoa = @CODIGO '+
// 'End                                                                                                                                                       '+
// 'If @FLAG = 2 Begin                                                                                                                                        '+
// ' SELECT P.nmPessoa,T.nmProduto,T.dsReferencia,O.cdPessoa,I.nrLote,O.nrOrcamento,O.cdCliente,I.cdProduto,I.vlDesconto,O.dtEmissao,I.NrQtd,I.vlPreco,O.nrDesconto,   '+
// ' T.dsUnidade,T.dsPrateleira,I.dsMetragem FROM Orcamento O WITH (NOLOCK),Pessoa P WITH (NOLOCK),Produto T WITH (NOLOCK),IteOrcamento I WITH (NOLOCK) WHERE P.cdPessoa = O.cdPessoa '+
// ' And T.cdProduto = I.cdProduto And O.cdPessoa = P.cdPessoa And I.dsSituacao = '''' And O.nrOrcamento = I.nrOrcamento And O.nrOrcamento = @DSLANCAMENTO    '+
// ' order by T.dsPrateleira '+
// 'End                                                                                                                                                       '+
// 'Else Begin                                                                                                                                                '+
// ' SELECT P.nmPessoa,T.nmProduto,T.dsReferencia,O.cdPessoa,O.nrOrcamento,O.cdCliente,I.cdProduto,I.vlDesconto,O.dtEmissao,I.NrQtd,I.vlPreco,O.nrDesconto,   '+
// ' T.dsUnidade,T.dsPrateleira,I.dsMetragem,I.dsServico FROM Orcamento O WITH (NOLOCK),Pessoa P WITH (NOLOCK),Produto T WITH (NOLOCK),IteOrcamento I WITH (NOLOCK) WHERE P.cdPessoa = O.cdPessoa '+
// ' And T.cdProduto = I.cdProduto And O.cdPessoa = P.cdPessoa And I.cdProduto <> 1 And I.dsSituacao = '''' And O.nrOrcamento = I.nrOrcamento                 '+
// ' And O.nrOrcamento = @DSLANCAMENTO                                                                                                                        '+
// ' order by T.dsPrateleira '+
// 'End                                                                                                                                                       ';
// Execute;
// end;
// end;
// except
// on e:Exception do
// begin
// Salvar_erro(vData_Banco + ' | ' + pegaHoraBanco, 'PREVENDA', 'TFrmPrincipalPreVenda.RodaScripts2', e.Message);
// ShowMessage('Errou ao GERAR TABELAS MOTIVO :'+ e.Message);
// end;
// end;
// end;

{ ...Esta procedure redimensiona o form de acordo com a resolução do monitor,
  ... }
procedure TFrmPrincipalPreVenda.AjustaForm;
var
  i, w: Integer;
begin
  w := width; // automatico ou pode usar a constante sh
  scaled := True;
  if (screen.width <> sw) then
  begin
    height := Longint(height) * Longint(screen.height) DIV sh;
    width := Longint(width) * Longint(screen.width) DIV sw;
    scaleBy(screen.width - 400, sw);
  end;
  for i := ComponentCount - 1 downto 0 do
    with Components[i] do
    begin
      if GetPropInfo(ClassInfo, 'Font') <> nil then
        Font.Size := (width div w) * Font.Size;
    end;
end;

function Cryptografia(Action, Src: String): String;
Label Fim;
var
  KeyLen: Integer;
  KeyPos: Integer;
  OffSet: Integer;
  Dest, Key: String;
  SrcPos: Integer;
  SrcAsc: Integer;
  TmpSrcAsc: Integer;
  Range: Integer;
begin
  if (Src = '') Then
  begin
    result := '';
    Goto Fim;
  end;
  Key := 'YUQL23KL23DF90WI5E1JAS467NMCXXL6JAOAUWWMCL0AOMM4A4VZYW9KHJUI2347EJHJKDF3424SKL K3LAKDJSL9RTIKJ';
  Dest := '';
  KeyLen := Length(Key);
  KeyPos := 0;
  SrcPos := 0;
  SrcAsc := 0;
  Range := 256;
  if (Action = UpperCase('C')) then
  begin
    Randomize;
    OffSet := Random(Range);
    Dest := Format('%1.2x', [OffSet]);
    for SrcPos := 1 to Length(Src) do
    begin
      Application.ProcessMessages;
      SrcAsc := (Ord(Src[SrcPos]) + OffSet) Mod 255;
      if KeyPos < KeyLen then
        KeyPos := KeyPos + 1
      else
        KeyPos := 1;
      SrcAsc := SrcAsc Xor Ord(Key[KeyPos]);
      Dest := Dest + Format('%1.2x', [SrcAsc]);
      OffSet := SrcAsc;
    end;
  end
  Else if (Action = UpperCase('D')) then
  begin
    OffSet := StrToInt('$' + Copy(Src, 1, 2));
    SrcPos := 3;
    repeat
      SrcAsc := StrToInt('$' + Copy(Src, SrcPos, 2));
      if (KeyPos < KeyLen) Then
        KeyPos := KeyPos + 1
      else
        KeyPos := 1;
      TmpSrcAsc := SrcAsc Xor Ord(Key[KeyPos]);
      if TmpSrcAsc <= OffSet then
        TmpSrcAsc := 255 + TmpSrcAsc - OffSet
      else
        TmpSrcAsc := TmpSrcAsc - OffSet;
      Dest := Dest + Chr(TmpSrcAsc);
      OffSet := SrcAsc;
      SrcPos := SrcPos + 2;
    until (SrcPos >= Length(Src));
  end;
  result := Dest;
Fim:
end;

function RemoveChar(Const Texto: String): String;
var
  i: Integer;
  S: string;
begin
  S := '';
  for i := 1 To Length(Texto) Do
  begin
    if (Texto[i] in ['0' .. '9', '.', ',']) then
      S := S + Copy(Texto, i, 1);
  end;
  result := S;
end;

procedure TFrmPrincipalPreVenda.ProcessaMsg;
begin
  if Msg.Message = WM_KEYDOWN then
    if Msg.wParam = VK_RETURN then
    begin
      Keybd_event(VK_TAB, 0, 0, 0);
    end;
end;

function TFrmPrincipalPreVenda.ExisteDescontoFornecedorInvalido: Boolean;
var
  i: Integer;
  DescMax: Real;
  DescItemAtual: Real;
  resultado: Boolean;
begin
  resultado := false;
  if vLimitarDescontoFornecedor = True then
  begin
    for i := 0 to prevenda.itens.Count - 1 do
    begin
      DescMax := GetLimiteDescontoFornecedor(StrToInt(EdtCdCliente.Text),
        prevenda.itens[i].cdProduto);
      // DescItemAtual := 100 - ((StrToFloat(SgDados.Cells[3,x]) / StrToFloat(SgDados.Cells[9,x])) * 100);
      DescItemAtual := StrToFloatDef(EdtDesconto.Text, 0);
      if DescItemAtual > DescMax then
      begin
        MessageDlg('Desconto Máx definido pelo fornecedor é de ' +
          FormatFloat('0.00', DescMax) + '% no produto: ' + prevenda.itens[i]
          .descricao, mtWarning, [mbOK], 0);
        resultado := True;
        Break;
      end;
    end;
  end;
  result := resultado;
end;

function TFrmPrincipalPreVenda.ExisteItemPrevenda: Boolean;
begin
  result := True;
  if prevenda.itens.Count = 0 then
  begin
    Application.OnMessage := NaoProcessaMsg;
    MessageDlg('Não foi lançado nenhum item para essa pré venda \ orçamento!',
      mtWarning, [mbOK], 0);
    EdtDesconto.Text := '0,00000';
    EdtSubTotal.Text := '0,00';
    edtQtdItens.Text := '0';
    EdtTotal.Text := '0,00';
    edtValorBruto.Text := '0,00';
    EdtConsulta.Setfocus;
    Application.OnMessage := ProcessaMsg;
    BtnConfirmar.Enabled := True;
    Alteraquantidade1.Enabled := True;
    result := false;
  end;
end;

Procedure TFrmPrincipalPreVenda.NaoProcessaMsg;
begin
  if Msg.Message = WM_KEYDOWN then
    if Msg.wParam = VK_RETURN then
    begin
      // Keybd_event (VK_TAB,0,0,0);
    end;
end;

procedure TFrmPrincipalPreVenda.LiberaCopia;
// var DtExp :TDateTime;
// nomePC : String;
// diaDaSemana: String;
// qryChave : TADOQuery;
begin
  // if (ValidaComputadorSupport = false)  then
  // if RegistraCliente = False then
  // Application.Terminate;

  { if (ValidaComputadorSupport = false) then begin
    nomePC := pubNomeComputador;
    diaDaSemana := UpperCase(NomeDoDia(StrToDate(vData_Banco)));
    //não solicita a chave no fim de semana
    if ((diaDaSemana = 'SABADO') or (diaDaSemana = 'DOMINGO') or (isFeriadoNacional(StrToDate(vData_Banco)))) then exit;
    if ((nomePC <> 'DESENV01') and (nomePC <> 'DESENV02') and (nomePC <> 'DESENV03') and (nomePC <> 'KENN-PC') and
    (nomePC <> 'DESENV04') and (nomePC <> 'NOTEANDRE') and (nomePC <> 'ADM01')  and (nomePC <> 'DESENV05')  and
    (nomePC <> 'NOTEFABIANO') and (nomePC <> 'ATEND06') and (nomePC <> 'ATEND03') and (nomePC <> 'ATENDI') and
    (nomePC <> 'ATEND02') and (nomePC <> 'ATEND01') and (nomePC <> 'NOTEFISCAL') and (nomePC <> 'NOTETHIAGO') and (nomePC <> 'NOTEHERBERTH')) then begin

    qryChave := TADOQuery.Create(nil);
    qryChave.Connection := DModulo.Conexao;
    with qryChave do begin
    close;
    SQL.Text := 'SELECT nrVlAvulso FROM sequencial WITH (NOLOCK) ';
    //SQL.Text := 'SELECT dtExpiraCopia FROM CONFIGURACAO WITH (NOLOCK) ';
    Open;
    dtExp := FloatToDateTime(FieldByName('nrVlAvulso').AsInteger);
    close;
    if ((DtExp < StrToDate(vData_Banco)) or ((DtExp - 8) < StrToDate(vData_Banco))) then begin  //prazo vencido
    frmChave := TfrmChave.Create(Self);
    frmChave.ShowModal;
    end;
    end; //with
    end;
    end;
  }
end;

procedure TFrmPrincipalPreVenda.listarUsuariosNaCombo;
var
  query: TADOQuery;
begin
  query := TADOQuery.Create(self);
  query.Connection := DModulo.Conexao;
  cbxUsuario.Clear;
  with query do
  begin
    sql.Text := 'select Distinct s.dsNome ' + 'from Senha S WITH (NOLOCK) ' +
      '	inner join Permissao pe WITH (NOLOCK) ' + '		on s.dsNome = pe.dsNome '
      + '		and s.dsSenha = pe.dsSenha ' +
      'where pe.nrTag = 820 and pe.dsIncluir = ''X'' ';
    MontaComboListADO(query, cbxUsuario);
  end;
  FreeAndNil(query);
end;

procedure TFrmPrincipalPreVenda.FormCreate(Sender: TObject);
var
  DIniQtd: TIniFile; // Variáveis que irão cahamar o support.ini
  wndHandle: THandle;
  wndClass: array [0 .. 50] of Char;
  ThreadConexao3: TConexao3;
  nomePc: string;
begin
  Application.HintHidePause := 30000;
  lblMensagem.Left := -(lblMensagem.width);
  carregarPosicaoColunasDbGrid1;
  DBGrid1.OnColResize := ColResize;
  limparArrayBoolean(ArraylinhasDestacadas, 0, 299, false);
  CreateMutex(nil, false, 'PreVenda');
  if GetLastError = ERROR_ALREADY_EXISTS then
  begin
    if MessageDlg
      ('Este programa já está sendo executado neste computador! Deseja abrir outra pre-venda mesmo assim?',
      mtConfirmation, [mbYes, mbNo], 0) = mrNo then
    begin
      Application.Terminate; // TESTE
      FrmPrincipalPreVenda.Close;
      FrmPrincipalPreVenda := nil;
      FrmPrincipalPreVenda.Free;
      exit;
    end;
  end
  else
    EdtTotal.Text := '0,00';
  // ********* esconde a barra
  { StrPCopy(@wndClass[0],'Shell_TrayWnd');
    wndHandle := FindWindow(@wndClass[0], nil);
    ShowWindow(wndHandle, SW_RESTORE); }
  // *********
  intemIndexRgOpcoesOLD := RgOpcoes.ItemIndex;
  EdtTotal.Refresh;
  CriarIniSQL;
  DIniQtd := TIniFile.Create(ExtractFilePath(Application.ExeName) +
    'Support.ini');
  vMatrizFilial := DIniQtd.ReadString('MATRIZFILIAL', 'Flag', '');
  vFlagEtiqueta := DIniQtd.ReadString('ETIQUETA', 'Flag', '');
  vcdDeposito := DIniQtd.ReadString('CODIGODEPOSITO', 'Flag', '');
  With ADOQryProcura do
  begin // Buscar o valor das variaveis de ambiente
    sql.Text := 'Select * From Configuracao WITH (NOLOCK) ';
    open;
    TestaFinanceiroNaConfirmacao := FieldByName('testFinanConfPrevenda')
      .AsBoolean;
    vBloqueioPreVenda := FieldByName('bloqueiaPrevenda').AsBoolean;
    vOcultaReferenciaNaImpressao := FieldByName('dsOcultaReferencia')
      .AsString = 'S';
    dsCGC := FieldByName('dsCGC').AsString;
    vConferencia := FieldByName('ConferenciaPrevenda').AsBoolean;
    vdtBloqueio := FieldByName('dsDiasAtrazo').AsInteger;
    vPorcDesconto := FieldByName('dsPorcDesconto').AsFloat;
    vEstqNegativo := FieldByName('dsBloqEstqNegativo').AsString;
    vSelecionaCFOP := FieldByName('campo_48').AsString;
    vAutoLogoff := FieldByName('PrevendaAutoLogoff').AsString = 'S';
    vBloquearDescontoAtacado := FieldByName('bloquearDescontoAtacado')
      .AsBoolean;
    vSelecionaForma := FieldByName('Campo_7').AsString;
    vJurosCobrado := FieldByName('nrJurosDia').AsFloat;
    vEscolheProduto := FieldByName('dsEscolheProduto').AsString;
    vMudaPreco := FieldByName('dsMudaPreco').AsString;
    vMensagem_Promoc := FieldByName('dsMenPromocional').AsString;
    vCasasPreco := FieldByName('CasasPreco').AsInteger;
    vLogoMarca := CreateBlobStream(FieldByName('LogoMarca'), bmRead);
    vCasasQtd := FieldByName('CasasQtd').AsInteger;
    vcidade := FieldByName('dsCidade').AsString + ',';
    vUF := FieldByName('dsUF').AsString;
    vPergunta_Apos_Comprovante := FieldByName('ImpPreVenda').AsString;
    // se for 1 faz a pergunta p o comprovante de 80 colunas se for 2 imprime direto
    // vSenha_Alteracao := FieldByName('dsSenha1').AsString;
    vCliDevedor := FieldByName('dsBloqAtrazo').AsString;
    vLimiteCredito := FieldByName('nrLimiteCredito').AsFloat;
    vCheqDev := FieldByName('dsChequeDev').AsString;
    vLimCredito := FieldByName('dsBloqLimite').AsString;
    vendereco := FieldByName('dsEndereco').AsString;
    nmEmpresa := FieldByName('nmEmpresa').AsString;
    vAutoPecas := FieldByName('Campo_8').AsString;
    vOcultaDesconto := FieldByName('Campo_51').AsString;
    vDescontoClienteAuto := FieldByName('DescontoCliente').AsBoolean;
    duasVias40Colunas := FieldByName('Campo_30').AsString;
    imprimeImpressora40Windows := FieldByName('Campo_31').AsString;
    vLimitarDescontoFornecedor := FieldByName('LimitarDescontoFornecedor')
      .AsBoolean;
    vQtdPrint := FieldByName('nrPrintsPrevenda').AsString;
    vTipoDescontoNF := FieldByName('Campo_38').AsString;
    vGerarSpedFiscal := FieldByName('campo_52').AsString = 'S';
    vGerarSpedPis := FieldByName('campo_53').AsString = 'S';
    vGerarSintegra := FieldByName('campo_54').AsString = 'S';
    // campo booleano que recebe TRUE se o campo_39 = '1'
    vPAFECF := false;
    // não existe mais essa configuração   FieldByName('Campo_39').AsString = '1';
    vDestacarItensOcupados := FieldByName('pv_destaque').AsString = 'S';
    vEmpresa := FieldByName('CAMPO_19').AsString;
    lblMensagem.caption := FieldByName('Campo_20').AsString; // letreiro
    vImpressao_80 := FieldByName('CAMPO_22').AsString;
    // define se o cliente imprime prevenda no formularo continuo
    vImpressao_40 := FieldByName('CAMPO_23').AsString;
    // define se o cliente imprime prevenda no formularo pequeno de 40 colunas
    vTipoImpressora := FieldByName('CAMPO_24').AsString;
    // define se é para imprimir na porta lpt1 ou USB
    vPreVisualizarPrevenda := FieldByName('PreVisualizarPrevenda').AsString;
    vTeste_do_Financeiro := FieldByName('CAMPO_16').AsString;
    // 0 --> testa no caixa 1 --> testa na pre-venda
    vPrintSetup := FieldByName('CAMPO_29').AsString;
    // S --> sobe o print setup na hora de imprimir a pre-venda p o usuario escolher a qtd de copias
    usarLoteValidade := FieldByName('habilitaLoteValidade').AsBoolean;
    vConferencia := FieldByName('ConferenciaPrevenda').AsBoolean;
    vAtacarejo := FieldByName('boAtacarejo').AsBoolean;
    vIpFTP := FieldByName('IpFTP').AsString;
    vDsUsuarioFTP := FieldByName('DsUsuarioFTP').AsString;
    vDsSenhaFTP := Cryptografia('D', FieldByName('DsSenhaFTP').AsString);
    FrmPrincipal.vIpFTP := FieldByName('IpFTP').AsString;
    FrmPrincipal.vDsUsuarioFTP := FieldByName('DsUsuarioFTP').AsString;
    FrmPrincipal.vDsSenhaFTP := Cryptografia('D', FieldByName('DsSenhaFTP')
      .AsString);
    FrmPrincipal.vData_Banco := uFuncoesPadrao.vData_Banco;

    if Length(FieldByName('Campo_6').AsString) = 0 then
      vTipoCodigoBalanca := 0
    else
      vTipoCodigoBalanca := FieldByName('Campo_6').AsInteger;
    Close;
    // Sql.Text    := 'Select CONVERT(CHAR(10),GETDATE(),103) as data';
    // Open;
    // vdata_banco := FieldByName('data').AsString; // Pega a data do banco de dados (serviSalvaLogEventosdor).
    sql.Text := 'Select CONVERT(CHAR(10),GETDATE(),8) as data';
    open;
    vTime := FieldByName('data').AsString;
    // Pega a hora do banco de dados (servidor).
    SystemDateTime(strtodate(vData_Banco), StrToTime(vTime));
    Close;
    if Length(SubstituiTexto(lblMensagem.caption, ' ')) = 0 then
      lblMensagem.caption :=
        'Digite uma mensagem para os vendedores no SAEF.  Menu UTILITARIOS>GERENCIAIS>CONFIGURAÇÃO DO SISTEMA';
  end;
  { abaixo se nao for do grupo LITORAL eu oculto a referencia da prevenda }
  if (FrmPrincipalPreVenda.dsCGC <> '11334892000183') and
    (FrmPrincipalPreVenda.dsCGC <> '09540332000133') and
    (FrmPrincipalPreVenda.dsCGC <> '02751835000109') and
    (FrmPrincipalPreVenda.dsCGC <> '14223073000157') then
  begin
    edtReferencia.Visible := false;
    Label25.Visible := false;
    CbxNome.Left := edtReferencia.Left;
    CbxNome.width := CbxNome.width + edtReferencia.width + 9;
    Label29.Left := Label25.Left;
  end;

  if FrmPrincipalPreVenda.vConferencia = True then
    PopupMenu1.Items.Items[13].Enabled := false;
  listarUsuariosNaCombo;
  LiberaCopia;
  if UpperCase(vEmpresa) = 'MEGA' then
  // Mega móveis pediu para não permitir desmarcar o checkBox1. Protocolo 33228
    CheckBox1.Visible := false;
  if (UpperCase(vEmpresa) = 'LIBEL') then
  begin
    liberaDigitacaoLancamento := True;
    EdtLancto.Enabled := True;
    EdtLancto.ReadOnly := false;
    EdtLancto.Color := clWindow;
  end;
  if (SoNumeros(dsCGC) = '03643774000129') then
  // esse cliente Torrone quer q a data fique aberta
    DtLancto.Enabled := True;
  if UpperCase(vEmpresa) = 'MOTOPECAS_OLD' then
  begin
    edtTotalIPI.Visible := True;
    Label24.Visible := True;
  end;
  vFlag := '';

  if vAtacarejo = false then
  begin
    DBGrid1.Columns[IndexOfDbGrid(DBGrid1, 'nrQtdAtacarejo')].Visible := false;
    DBGrid1.Columns[IndexOfDbGrid(DBGrid1, 'vlAtacado')].Visible := false;
  end;

  Label14.Visible := false;
  Label15.Visible := false;
  Shape2.Visible := false;
  Shape3.Visible := false;
  if UpperCase(vEmpresa) = 'PROAUTO' then
  begin
    RgOpcoes.Items.Add('Ctrl+T Transf');
  end
  else
  begin
    ransferncia1.Visible := false;
    ConsultarCrdito1.Visible := false;
  end;
  if (UpperCase(vEmpresa) = 'JNUNES')  then
  begin
    chkbxBaixarEstoque.Visible := True;
    chkbxOrcamentoExterno.Visible := True;
  end;
//  if  (dsCGC = '32879272000108') or (dsCGC = '32879272000361') then
//  begin
//    chkbxBaixarEstoque.Visible := True;
//    chkbxBaixarEstoque.Checked := False;
//  end;
  if UpperCase(vEmpresa) = 'ODONTO' then
  begin
    Label14.caption := 'V.Desconto';
    Label14.Visible := True;
    Label15.Visible := True;
    Shape2.Visible := True;
    Shape3.Visible := True;
    Label16.Visible := false;
    Shape5.Visible := false;
    Shape6.Visible := false;
    LblReserva.Visible := false;
    Label12.Visible := false;
    Label13.Visible := false;
    Label11.Visible := false;
    Shape1.Visible := false;
    Shape4.Visible := false;
  end;
  if (UpperCase(vEmpresa) = 'REZENDE') or (UpperCase(vEmpresa) = 'BELAVISTA') or
    (UpperCase(vEmpresa) = 'PROAUTO') then
  begin
    CriarIniSQLDeposito;
    Label12.caption := 'DEPÓSITO';
    Label14.caption := 'DISPONÍVEL';
    Label16.caption := 'OFICINA';
    Label11.Visible := True;
    Shape1.Visible := True;
    Shape4.Visible := True;
    Label13.Visible := false;
    Label14.Visible := True;
    Label15.Visible := True;
    Shape2.Visible := True;
    Shape3.Visible := True;
  end;
  if (UpperCase(vEmpresa) = 'NACIONAL') OR (UpperCase(vEmpresa) = 'RURALPET')
  then
  begin
    CriarIniSQLDeposito;
    Label12.caption := 'DEPÓSITO';
    Label14.caption := 'LOJA';
    Label16.caption := 'OFICINA';
    Label11.Visible := True;
    Shape1.Visible := True;
    Shape4.Visible := True;
    Label13.Visible := false;
    Label14.Visible := True;
    Label15.Visible := True;
    Shape2.Visible := True;
    Shape3.Visible := True;
    Relatriodecontagem1.Visible := True;
    // exibe a opção de relatorio de contagem de estoque
  end;
  // if (UpperCase(vEmpresa) = 'AUTOCAR') or (UpperCase(vEmpresa) = 'REIDOFIAT') or
  // (UpperCase(vEmpresa) = 'TOPLINE') or (UpperCase(vEmpresa) = 'TREVO') or
  // (UpperCase(vEmpresa) = 'MECATTRON') or (UpperCase(vEmpresa) = 'LAMARAO')
  // then
  if TNEGLoja.getExibirQuantidadesReservadasPreVenda then
  begin
    Label14.caption := 'PRÉ-VENDA';
    Label14.Visible := True;
    Shape3.Visible := True;
    Label15.Visible := True;
    Label15.Hint :=
      'Quantidades do item selecionado que estão em outras pré-vendas';
    LblReserva.Hint :=
      'Quantidades do item selecionado que estão em Ordens de Serviço';
    Shape2.Visible := True;
    Label16.caption := 'RESERVA';
    if (UpperCase(vEmpresa) = 'PTINTAS_') then
    begin
      Shape1.height := Shape3.height;
      Label11.Top := Label13.Top;
      Label12.caption := 'DISPONÍVEL';
      Label13.Visible := false;
      Label11.Hint := 'Quantidade disponível';
      Label12.Hint := '';
    end
    else
    begin
      edtDisponivel.Visible := True;
      Shape7.Visible := True;
      Label17.Visible := True;
      Shape8.Visible := True;
    end;
  end;

  if (UpperCase(vEmpresa) = 'PTINTAS') then
  begin
    CriarIniSQLDeposito;
    Label16.caption := 'DEPÓSITO';
    LblReserva.Hint := 'Quantidades do item selecionado no estoque do depósito';
    // LblReserva.Visible    := True;
    // Label16.Visible    := True;
    // shape2.visible := True;
    // shape3.visible := True;
  end;
  Label11.Hint := 'Informações do pedido de compra do item selecionado';
  edtDisponivel.Hint :=
    'Quantidade do item selecionado baseada no estoque local subtraindo das reservas de pré-vendas';
  if (UpperCase(vEmpresa) = 'LLPARAFUSOS') or
    (UpperCase(vEmpresa) = 'BIJOUARTS') or
    (UpperCase(vEmpresa) = 'BIJOUARTSOS214') or
    (UpperCase(vEmpresa) = 'BIJOUARTSZEBRA') or
    (UpperCase(vEmpresa) = 'PIPELINE') or (UpperCase(vEmpresa) = 'LITORAL655')
  then
  begin
    Label14.Visible := false;
    Label15.Visible := false;
    Shape2.Visible := false;
    Shape3.Visible := false;
    Label16.Visible := false;
    Shape5.Visible := false;
    Shape6.Visible := false;
    LblReserva.Visible := false;
    Label12.Visible := false;
    Label13.Visible := false;
    Label11.Visible := false;
    Shape1.Visible := false;
    Shape4.Visible := false;
  end;

  if (Empresas_UmaEtiqueta_porColuna = True) or (UpperCase(vFlagEtiqueta) = 'IMA') or (UpperCase(vFlagEtiqueta) = 'ZANQUY') or
  (UpperCase(vFlagEtiqueta) = 'YZLU') or (UpperCase(vFlagEtiqueta) = 'YZLUCENTRO') or
  (UpperCase(vFlagEtiqueta) = 'ZANQUYSHOPPING') or (UpperCase(vFlagEtiqueta) = 'EQUILIBRIO') or
  (UpperCase(vFlagEtiqueta) = 'AQUARELA') or (UpperCase(vFlagEtiqueta) = 'DOFF') or
  (UpperCase(vFlagEtiqueta) = 'LORDKIDS') or (UpperCase(vFlagEtiqueta) = 'YZLUPEIXOTO') then
    chkbxEtiqueta.Visible := true;

  if (UpperCase(vEmpresa) = 'DISCABOS') or (UpperCase(vEmpresa) = 'SANTANA')
  then // LIBERA P ALTERAR A QUANTIDADE NO PRODUTO DIRETO NA GRID
    SgDados.Options := [goFixedVertLine, goFixedHorzLine, goRangeSelect,
      goEditing];
  if (UpperCase(vEmpresa) = 'BIJOUARTS') or
    (UpperCase(vEmpresa) = 'BIJOUARTSOS214')
  // or (UpperCase(vEmpresa) = 'LLPARAFUSOS') or
    or (UpperCase(vEmpresa) = 'BIJOUARTSZEBRA') or
    (UpperCase(vEmpresa) = 'PIPELINE') or (UpperCase(vEmpresa) = 'LITORAL655')
  then
  begin
    FrmPrincipalPreVenda.caption :=
      'Impressão de etiquetas             <<<  Support Informática  79  3214-5161  >>>';
    Label29.caption := 'Operador';
    Label2.Visible := false;
    Label3.Visible := false;
    Label4.Visible := false;
    EdtDesconto.Visible := false;
    EdtSubTotal.Visible := false;
    EdtTotal.Visible := false;
  end;
  { if (UpperCase(vEmpresa) = 'LLPARAFUSOS') then begin
    Label2.Visible      := false;
    EdtDesconto.Visible := false;
    BtnAprazo.Enabled   := false;
    BtnAprazo.Visible   := false;
    end; }

  if ( (UPPERCASE(vEmpresa) = 'MOTOBOX') or
     (UPPERCASE(vEmpresa) = 'MOTOPECAS') or
     (dsCGC = '13951392000388') or
     (dsCGC = '07067845000143') or
     (dsCGC = '32879272000108') or
     (dsCGC = '32879272000361') or
     (dsCGC = '03334531000109') or
     (dsCGC = '15555876000171') or
     (dsCGC = '07328830000191') or
     (dsCGC = '11594965000176') ) then
  begin
    ADOSPConsultaDESCRIO.Size := 100;
    ADOSPConsultaDESCRIO.DisplayWidth := 100;
  end;
  if vSelecionaCFOP = 'S' then
  begin
    EdtCFOP.Visible := True;
    Label21.Visible := True;
  end
  else
  begin
    EdtCFOP.Visible := false;
    Label21.Visible := false;
    EdtConsulta.width := EdtConsulta.width + EdtCFOP.width; // 197
  end;
  if vMudaPreco = 'S' then
  begin
    EdtPreco.Color := clWindow;
    EdtPreco.Enabled := True;
    EdtPreco.ReadOnly := false;
    EdtDescUnit.Color := clWindow;
    EdtDescUnit.Enabled := True;
    EdtDescUnit.ReadOnly := false;
  end;
  CmbConsulta.Items := RadioGroup1.Items;
  { With CmbConsulta do begin // adiciona itens a combo de consulta
    Items.Add('Código');
    Items.Add('Descrição');
    Items.Add('Código de Barras');
    Items.Add('Referência');
    Items.Add('Grupo');
    Items.Add('Descrição Contendo');
    ItemIndex := 1;
    end; }
  With SgDados do
  begin
    Cells[0, 0] := 'Código';
    Cells[1, 0] := 'Descrição';
    Cells[2, 0] := 'Quantidade';
    Cells[3, 0] := 'P.Venda';
    Cells[4, 0] := 'Total';
    Cells[5, 0] := 'Prateleira';
    Cells[6, 0] := 'Cód. Barras';
    Cells[7, 0] := 'Referência';
    Cells[8, 0] := 'Estoque';
    Cells[9, 0] := 'Valor';
    Cells[10,0] := 'Und';
    Cells[11,0] := 'CFOP';
    if (UpperCase(vEmpresa) = 'GAMA') or (UpperCase(vEmpresa) = 'JETLASER') or (UpperCase(vEmpresa) = 'ANADRI') then
      Cells[12, 0] := 'Fator de Conversão'
    else
      ColWidths[12] := -1;
    if usarLoteValidade = True then
    begin
      Cells[13, 0] := 'Lote';
      Cells[16, 0] := 'Fab Lote';
    end
    else
    begin
      ColWidths[13] := -1;
      ColWidths[16] := -1;
    end;
    ColWidths[14] := -1; // cdAmbiente
    if (UpperCase(vEmpresa) = 'AMBIENTE') then
    begin
      Cells[15, 0] := 'Ambiente';
      MiCadastroAmbientes.Visible := True;
    end
    else
      ColWidths[15] := -1;
    if (UpperCase(vEmpresa) = 'COPYART') then
      Cells[16, 0] := 'Tipo Forro'
    else
      ColWidths[16] := -1;

    Cells[17, 0] := 'ProdutoEmPromocao';
    ColWidths[17] := -1;
    if (UpperCase(vEmpresa) = 'MOTOBOX') then
    begin
      ColCount := ColCount + 1;
      Cells[18, 0] := 'Grupo';
      ColWidths[18] := 150;
    end;
  end;
  // if (UpperCase(vEmpresa) = 'GAMA') then
  // SgDados.ColCount := 12
  // else
  // SgDados.ColCount := 12;
  Monta_Combo;
  if vCasasPreco > vLimiteCasasPreco then
    EdtDesconto.Text := '0,00000'
  else
    EdtDesconto.Text := '0,00';
  EdtDesconto.ReadOnly := True;
  EdtSubTotal.ReadOnly := True;
  Application.OnMessage := ProcessaMsg;
  UltimoLancamento;
  vAtacadoVarejo := 'V'; // já começa recebendo o valor de varejo
  cdTabelaPreco := 0;
  vDescontoCliente := 0;
  // EdtCdCliente.Text := '1';
  // CbxCliente.Text   := '  Venda a Consumidor';
  if (UpperCase(vEmpresa) = 'AMBIENTAR') then
    RgOpcoes.Items.Add('F4 NF-e');
  RodaScripts;
  // RodaScripts1;
  persistirUltimoEstadoForm;
  AtualizaQryConsulta;
  vOpcoes := '0';
  vlTotalAnterior := 0;
  liberouVenda := false;
  possuiPermissaoVenderAbaixoDoCusto := False;
  listaProdutosAcrescimo := TList<Integer>.Create;
  nomePc := pubNomeComputador;
  if ((nomePc <> 'DESENV01') and (nomePc <> 'DESENV02') and
    (nomePc <> 'DESENV03') and (nomePc <> 'NOTEANDRE') and (nomePc <> 'ADM01')
    and (nomePc <> 'DESENV04')) then
  begin // and (nomePC <> 'DESENV04')
    // ThreadConexao3 := Tconexao3.Create(true);
    // ThreadConexao.FreeOnTerminate := true;
    // ThreadConexao3.Resume;
  end;

  { if  screen.width = 1360  then // Testa se for 1360 essa resolução é usada para monitor wide screen
    AjustaForm
    else begin
    scaled := true;
    if (screen.width <> ScreenWidth) then begin
    height := longint(height) * longint(screen.height) DIV ScreenHeight;
    width := longint(width) * longint(screen.width) DIV ScreenWidth;
    scaleBy(screen.width, ScreenWidth);
    //scaleBy(800, 600);
    end;
    end; }
  if (UpperCase(vEmpresa) = 'AMBIENTE') then
  begin
    MontaComboAmbiente;
    CbxAmbiente.Visible := True;
    LblAmbiente.Visible := True;
  end;
  if usarLoteValidade = True then
  begin
    CbLote.Visible := True;
    Label23.Visible := True;
    Label22.Visible := True;
  end
  else if (UpperCase(vEmpresa) <> 'AMBIENTE') then
  begin
    Label1.Left := Label1.Left - 190;
    Label5.Left := Label5.Left - 190;
    Label6.Left := Label6.Left - 190;
    EdtQtd.Left := EdtQtd.Left - 190;
    EdtDescUnit.Left := EdtDescUnit.Left - 190;
    EdtPreco.Left := EdtPreco.Left - 190;
  end;
  if (UpperCase(vEmpresa) = 'DELUC') then
  begin
    CbPrevisao.Visible := false;
    EdtQtd.ReadOnly := True;
    EdtQtd.Text := '1,00';
  end;
  self.caption := self.caption + '  Compilação ' + GetVersaoArq;
  CbxCliente.ItemIndex := 0;
  CbxClienteChange(self);
  // if UPPERCASE(vEmpresa) = '' then begin
  // end;
  // self.Caption :=  Self.Caption + '  Data da última atualização: ' + DateTimeToStr(PegaDataDoExecutavel(ExtractFileName(Application.ExeName)))+ '  Compilação ' + GetVersaoArq;
end;

procedure TFrmPrincipalPreVenda.FormShow(Sender: TObject);
begin
  { Oculta a opcao de Orcamento das opções }
  if OcultarOrcamentoNaPreVenda then
  begin
    RgOpcoes.Controls[2].Visible := false;
    Oramento1.Enabled := false;
    Oramento1.Visible := false;
  end;
  if (UpperCase(vEmpresa) = 'CHALOC') then
  begin

    // TMenuItem(PopupMenu1.Items.Items[1].Items[2]).Enabled := False;
    TMenuItem(PopupMenu1.Items.Items[0].Items[3]).Enabled := false;
    TMenuItem(PopupMenu1.Items.Items[0].Items[4]).Enabled := false;
    TMenuItem(PopupMenu1.Items.Items[0].Items[5]).Enabled := false;
    TMenuItem(PopupMenu1.Items.Items[0].Items[6]).Enabled := false;
    TMenuItem(PopupMenu1.Items.Items[0].Items[7]).Enabled := false;

    TMenuItem(PopupMenu1.Items.Items[1].Items[2]).Enabled := false;
    TMenuItem(PopupMenu1.Items.Items[1].Items[3]).Enabled := false;
    TMenuItem(PopupMenu1.Items.Items[1].Items[4]).Enabled := false;

    TRadioButton(RadioGroup1.Controls[1]).Enabled := false;
    TRadioButton(RadioGroup1.Controls[2]).Enabled := false;
    TRadioButton(RadioGroup1.Controls[3]).Enabled := false;

    TRadioButton(RadioGroup1.Controls[5]).Enabled := false;
    TRadioButton(RadioGroup1.Controls[6]).Enabled := false;
    TRadioButton(RadioGroup1.Controls[4]).Enabled := false;
    TRadioButton(RadioGroup1.Controls[0]).Enabled := false;

    if dsCGC = '01655446000206' then
    begin // FLAG CHALOC E CNPJ DA POLIANA
      TRadioButton(RadioGroup1.Controls[0]).Enabled := True;
      TMenuItem(PopupMenu1.Items.Items[1].Items[2]).Enabled := True;
    end
    else if dsCGC = '10237494000186' then
    begin // FLAG CHALOC E CNPJ DA POLIANA
      TRadioButton(RadioGroup1.Controls[0]).Enabled := True;
      TMenuItem(PopupMenu1.Items.Items[1].Items[2]).Enabled := True;
      RadioGroup1.ItemIndex := 0;
    end
    else if dsCGC = '01655446000117' then
    begin // IPANEMA
      TRadioButton(RadioGroup1.Controls[0]).Enabled := True;
      TMenuItem(PopupMenu1.Items.Items[1].Items[2]).Enabled := True;
      RadioGroup1.ItemIndex := 0;
    end
    else if dsCGC = '01655446000389' then
    begin // IPANEMA
      TRadioButton(RadioGroup1.Controls[0]).Enabled := True;
      TMenuItem(PopupMenu1.Items.Items[1].Items[2]).Enabled := True;
      RadioGroup1.ItemIndex := 0;
    end
    else
    begin
      TRadioButton(RadioGroup1.Controls[4]).Enabled := True;
      TMenuItem(PopupMenu1.Items.Items[0].Items[6]).Enabled := True;
      RadioGroup1.ItemIndex := 4;
      if dsCGC = '01956284000157' then
      begin
        TRadioButton(RadioGroup1.Controls[0]).Enabled := True;
        TMenuItem(PopupMenu1.Items.Items[1].Items[2]).Enabled := True;
        TRadioButton(RadioGroup1.Controls[6]).Enabled := True;
        TMenuItem(PopupMenu1.Items.Items[1].Items[3]).Enabled := True;
        RadioGroup1.ItemIndex := 0;
      end
      else if dsCGC = '30329936000121' then
      begin
        TRadioButton(RadioGroup1.Controls[0]).Enabled := True;
        TMenuItem(PopupMenu1.Items.Items[1].Items[2]).Enabled := True;
        TRadioButton(RadioGroup1.Controls[4]).Enabled := false;
        TMenuItem(PopupMenu1.Items.Items[0].Items[6]).Enabled := false;
        // TRadioButton(RadioGroup1.Controls[6]).Enabled := True;
        // TMenuItem(PopupMenu1.Items.Items[1].Items[3]).Enabled := True;
        RadioGroup1.ItemIndex := 0;
      end;
    end;
  end;
  // if (UpperCase(vEmpresa) = 'AQUARIUM') then
  // begin
  // RgOpcoes.Controls[2].Visible:= False;
  // Oramento1.Enabled:= False;
  // Oramento1.Visible:= False;
  // end;
end;

procedure TFrmPrincipalPreVenda.FiltraConsulta;
var
  texto : string;
begin
  try
    ADOSPConsulta.Filtered := False;
    if EdtConsulta.Text <> '' then begin
      texto := StringReplace(EdtConsulta.Text,'%','*',[]);
      case RadioGroup1.ItemIndex of
        0 : ADOSPConsulta.Filter := 'CÓDIGO LIKE '+QuotedStr(texto+'%');
        1 : ADOSPConsulta.Filter := 'DESCRIÇÃO LIKE '+QuotedStr(texto+'%');
        2 : ADOSPConsulta.Filter := 'REFERÊNCIA LIKE '+QuotedStr(texto+'%');
        3 : ADOSPConsulta.Filter := 'CDCODIGODIC LIKE '+QuotedStr(texto+'%');
        4 : ADOSPConsulta.Filter := 'CÓDIGO_BARRAS LIKE '+QuotedStr(texto+'%');
      end;
      ADOSPConsulta.Filtered := True;
    end;
    AjustarAposConsultaProduto;
  except

  end;
end;

procedure TFrmPrincipalPreVenda.FormActivate(Sender: TObject);
begin
  Application.OnMessage := ProcessaMsg;
  if (Ativa = 'N') or (vFlag <> '') then
    exit;
  if (Ativa = 'T') then
  begin // thiago fiz isso p evtar o bug do asterisco no campo de escolher prevenda
    Ativa := #0;
    exit;
  end;
  // if (RgOpcoes.ItemIndex in [0,2,4]) or ((transformarOrcamentoPrevenda = true) and (RgOpcoes.ItemIndex = 1)) then
  // cbxUsuario.SetFocus
  // else
  // edtLancto.SetFocus;
  DtLancto.Date := Date;
  if UpperCase(vEmpresa) <> 'TREVO' then
  begin
    if UpperCase(vEmpresa) = 'SANTANA' then
      RgOpcoes.ItemIndex := 2
    else
      RgOpcoes.ItemIndex := 0;
  end;
end;

function TFrmPrincipalPreVenda.Formatar13Digitos(codigo: string): string;
begin
  while Length(codigo) < 13 do
    codigo := 'X' + codigo;
  result := codigo;
end;

procedure TFrmPrincipalPreVenda.UltimoLancamento;
begin
  // if prevenda <> nil then begin
  // prevenda.Destroy;
  // prevenda:= nil;
  // end;
  // prevenda:= TPrevenda.Create();
  With ADOQryUltimo do
  begin
    // Sql.Text := 'Select DISTINCT (nrPedidos + 1) as Lancto From Sequencial Where cdCodigo = 1';
    sql.Text :=
      'Select (nrPedidos + 1) as Lancto From Sequencial Where cdCodigo = 1';
    open;
    EdtLancto.Text := FormatFloat('000000', FieldByName('Lancto').AsInteger);
    EdtLancto.Refresh;
    EdtOperador.Text := cdOperador;
    Close;
  end;
end;

function TFrmPrincipalPreVenda.UltimoLancamentoBloqueandoTabela
  (qry: TADOQuery): string;
var
  nrLancamento: string;
begin
  if qry = nil then
  begin
    With ADOQryUltimo do
    begin
      sql.Text :=
        'Select (nrPedidos + 1) as Lancto From Sequencial With(UPDLOCK) Where cdCodigo = 1';
      // (Holdlock, Updlock)
      open;
      nrLancamento := FormatFloat('000000', FieldByName('Lancto').AsInteger);
      Close;
    end;
  end
  else
  begin
    With qry do
    begin
      sql.Text :=
        'Select (nrPedidos + 1) as Lancto From Sequencial With(UPDLOCK) Where cdCodigo = 1';
      // (Holdlock, Updlock)
      open;
      nrLancamento := FormatFloat('000000', FieldByName('Lancto').AsInteger);
    end;
  end;
  EdtLancto.Text := nrLancamento;
  EdtLancto.Refresh;
  EdtOperador.Text := cdOperador;
  Application.ProcessMessages;
  result := nrLancamento;
end;

function TFrmPrincipalPreVenda.ValidarNumeroLancamento_LIBEL: Boolean;
begin
  result := True;
  if UpperCase(vEmpresa) = 'LIBEL' then
  begin
    if (trim(EdtLancto.Text) <> '') and (RgOpcoes.ItemIndex <> 1) then
    begin
      if Existe_Numero_Orcamento(EdtLancto.Text) then
      begin
        Application.MessageBox('Já existe um lançamento com esse número!',
          'Atenção', mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
        BtnConfirmar.Enabled := True;
        Alteraquantidade1.Enabled := True;
        result := false;
      end;
    end;
  end;
end;

function TFrmPrincipalPreVenda.LoginValido: Boolean;
begin
  result := True;
  if EdtUsuario.Text = '' then
  begin
    Application.OnMessage := NaoProcessaMsg;
    MessageDlg('Informe o usuário e senha do vendedor!', mtWarning, [mbOK], 0);
    cbxUsuario.Setfocus;
    Application.OnMessage := ProcessaMsg;
    BtnConfirmar.Enabled := True;
    Alteraquantidade1.Enabled := True;
    result := false;
  end;
end;

procedure TFrmPrincipalPreVenda.Logoff1Click(Sender: TObject);
begin
  Solicitar_Login;
end;

procedure TFrmPrincipalPreVenda.LucronaVenda1Click(Sender: TObject);
begin
  if (PERMISSAO('856', 'V',true) = 'N') then exit;
  if StrToFloat(EdtSubTotal.Text) <= 0 then begin
    MessageDlg('Esta pré-venda não possui itens lançados.', mtWarning, [mbOK], 0);
    exit;
  end;
  frmLucroVenda := TfrmLucroVenda.Create(nil);
  frmLucroVenda.ShowModal;
end;

function TFrmPrincipalPreVenda.validarQuantidadeItemFracionado
  (unidade: string): Boolean;
begin
  try
    with DModulo.ADOQuery1 do
    begin
      sql.Text :=
        'Select fracionado From UNIDADE WITH (NOLOCK) Where dsUnidade = :UNIDADE';
      Parameters.ParamByName('UNIDADE').Value := unidade;
      open;
      if DModulo.ADOQuery1.RecordCount > 0 then
      begin
        if DModulo.ADOQuery1.FieldByName('fracionado').AsBoolean then
          result := false
        else
          result := True;
      end;
    end;
  except
    result := True; // no caso de erro liberar a quantidade digitada
  end;
end;

procedure TFrmPrincipalPreVenda.AtualizaCombProduto;
begin
  With ADOQryProduto do
  begin // mota a combo dos nomes dos produtos
    sql.Text :=
      'Select P.nmProduto,P.cdProduto,P.cdFabricante,P.dsReferencia,P.vlPreco,P.nrQtdReal,'
      + 'P.dsUnidade, W.nmPessoa, P.dsTIPO_ITEM From Produto P WITH (NOLOCK) Inner Join Pessoa '
      + 'W WITH (NOLOCK) ON P.cdPessoa_1 = W.cdPessoa Order By P.nmProduto      ';
    open;
  end;
  if (UpperCase(vEmpresa) <> 'DELUC') then
    EdtQtd.Text := '0,000';
  EdtPreco.Text := FormatFloatQ(vCasasPreco, 0.0);
  EdtDescUnit.Text := '0,00';
  setLabel23(0);
  CbLote.ItemIndex := -1;
end;

Procedure TFrmPrincipalPreVenda.EdtQtdExit(Sender: TObject);
begin
  try
    // if (UPPERCASE(vEmpresa)='TREVO') and (StrToFloatDef(EdtQtd.Text,0) > 0) and (edtLogin.Text = '') then
    // Solicitar_Login(true);
    EdtQtd.Text := FormatFloatQ(vCasasQtd, StrToFloatDef(EdtQtd.Text, 0));
    if (UpperCase(vEmpresa) = 'GAMA') and (trim(EdtCFOP.Text) = '') and EdtCFOP.Visible then
    begin
      Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
      ShowMessage('O campo CFOP é obrigatório!');
      EdtCFOP.SelectAll;
      EdtCFOP.Setfocus;
      Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
      exit;
    end;
    // na mega moveis e na bela vista, eles não querem q os vendedores vendam "Meio" produto, ou 0,5 sofá. kenneth
    if ((UpperCase(vEmpresa) = 'MEGA') or (UpperCase(vEmpresa) = 'BELAVISTA'))
    then
    begin
      if Frac(StrToFloat(EdtQtd.Text)) > 0 then
      begin
        Application.OnMessage := NaoProcessaMsg;
        MessageDlg('Digite um valor Inteiro!', mtWarning, [mbOK], 0);
        Application.OnMessage := ProcessaMsg;
        EdtQtd.Setfocus;
        exit;
      end;
    end;
    if (Length(EdtQtd.Text) < 1) or (StrToFloat(EdtQtd.Text) <= 0) or
      (ADOSPConsulta.RecordCount = 0) then
    begin
      // LimparPesquisa;
      exit;
    end
    else
    begin
      EdtPreco.Text := FormatFloatQ(vCasasPreco, getValorVendaProduto);
      // É obrigatório escolher o cliente antes de lançar produtos
      if (CbxCliente.ItemIndex < 0) then
      // and (UPPERCASE(vEmpresa) <> 'CAMARATUBA')
      begin
        Application.MessageBox('Informe o cliente', 'Atenção',
          mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
        LimparPesquisa;
        CbxCliente.Setfocus;
        exit;
      end
      else if not EdtPreco.Enabled then
      // caso o usuario não possa alterar o preço dos produtos, lança na grid agora
        EnviaProdutos;
    end;
  except
    //
  end;
end;

Procedure TFrmPrincipalPreVenda.LimparPesquisa;
begin
  EdtConsulta.Setfocus;
  EdtConsulta.Clear;
  if (UpperCase(vEmpresa) <> 'DELUC') then
    EdtQtd.Text := '0,000';
  EdtPreco.Text := FormatFloatQ(vCasasPreco, 0.0);
  EdtDescUnit.Text := '0,00';
  setLabel23(0);
  CbLote.ItemIndex := -1;
  if usarLoteValidade = True then
  begin
    CbLote.ItemIndex := -1;
    CbLote.Enabled := false;
  end;
end;

Procedure TFrmPrincipalPreVenda.EnviaProdutos;
var
  tipoCompos : TTipoComposicaoProduto;
  qtdDisponivel : Real;
  precoTotal : Currency;
  textoConsultaTemp : String;
begin
  precoTotal := StrToCurrDef(FormatFloatQ(vCasasQtd, StrToFloatDef(EdtQtd.Text, 0)), 0) * StrToFloatDef(FormatFloatQ(vCasasPreco, StrToFloatDef(EdtPreco.Text, 0)), 0);
  if precoTotal < 0.01 then
  begin
    Application.MessageBox(Pchar('Quantidade multiplicada pelo preço de venda é menor que 0,01 (um centavo).'),
      'Atenção', mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
    Application.OnMessage := ProcessaMsg;
    EdtQtd.SelectAll;
    EdtQtd.Setfocus;
    exit;
  end;
  if (DisponivelNoEstoque(StrToFloatDef(EdtQtd.Text, 0),
    ADOSPConsulta.FieldByName('Código').AsInteger, false, tipoCompos,
    qtdDisponivel)) or (chkbxEtiqueta.Checked = True) then
  begin
    if Frac(StrToFloatDef(EdtQtd.Text, 1)) <> 0 then
    begin // a quantidade está fracionada, logo, termos que testar se o produto esta definido como fracionado
      if not validarQuantidadeItemFracionado
        (ADOSPConsulta.FieldByName('UNIDADE').AsString) then
      begin
        Application.OnMessage := NaoProcessaMsg;
        ShowMessage
          ('Incompatibilidade na quantidade digitada.  Este ítem não pode ser vendido fracionado!');
        Application.OnMessage := ProcessaMsg;
        EdtQtd.SelectAll;
        EdtQtd.Setfocus;
        exit;
      end;
    end;
    quantidade := StrToFloatDef(EdtQtd.Text, 0);
    if usarLoteValidade = True then
    begin
      LancaProdutosHospitalar;
      setLabel23(QuantidadeDispEmLotes(ADOSPConsulta.FieldByName('Código')
        .AsInteger));
    end
    else
      LancaProdutos(StrToFloatDef(EdtQtd.Text, 0));
    atualizaEditQtdItens;
    if (UpperCase(vEmpresa) <> 'DELUC') then
      EdtQtd.Text := '0,000';
    EdtPreco.Text := FormatFloatQ(vCasasPreco, 0.0);
    EdtDescUnit.Text := '0,00';
    CbLote.ItemIndex := -1;
    // EdtConsulta.Clear;
    if (RadioGroup1.ItemIndex = 4) and (Copy(EdtConsulta.Text, 1, 1) = '2') then // codigo barras balança
      edtconsulta.clear;
    EdtConsulta.Setfocus;
    vDescricaoGama := '';
    vUndGama := '';
    vFatorGama := 0;
    if ((UpperCase(vFlagEtiqueta) <> 'KARIB') and
      (UpperCase(vFlagEtiqueta) <> 'DONASANTA') and
      (UpperCase(vFlagEtiqueta) <> 'DIJU') and
      (UpperCase(vFlagEtiqueta) <> 'JOALHERIAFONTES') and
      ((UpperCase(vEmpresa) <> 'LLPARAFUSOS') and
      (UpperCase(vEmpresa) <> 'NACIONAL'))) and
      (chkbxEtiqueta.Checked = false) then  begin
        textoConsultaTemp := EdtConsulta.Text;
        EdtConsulta.Text := '';
        AtualizaQryConsulta;
        EdtConsulta.Text := textoConsultaTemp;
        EdtConsulta.SelectAll;
      end;
  end else
  begin
    Application.OnMessage := NaoProcessaMsg;
    // if tipoCompos <> composto then
    MessageDlg('Quantidade disponível no estoque --> ' + FormatFloat('0.00',
      qtdDisponivel) + ' ', mtWarning, [mbOK], 0);
    // else
    // MessageDlg('Quantidade disponível no estoque --> ' + FormatFloat('0.00', TNEGProduto.getEstoquePossivelProdutoComposto(ADOSPConsulta.FieldByName('Código').AsInteger)) + ' ', mtWarning,[mbOk],0);
    EdtConsulta.Setfocus;
    EdtConsulta.Clear;
    if (UpperCase(vEmpresa) <> 'DELUC') then
      EdtQtd.Text := '0,000';
    EdtDescUnit.Text := '0,00';
    setLabel23(0);
    CbLote.ItemIndex := -1;
    Application.OnMessage := ProcessaMsg;
  end;
end;

Procedure TFrmPrincipalPreVenda.LancaProdutosHospitalar;
var
  quantidade, qtdTotalLote, qtdLoteAtual, qtdLancada: Real;
  sequencialLote, cdProduto: Integer;
  lote, cdFabricanteLote: string;
begin
  quantidade := StrToFloatDef(EdtQtd.Text, 0);
  cdProduto := ADOSPConsulta.FieldByName('Código').AsInteger;
  if CbLote.Items.Count > 0 then // SE TIVER LOTE
  begin
    if CbLote.ItemIndex = -1 then
    // SE O USUÁRIO NÃO ESCOLHER UM LOTE, LANÇAMOS AUTOMATICAMENTE OS MAIS ANTIGOS
    begin
      qtdTotalLote := QuantidadeDispEmLotes(cdProduto);
      if quantidade > qtdTotalLote then
      // SE NÃO HOUVER QUANTIDADE SUFICIENTE CANCELO O LANÇAMENTO
      begin
        MessageDlg('Quantidade disponível em lotes: ' + FormatFloat('0.000',
          qtdTotalLote) + ' ', mtWarning, [mbOK], 0);
        EdtConsulta.Setfocus;
        EdtConsulta.Clear;
        EdtQtd.Text := '0,000';
        EdtDescUnit.Text := '0,00';
        setLabel23(0);
        CbLote.ItemIndex := -1;
        Application.OnMessage := ProcessaMsg;
      end
      else
      begin
        sequencialLote := 0;
        while quantidade > 0 do
        // DISTRIBUO A QUANTIDADE DO PRODUTO ENTRE OS LOTES QUE JÁ ESTÃO ORDENADOS PELA VALIDADE;
        begin
          lote := copy_campo(CbLote.Items[sequencialLote], '|', 1);
          cdFabricanteLote := copy_campo(CbLote.Items[sequencialLote], '|', 4);
          qtdLoteAtual := QuantidadeDispNoLote(lote, cdProduto,
            StrToInt(cdFabricanteLote));

          { Se a quantidade de produtos que resta para ser lançada for maior que a quantidade disponível no lote lanço apenas a quantidade disponível no lote. }
          if (quantidade > qtdLoteAtual) then
            qtdLancada := qtdLoteAtual
          else
            qtdLancada := quantidade;
          if qtdLancada > 0 then
          begin // Se a quantidade a ser lançada for maior que zero eu mando pra grid
            LancaProdutos(qtdLancada, lote, cdFabricanteLote);
            quantidade := quantidade - qtdLancada;
          end;
          sequencialLote := sequencialLote + 1;
        end;
      end;
    end
    else // SE O USUÁRIO ESCOLHER UM LOTE, VEJO SE TEM QUANTIDADE SUFICIENTE
    begin
      lote := copy_campo(CbLote.Items[CbLote.ItemIndex], '|', 1);
      cdFabricanteLote := copy_campo(CbLote.Items[CbLote.ItemIndex], '|', 4);
      qtdLoteAtual := QuantidadeDispNoLote(lote, cdProduto,
        StrToInt(cdFabricanteLote));
      if quantidade > qtdLoteAtual then
      // SE NÃO HOUVER QUANTIDADE SUFICIENTE CANCELO O LANÇAMENTO
      begin
        MessageDlg('Quantidade disponível no lote selecionado: ' +
          FormatFloat('0.000', qtdLoteAtual) + ' ', mtWarning, [mbOK], 0);
        EdtConsulta.Setfocus;
        EdtConsulta.Clear;
        EdtQtd.Text := '0,000';
        EdtDescUnit.Text := '0,00';
        setLabel23(0);
        CbLote.ItemIndex := -1;
        Application.OnMessage := ProcessaMsg;
      end
      else
        LancaProdutos(quantidade, lote, cdFabricanteLote);
    end;
  end
  else
    LancaProdutos(quantidade);
end;

procedure TFrmPrincipalPreVenda.lblLogoffClick(Sender: TObject);
begin
  Cancelar;
end;

Procedure TFrmPrincipalPreVenda.LancaProdutos(quantidade: Real;
  lote: string = ''; cdFabricanteLote: string = '');
var
  L, T: Integer;
  und: TUnidade;
  QtdLote: Real;
  itemPrevenda: TItemPrevenda;
  abaixoDoCustoFinal, produtoComAcrescimo: Boolean;
  produtoLancado: TDOMProduto;
  custoFinal : string;
  subtotal : currency;
  valorItemBruto : real;
begin
  // TESTA LIMITE DE ITENS
  if (StrToFloat(edtQtdItens.Text) >= 135) and
    ((UpperCase(vFlagEtiqueta) <> 'KARIB') and ((Empresas_UmaEtiqueta_porColuna = False)or(chkbxEtiqueta.Checked = false)) and (UpperCase(vFlagEtiqueta) <> 'DIJU') and (UpperCase(vFlagEtiqueta) <> 'DONASANTA')
     and (UpperCase(vFlagEtiqueta) <> 'JOALHERIAFONTES')) then
  begin
    Application.OnMessage := NaoProcessaMsg;
    MessageDlg('Esta pré-venda alcançou o limite máximo de 135 itens!',
      mtWarning, [mbOK], 0);
    Application.OnMessage := ProcessaMsg;
    EdtConsulta.Setfocus;
    exit;
  end;

  // TESTA SE QUANTIDADE ZERADA
  if quantidade <= 0 then
  begin
    EdtConsulta.Setfocus;
    exit;
  end;

  // TESTA SE PRODUTO INATIVO
  if ADOSPConsulta.FieldByName('dsAtivo').AsString <> 'S' then
  begin
    Application.OnMessage := NaoProcessaMsg;
    MessageDlg('Este produto está definido no cadastro como inativo!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    EdtConsulta.Clear;
    if (UpperCase(vEmpresa) <> 'DELUC') then
      EdtQtd.Text := '0,000';
    EdtDescUnit.Text := '0,00';
    setLabel23(0);
    CbLote.ItemIndex := -1;
    Application.OnMessage := ProcessaMsg;
    exit;
  end;
  if UpperCase(vFlagEtiqueta) = 'SABORESDAVILA' then
    CbxAmbiente.Text := InputBox('Digite a data de validade','Data de Validade','');
  if ((UpperCase(vEmpresa) = 'JNUNES') AND (ADOSPConsulta.FieldByName('Código').AsInteger = 20479)) or (UpperCase(vEmpresa) = 'GAMA') or
    (UpperCase(vEmpresa) = 'JETLASER') or (UpperCase(vEmpresa) = 'ANADRI') then
  begin
    FrmDescricao := TFrmDescricao.Create(FrmDescricao);
    FrmDescricao.EdtDescricao.Text := ADOSPConsulta.FieldByName
      ('DESCRIÇÃO').AsString;
    FrmDescricao.EdtUndCad.Text := ADOSPConsulta.FieldByName('UNIDADE')
      .AsString;
    FrmDescricao.EdtUnidade.Text := ADOSPConsulta.FieldByName
      ('UNIDADE').AsString;
    FrmDescricao.EdtQtd.Text := FormatFloat('0.00000',
      StrToFloatDef(EdtQtd.Text, 0));
    FrmDescricao.EdtQtdSai.Text := FormatFloat('0.00000',
      StrToFloatDef(EdtQtd.Text, 0));
    FrmDescricao.EdtFator.Text := '1,00000';
    if (UpperCase(vEmpresa) = 'PTINTAS') OR (UpperCase(vEmpresa) = 'JNUNES') then
    begin
      FrmDescricao.Panel2.Visible := false;
      FrmDescricao.height := 112;
      // FrmDescricao.AutoSize := True;
    end;
    FrmDescricao.ShowModal;
    FreeAndNil(FrmDescricao);
    if vDescricaoGama = '' then
      exit;
  end else if ((UpperCase(vEmpresa) = 'JNUNES') AND
    (ADOSPConsulta.FieldByName('Código').AsInteger <> 20479)) then
    FrmPrincipalPreVenda.vDescricaoGama := ADOSPConsulta.FieldByName
      ('DESCRIÇÃO').AsString;

  { TODO -oclaudioo -c : VALIDAR AS QTDS DISPONIVEIS NOS LOTES NA CONFIRMAÇÃO DA PREVENDA 07/05/2013 11:22:38 }
  if ADOSPConsulta.FieldByName('Preco').AsFloat > ADOSPConsulta.FieldByName
    ('Valor').AsFloat then
    vProdutoPromocao := 'S';

  if prevenda = nil then
    prevenda := TPrevenda.Create();

  if (Pode_Inserir_o_Mesmo_Produto = false) then
  begin
    for L := 0 to prevenda.itens.Count - 1 do
    begin
      if (prevenda.itens[L].cdProduto = ADOSPConsulta.FieldByName('Código')
        .AsInteger) and (not item_cancelado(L)) then
      begin
        if (usarLoteValidade = True) then
        // "hospitalar" permite lançar o produto mais de uma vez, por causa dos lotes
        begin
          Application.OnMessage := NaoProcessaMsg;
          MessageDlg('Aviso: Esse produto já está incluso nessa pré-venda!',
            mtInformation, [mbOK], 0);
          Application.OnMessage := ProcessaMsg;
          Break;
        end
        else
        begin
          Application.OnMessage := NaoProcessaMsg;
          MessageDlg('Esse produto já está incluso nessa pré-venda!', mtWarning,
            [mbOK], 0);
          if (UpperCase(vEmpresa) <> 'DELUC') then
            EdtQtd.Text := '0,00';
          EdtDescUnit.Text := '0,00';
          setLabel23(0);
          CbLote.ItemIndex := -1;
          EdtConsulta.Setfocus;
          Application.OnMessage := ProcessaMsg;
          exit;
        end;
      end;
    end;
  end;
  if (StrToFloat(EdtPreco.Text) <= 0) then
  begin
    EdtConsulta.Setfocus;
    EdtConsulta.Clear;
    if (UpperCase(vEmpresa) <> 'DELUC') then
      EdtQtd.Text := '0,000';
    EdtDescUnit.Text := '0,00';
    setLabel23(0);
    CbLote.ItemIndex := -1;
    exit;
  end;

  if chkbxEtiqueta.Checked = false then
  begin
    produtoLancado := TNEGProduto.buscarProduto(ADOSPConsulta.FieldByName('Código').AsInteger);
    if vDescontoClienteAuto then
    begin
      valorItemBruto := (StrToCurr(EdtPreco.Text)*100)/(100-(TNEGCliente.getDescontoPercentual(StrToIntDef(EdtCdCliente.Text, 0))));
      abaixoDoCustoFinal :=
        ((valorItemBruto < FloatToCurr(produtoLancado.nrCustoFinal_a)) and (vAtacadoVarejo = 'A')) OR
        ((valorItemBruto < FloatToCurr(produtoLancado.nrCustoFinal_v)) and (vAtacadoVarejo <> 'A'));
    end else
    begin
      abaixoDoCustoFinal :=
          ((StrToCurr(EdtPreco.Text) < FloatToCurr(produtoLancado.nrCustoFinal_a)) and (vAtacadoVarejo = 'A')) OR
          ((StrToCurr(EdtPreco.Text) < FloatToCurr(produtoLancado.nrCustoFinal_v)) and (vAtacadoVarejo <> 'A'));
    end;
    if vAtacadoVarejo = 'A' then
      custoFinal := FormatFloat('0.000', FloatToCurr(produtoLancado.nrCustoFinal_a))
    else
      custoFinal := FormatFloat('0.000', FloatToCurr(produtoLancado.nrCustoFinal_v));
    produtoComAcrescimo := ((StrToCurr(EdtPreco.Text) > FloatToCurr(produtoLancado.vlAtacado)) and (vAtacadoVarejo = 'A')) OR
        ((StrToCurr(EdtPreco.Text) > FloatToCurr(produtoLancado.vlPreco)) and (vAtacadoVarejo <> 'A'));
    produtoLancado.destruir;
  end;

//  if TNEGLoja.getBloquearVendaAbaixoDoCustoFinal then  // o q importa é a senha
//  begin
    if abaixoDoCustoFinal and (StrToCurr(FormatFloatQ(vCasasPreco, ADOSPConsultaPRECO.AsCurrency)) =
       StrToCurr(FormatFloatQ(vCasasPreco, ADOSPConsultaVALOR.AsCurrency))) then  // produto em promoção não é p analisar o preço de venda abaixo do preço de custo
    begin
      if (possuiPermissaoVenderAbaixoDoCusto = True) or FrmCancelamentoVenda.Possui_Permissao('631', 'V', cbxUsuario.Text, EdtUsuario.Text, False) then
      begin
        Application.MessageBox(Pchar('O custo final desse item é R$ '+ custoFinal), 'Venda abaixo do custo final', mb_Ok + MB_ICONINFORMATION + MB_APPLMODAL);
        possuiPermissaoVenderAbaixoDoCusto := True;
      end else
      begin
        try
          if FrmCancelamentoVenda <> nil then
            FreeAndNil(FrmCancelamentoVenda);
          FrmCancelamentoVenda := TFrmCancelamentoVenda.Create(self, '631', 'V', possuiPermissaoVenderAbaixoDoCusto);
          FrmCancelamentoVenda.Caption := 'Atenção: Venda abaixo do custo final';
          FrmCancelamentoVenda.Copyright.caption := ' O custo final desse item é R$ '+ custoFinal;
          FrmCancelamentoVenda.ShowModal;
          FreeAndNil(FrmCancelamentoVenda);
        except
          FreeAndNil(FrmCancelamentoVenda);
        end;
      end;
      if (not possuiPermissaoVenderAbaixoDoCusto) then
      begin
        if (UpperCase(vEmpresa) <> 'DELUC') then
          EdtQtd.Text := '0,00';
        EdtDescUnit.Text := '0,00';
        setLabel23(0);
        CbLote.ItemIndex := -1;
        EdtConsulta.Setfocus;
        Application.OnMessage := ProcessaMsg;
        exit;
      end else
        possuiPermissaoVenderAbaixoDoCusto := False;
    end;
//  end else if abaixoDoCustoFinal then
//  begin
//    Application.MessageBox(Pchar('O custo final desse item é R$ '+ custoFinal), 'Venda abaixo do custo final', mb_Ok + MB_ICONINFORMATION + MB_APPLMODAL);
//  end;
  if (trim(EdtDescUnit.Text) <> '') and (StrToFloat(EdtDescUnit.Text) > 0) and
    ((UpperCase(vEmpresa) <> 'BG') and (UpperCase(vEmpresa) <> 'KADU') and (UpperCase(vEmpresa) <> 'MOTOPECAS') and (UpperCase(vEmpresa) <> 'PROAUTO')) then
  begin
    // and (UPPERCASE(vEmpresa) <> 'LLPARAFUSOS') then
    BtnAprazo.Enabled := false;
    EdtDesconto.Text := '0,00000';
    EdtDesconto.ReadOnly := True;
  end;

  if (UpperCase(vFlagEtiqueta) = 'KARIB') or ((Empresas_UmaEtiqueta_porColuna = True)and(chkbxEtiqueta.Checked = True)) or (UpperCase(vFlagEtiqueta) = 'DIJU') or (UpperCase(vFlagEtiqueta) = 'DONASANTA') or (UpperCase(vFlagEtiqueta) = 'JOALHERIAFONTES') then
    T := 1
  else
    T := Round(quantidade);
  for L := T to Round(quantidade) do
  begin
    itemPrevenda := TItemPrevenda.Create(ADOSPConsulta.FieldByName('Código').AsInteger);

    if (UpperCase(vEmpresa) = 'JNUNES') or (UpperCase(vEmpresa) = 'GAMA') or
      (UpperCase(vEmpresa) = 'JETLASER') or (UpperCase(vEmpresa) = 'ANADRI')
    then
      itemPrevenda.descricao := vDescricaoGama;
    // não coloquei no "senão" porque a descrição original já vem na criação do objeto.

    if (UpperCase(vEmpresa) = 'GAMA') or (UpperCase(vEmpresa) = 'JETLASER') or (UpperCase(vEmpresa) = 'ANADRI') then
    begin
      und := TNEGUnidade.getUnidade(vUndGama);
      if und = nil then
      begin
        und := TUnidade.Create;
        und.unidade := vUndGama;
      end;
      itemPrevenda.unidade := und;
    end;

    if (UpperCase(vEmpresa) = 'GAMA') or (UpperCase(vEmpresa) = 'JETLASER') or (UpperCase(vEmpresa) = 'ANADRI') then
      itemPrevenda.fatorConversao := vFatorGama;

    if (usarLoteValidade = True) and ((lote <> '') and (cdFabricanteLote <> ''))
    then
    begin
      itemPrevenda.lote := lote;
      itemPrevenda.cdFabricanteLote := StrToInt(cdFabricanteLote);
    end;
    if (UpperCase(vFlagEtiqueta) = 'KARIB') or ((Empresas_UmaEtiqueta_porColuna = True)and(chkbxEtiqueta.Checked = true)) or (UpperCase(vFlagEtiqueta) = 'DIJU') or (UpperCase(vFlagEtiqueta) = 'DONASANTA') or (UpperCase(vFlagEtiqueta) = 'JOALHERIAFONTES') then
      itemPrevenda.quantidade := 1
    else
      itemPrevenda.quantidade := quantidade;

    itemPrevenda.precoVenda := StrToFloat(EdtPreco.Text);
    itemPrevenda.precoBruto := SimpleRoundTo(getValorVendaProduto, vCasasPreco * -1);
    // RoundTo(ADOSPConsultaVALOR.AsFloat,vCasasPreco*-1);
    subtotal := itemPrevenda.quantidade * itemPrevenda.precoVenda;
    itemPrevenda.SubTotal := SimpleRoundTo(subtotal, -2);
    itemPrevenda.tipoForro := tipoForro;
    if UpperCase(vFlagEtiqueta) = 'SABORESDAVILA' then
      itemprevenda.prateleira := CbxAmbiente.Text;
    itemPrevenda.codigoBarras := ADOSPConsulta.FieldByName
      ('CÓDIGO_BARRAS').AsString;
    if vSelecionaCFOP = 'S' then
      itemPrevenda.cfop := EdtCFOP.Text;
    if (((StrToFloat(FormatFloatQ(vCasasPreco, StrToFloat(EdtPreco.Text))) >
      StrToFloat(FormatFloatQ(vCasasPreco, getValorVendaProduto)))and(1=1)) //!(1 = 1) sera substituido por algum flag ou cnpj q queira exibir acrescimos
      // ADOSPConsulta.FieldByName('valor').AsFloat)))
      or (vOcultaDesconto = 'S')) or
      ((UpperCase(vEmpresa) = 'PROAUTO') or (UpperCase(vEmpresa) = 'BG') or (UpperCase(vEmpresa) = 'KADU') or (UpperCase(vEmpresa) = 'MOTOPECAS')) then
    // nao mostrar desconto na venda
    begin
      // Se houver aumento no preço, esse será o novo preço bruto (claudio 18-09-2015)
      itemPrevenda.vlPreco := StrToFloat(EdtPreco.Text);
      itemPrevenda.vlAtacado := StrToFloat(EdtPreco.Text);
      itemPrevenda.precoBruto := StrToFloat(EdtPreco.Text);
    end else
    begin
      itemPrevenda.vlPreco := StrToFloat(EdtPreco.Text);
      // ADOSPConsulta.FieldByName('valor').AsFloat;
      itemPrevenda.vlAtacado := ADOSPConsulta.FieldByName('valor').AsFloat;
    end;
    if (UpperCase(vEmpresa) = 'AMBIENTE') then
      itemPrevenda.ambiente := TNEGAmbiente.getAmbiente(StrToIntDef(EdtCdAmbiente.Text, -1));

    if (UpperCase(vEmpresa) <> 'BG') and (UpperCase(vEmpresa) <> 'KADU') and (UpperCase(vEmpresa) <> 'MOTOPECAS') and (UpperCase(vEmpresa) <> 'PROAUTO') then
    begin
      if ((StrToFloat(FormatFloatQ(vCasasPreco, ADOSPConsultaPRECO.AsFloat)) >
        StrToFloat(FormatFloatQ(vCasasPreco, ADOSPConsultaVALOR.AsFloat))) or
        (StrToFloat(FormatFloatQ(vCasasPreco, getValorVendaProduto)) >
        StrToFloat(FormatFloatQ(vCasasPreco, StrToFloat(EdtPreco.Text))))) then
      begin
        itemPrevenda.Promocao_desconto_Item := True;
        if StrToFloat(FormatFloatQ(vCasasPreco, ADOSPConsultaPRECO.AsFloat)) <>
          StrToFloat(FormatFloatQ(vCasasPreco, ADOSPConsultaVALOR.AsFloat)) then
          itemPrevenda.itemPromocao := True;
      end else
      begin
        itemPrevenda.Promocao_desconto_Item := false;
        itemPrevenda.itemPromocao := false;
      end;
    end;

    // INDICO NO ARRAY SE ESSA LINHA FICARÁ DESTACADA OU NÃO
    if (vDestacarItensOcupados) and
      ((RgOpcoes.ItemIndex = 0) or ((transformarOrcamentoPrevenda = True) and
      (RgOpcoes.ItemIndex = 1))) then
      if (vEstqNegativo <> 'S') and
        (((qtdInsuficienteParaPrevend(itemPrevenda.cdProduto,
        itemPrevenda.quantidade) > 0) and (itemPrevenda.tipoComposicao <>
        composto)) or ((itemPrevenda.tipoComposicao = composto) and
        (TNEGProduto.getEstoquePossivelProdutoComposto(itemPrevenda.cdProduto,
        1) <= 0))) then
        itemPrevenda.itemLinhaDestacada := True
      else
        itemPrevenda.itemLinhaDestacada := false;

    prevenda.itens.Add(itemPrevenda);
    if produtoComAcrescimo then
    begin
      if listaProdutosAcrescimo = nil then
        listaProdutosAcrescimo := TList<Integer>.Create;
      listaProdutosAcrescimo.Add(itemPrevenda.cdProduto);
    end;
    // CarregarItensGrid(prevenda);

    if (UpperCase(vFlagEtiqueta) <> 'KARIB') and ((Empresas_UmaEtiqueta_porColuna = False)or(chkbxEtiqueta.Checked = false)) and (UpperCase(vFlagEtiqueta) <> 'DIJU') and (UpperCase(vFlagEtiqueta) <> 'DONASANTA') and (UpperCase(vFlagEtiqueta) <> 'JOALHERIAFONTES') then
    begin
      CarregarItensGrid(prevenda);
      EdtConsulta.Setfocus;
      exit; // EVITA REPETIR O ITENS NA GRID SE NAO FOR KARIB
    end;
  end;

  if (UpperCase(vFlagEtiqueta) = 'KARIB') or ((Empresas_UmaEtiqueta_porColuna = True)and(chkbxEtiqueta.Checked = true)) or (UpperCase(vFlagEtiqueta) = 'DIJU') or (UpperCase(vFlagEtiqueta) = 'DONASANTA') or (UpperCase(vFlagEtiqueta) = 'JOALHERIAFONTES') then
    CarregarItensGrid(prevenda);
end;

// Procedure TFrmPrincipalPreVenda.EnviaProdutosHospitalar;
// var
// quantidade, qtdTotalLote, qtdLoteAtual, qtdLancada: real;
// sequencialLote, cdproduto: integer;
// lote: string;
// begin
// quantidade:= strToFloatDef(EdtQtd.Text,0);
// qtdTotalLote:= strToFloatDef(copy_campo(Label23.Caption,':',2),0);
// if quantidade > qtdTotalLote then
// begin
// MessageDlg('Quantidade disponível em lotes --> ' + formatFloat('0.000',qtdTotalLote) + ' ',mtWarning,[mbOk],0);
// EdtConsulta.SetFocus;
// EdtConsulta.Clear;
// EdtQtd.Text           := '0,000';
// EdtDescUnit.Text      := '0,00';
// setLabel23(0);
// CbLote.ItemIndex := -1;
// Application.OnMessage := ProcessaMsg;
// exit;
// end;
// sequencialLote:= 0;
// while quantidade > 0 do // DISTRIBUO A QUANTIDADE DO PRODUTO ENTRE OS LOTES QUE JÁ ESTÃO ORDENADOS PELA VALIDADE;
// begin
// lote:= copy_campo(cbLote.Items[sequencialLote],'|',1);
// cdproduto:= ADOSPConsulta.FieldByName('Código').AsInteger;
// qtdLoteAtual:= QuantidadeDispNoLote(lote, cdproduto);
// if (quantidade > qtdLoteAtual) then  // SE A QUANTIDADE DE PRODUTOS QUE RESTA PARA SER LANÇADA FOR MAIOR QUE A QUANTIDADE DISPONÍVEL NO LOTE
// qtdLancada:= qtdLoteAtual        // EU LANÇO APENAS A QUANTIDADE DISPONÍVEL NO LOTE
// else
// qtdLancada:= quantidade;
// LancaProdutos(qtdLancada, lote);
// quantidade:= quantidade - qtdLancada;
// sequencialLote:= sequencialLote + 1;
// end;
// end;

procedure TFrmPrincipalPreVenda.ImprimeOrcamentoExterno
  (enviar_email: Boolean = false);
var
  vcdpessoa: String[01];
  vIdent: String;
  email: string;
  envioOK: Boolean;
begin
  // Imprime o Orçamento
  // vIdent := InputBox('Aos Cuidados de','Digite o nome da pessoa responsável pelo orçamento!', '');
  FrmRel_Orcamento_Novo := TFrmRel_Orcamento_Novo.Create(self);
  // Cria o formulário
  With FrmRel_Orcamento_Novo.ADOqryreldados do
  begin
    sql.Text :=
      'SELECT Config.dsPrazoOrcamento Validade, Config.nmEmpresa, Config.dsRazaoSocial ConfigNome, Config.dsCGC ConfigCNPJ, Config.dsLogradouro + '', '' + Config.dsNumero + '' - Bairro '' + Config.dsBairro ConfEndereco, '
      + '''CEP ''+Config.dsCEP + '' - '' + Config.dsCidade + '' - '' + Config.dsUf + '' - FONE '' + Config.dsTelefone  ConfigCEP, Config.dsEmail ConfigEmail, Config.dsInscricao ConfigIE, '
      + 'O.nrOrcamento, PE.nmPessoa Cliente, ' +
      'E.nmLogradouro + '', '' + E.nrNumero + '' - Bairro '' + E.dsBairro  + '' - CEP '' + E.dsCEP + '' - '' + E.dsCidade + '' - '' + E.dsUF AS Endereco , '
      + 'TEL.NMTELEFONE Telefone, ISNULL(pe.dsEmailNfe,pe.dsEmail) Email, O.dtEmissao Data, func.nmPessoa Responsavel, '
      + 'MO.dsMemo Observacao, I.cdProduto, I.dsServico, PROD.cdCodigoDIC, PROD.nmproduto, PROD.dsReferencia RefFab, I.nrQtd Qtd, I.vlPreco VlUnit, I.vlDesconto VlBruto, '
      + '(I.nrQtd * I.vlPreco) ItemTotal, COUNT(*) OVER (PARTITION BY O.nrOrcamento) NrTotalItens, SUM(I.nrQtd) OVER (PARTITION BY O.nrOrcamento) QtdTotalItens, '
      + 'CAST(SUM(I.nrQtd * I.vlDesconto) OVER (PARTITION BY O.nrOrcamento)AS DECIMAL(15,2)) SubTotal, '
      + 'CAST(SUM(I.nrQtd * I.vlDesconto) OVER (PARTITION BY O.nrOrcamento)AS DECIMAL(15,2)) - O.vlvalor AS Desconto, '
      + 'O.vlvalor Total ' + 'FROM Configuracao Config, ORCAMENTO O ' +
      'INNER JOIN PESSOA FUNC ' + 'ON FUNC.CDPESSOA = O.cdPessoa ' +
      'INNER JOIN IteOrcamento I ' + 'ON I.nrOrcamento = O.nrOrcamento ' +
      'INNER JOIN PRODUTO PROD ' + 'ON PROD.cdProduto = I.cdProduto ' +
      'INNER JOIN PESSOA PE ' + 'ON PE.CDPESSOA = O.CDCLIENTE ' +
      'INNER JOIN ENDERECO E ' + 'ON E.cdPessoa = PE.cdPessoa ' +
      'LEFT JOIN (SELECT MAX(nmTelefone) NMTELEFONE, cdPessoa FROM Telefone GROUP BY cdPessoa) TEL '
      + 'ON TEL.cdPessoa = PE.cdPessoa ' + 'LEFT JOIN MEMOORCAMENTO MO ' +
      'ON MO.nrOrcamento = O.nrOrcamento ' +
      'WHERE O.nrOrcamento = :NRORCAMENTO ' + 'ORDER BY I.cdIteLcto ';
    Parameters.ParamByName('NRORCAMENTO').Value := EdtLancto.Text;
    open;
  end;
  if (UpperCase(vEmpresa) = 'JNUNES') then begin
    FrmRel_Orcamento_Novo.QRExpr8.Expression := 'ADOqryreldados.cdCodigoDIC';
    FrmRel_Orcamento_Novo.QRExpr19.Expression := 'ADOqryreldados.nmEmpresa';
    FrmRel_Orcamento_Novo.QRExpr23.Visible := false;
    FrmRel_Orcamento_Novo.QRExpr24.Visible := false;
    FrmRel_Orcamento_Novo.QRExpr9.Visible := false;
    FrmRel_Orcamento_Novo.QRExpr26.Visible := false;
    FrmRel_Orcamento_Novo.QRExpr15.Visible := false;
    FrmRel_Orcamento_Novo.QRLabel34.Visible := false;
    FrmRel_Orcamento_Novo.QRLabel35.Visible := false;
    FrmRel_Orcamento_Novo.QRExpr16.Visible := false;
    FrmRel_Orcamento_Novo.QRShape12.Enabled := false;
    FrmRel_Orcamento_Novo.QRShape6.Enabled := false;
    FrmRel_Orcamento_Novo.QRLabel22.Visible := false;
    FrmRel_Orcamento_Novo.QRShape19.Enabled := false;
    FrmRel_Orcamento_Novo.QRShape18.Enabled := false;
    FrmRel_Orcamento_Novo.QRLabel3.Visible := false;
  end;
  if FrmRel_Orcamento_Novo.ADOqryreldados.FieldByName('Observacao').AsString <> ''
  then
    FrmRel_Orcamento_Novo.QRMemo1.Lines.Add
      (FrmRel_Orcamento_Novo.ADOqryreldados.FieldByName('Observacao').AsString)
  else
    FrmRel_Orcamento_Novo.QRMemo1.Lines.Add('(Nenhuma observação informada)');
  // FrmRel_Orcamento.RLImage1.Picture.LoadFromFile('Logo_Cupom.jpg');
  // FrmRelOrcamentos.QryCliente.Active := True;

  // FrmRel_Orcamento.quickrep1.ExportToFilter(TQRPDFDocumentFilter.Create(Pchar(ExtractFilePath(Application.ExeName)+ EdtLancto.Text+'.pdf')));
  FrmRel_Orcamento_Novo.qrlblPag.caption := formaPagamentoImp;
  FrmRel_Orcamento_Novo.QuickRep1.PreviewModal;
  if enviar_email = True then
  begin
    FrmRel_Orcamento_Novo.QuickRep1.ExportToFilter
      (TQRPDFDocumentFilter.Create(Pchar(ExtractFilePath(Application.ExeName) +
      EdtLancto.Text + '.pdf')));
    Repeat
      FrmFormaPag.pnlAguardaEnvioEmail.Visible := false;
      email := InputBox('Envio por e-mail',
        'Digite o e-mail do destinatário', '');
      if trim(email) <> '' then
      begin
        FrmFormaPag.pnlAguardaEnvioEmail.Visible := True;
        FrmFormaPag.pnlAguardaEnvioEmail.Refresh;
        envioOK := Envia_Email(vOrcamento,
          Pchar(ExtractFilePath(Application.ExeName) + EdtLancto.Text + '.pdf'),
          email, EdtLancto.Text);
        FrmFormaPag.pnlAguardaEnvioEmail.Visible := false;
      end
      else
        envioOK := True;
      if envioOK = false then
        if MessageDlg('Deseja tentar enviar o e-mail novamente?',
          mtConfirmation, [mbYes, mbNo], 0) = mrNo then
          envioOK := True;
    Until envioOK = True;
  end;
  DeleteFile(Pchar(ExtractFilePath(Application.ExeName) + EdtLancto.Text
    + '.pdf'));
  FrmRel_Orcamento_Novo.Free;
end;

function TFrmPrincipalPreVenda.DisponivelNoEstoque(quantidade: Real;
  cdProduto: Integer; alterandoQuantidadeNaGrid: Boolean;
  out tipoComposicao: TTipoComposicaoProduto;
  out estoqueDisponivel: Real): Boolean;
var
  vqtd: Real;
  L: Integer;
  resultado: Boolean;
  estoqueFisico, estoqueNecessario: Real;
  Produto: TDOMProduto;
begin
  resultado := True;
  if (vEstqNegativo <> 'S') or (UpperCase(vEmpresa) = 'ODONTO') then
  begin // não vende com estoque negativo
    Produto := TNEGProduto.buscarProduto(cdProduto);
    if Produto.dsTIPO_ITEM = '09' then begin
      result := resultado;
      exit; // servico
    end;
    vqtd := 0; // rotina para teste se a quantidade exede o estoque real
    for L := 1 to SgDados.RowCount - 1 do
    begin
      if (SgDados.Cells[0, L] = intToStr(cdProduto)) then
        vqtd := vqtd + StrToFloat(SgDados.Cells[2, L]);
    end;
    estoqueFisico := getNrQtdReal(DModulo.Conexao.ConnectionString, cdProduto);

    { nesse caso, a nova quantidade já está em [vqtd] }
    if alterandoQuantidadeNaGrid then
    begin
      estoqueNecessario := vqtd;
      estoqueDisponivel := estoqueFisico - (vqtd - quantidade);
    end
    else
    begin
      estoqueNecessario := quantidade + vqtd;
      estoqueDisponivel := estoqueFisico - vqtd;
    end;
    // produto:= TNEGProduto.buscarProduto(cdproduto);
    tipoComposicao := Produto.tipoComposicao;
    // claudio, quanddo for orçamento não importa o estoque
    if (RgOpcoes.ItemIndex <> 2) and (vOrcamento <> 'O') and
      (((estoqueFisico < estoqueNecessario) and (Produto.tipoComposicao <>
      composto)) or ((Produto.tipoComposicao = composto) and
      (TNEGProduto.getEstoquePossivelProdutoComposto(cdProduto) <
      estoqueNecessario))) then
    begin
      if Produto.tipoComposicao = composto then
      begin
        if alterandoQuantidadeNaGrid then
          estoqueDisponivel := TNEGProduto.getEstoquePossivelProdutoComposto
            (cdProduto) - (vqtd - quantidade)
        else
          estoqueDisponivel := TNEGProduto.getEstoquePossivelProdutoComposto
            (cdProduto) - vqtd;
      end;
      resultado := false;
      // exit;
    end
    else
      resultado := True;
  end;
  result := resultado;
end;

// Procedure TFrmPrincipalPreVenda.EnviaProdutos(quantidade:real; lote:string = '');
// var
// L,T,qtd : integer;
// QtdLote : real;
// begin
// if StrToFloat(edtQtdItens.text) >= 135 then begin
// Application.OnMessage := NaoProcessaMsg;
// MessageDlg('Esta pré-venda alcançou o limite máximo de 135 itens!',mtWarning,[mbOk],0);
// Application.OnMessage := ProcessaMsg;
// EdtConsulta.SetFocus;
// Exit;
// end;
// if StrToFloat(quantidade) <= 0 then begin
// EdtConsulta.SetFocus;
// Exit;
// end;
// if ADOSPConsulta.FieldByName('dsAtivo').AsString <> 'S' then begin
// Application.OnMessage := NaoProcessaMsg;
// MessageDlg('Este produto está definido no cadastro como inativo!',mtWarning,[mbOk],0);
// EdtConsulta.SetFocus;
// EdtConsulta.Clear;
// EdtQtd.Text           := '0,000';
// EdtDescUnit.Text      := '0,00';
// setLabel23(0);
// CbLote.ItemIndex := -1;
// Application.OnMessage := ProcessaMsg;
// exit;
// end;
// if (UpperCase(vEmpresa) = 'GAMA') then begin
// FrmDescricao := TFrmDescricao.create(FrmDescricao);
// FrmDescricao.EdtDescricao.Text := ADOSPConsulta.FieldByName('DESCRIÇÃO').AsString;
// FrmDescricao.EdtUndCad.Text := ADOSPConsulta.FieldByName('UNIDADE').AsString;
// FrmDescricao.EdtUnidade.Text := ADOSPConsulta.FieldByName('UNIDADE').AsString;
// FrmDescricao.EdtQtd.Text := FormatFloat('0.00000', StrToFloatDef(EdtQtd.Text,0));
// FrmDescricao.EdtQtdSai.Text := FormatFloat('0.00000', StrToFloatDef(EdtQtd.Text,0));
// FrmDescricao.EdtFator.Text := '1,00000';
// FrmDescricao.ShowModal;
// freeandNil(FrmDescricao);
// if vDescricaoGama = '' then
// Exit;
// end;
/// /  if (vAutoPecas = 'H') and (RgOpcoes.ItemIndex <> 2) then begin
/// /    if (CbLote.Items.Count>0) and (CbLote.ItemIndex=-1) then
/// /    begin
/// /       Application.OnMessage := FormPrincipal.NaoProcessaMsg;
/// /       ShowMessage('Por favor, selecione o lote do produto.');
/// /       CbLote.SetFocus;
/// /       Application.OnMessage := ProcessaMsg;
/// /       exit;
/// /    end
/// /    else
/// /      lote:= copy_campo(cblote.Text,'|',1);
/// /  end;
// // ESSA VALIDAÇÃO AGORA SERÁ FEITA NA HORA DE CONFIRMAR
// // VERIFICA QUANTIDADE DO PRODUTO NO LOTE
/// /  if (Trim(lote)<>'') and (RgOpcoes.ItemIndex <> 2) then begin
/// /    QtdLote:= QuantidadeDispNoLote(lote, ADOSPConsulta.FieldByName('Código').AsInteger);
/// /    if quantidade > QtdLote then
/// /    begin
/// /      Application.OnMessage := FormPrincipal.NaoProcessaMsg;
/// /      MessageDlg('Quantidade disponível no lote --> ' + formatFloat('0.000',QtdLote) + ' ',mtWarning,[mbOk],0)
/// /      EdtConsulta.SetFocus;
/// /      EdtConsulta.Clear;
/// /      EdtQtd.Text           := '0,000';
/// /      EdtDescUnit.Text      := '0,00';
/// /      setLabel23(0);
/// /      CbLote.ItemIndex := -1;
/// /      Application.OnMessage := ProcessaMsg;
/// /      exit;
/// /    end;
/// /  end;
// { TODO -oclaudioo -c : VALIDAR AS QTDS DISPONIVEIS NOS LOTES NA CONFIRMAÇÃO DA PREVENDA 07/05/2013 11:22:38 }
// if ADOSPConsulta.FieldByName('Preco').AsFloat > ADOSPConsulta.FieldByName('Valor').AsFloat then
// vProdutoPromocao := 'S';
// if (vAutoPecas <> 'H') then // "hospitalar" permite lançar o produto mais de uma vez, por causa dos lotes
// for L := 1 to SgDados.RowCount - 1 do begin
// if (SgDados.Cells[0,l] = ADOSPConsulta.FieldByName('Código').AsString)
// and (UpperCase(vEmpresa) <> 'DISCABOS')
// and (UpperCase(vEmpresa) <> 'FRANGOPRENSADO')
// and (not item_cancelado(L))
// then
// begin
// Application.OnMessage := NaoProcessaMsg;
// MessageDlg('Esse produto já está incluso nessa pré-venda!',mtWarning,[mbOk],0);
// EdtQtd.Text      := '0,00';
// EdtDescUnit.Text := '0,00';
// setLabel23(0);
// CbLote.ItemIndex := -1;
// EdtConsulta.SetFocus;
// Application.OnMessage := ProcessaMsg;
// Exit;
// end;
// end;
// if (StrToFloat(EdtPreco.Text) <= 0) then begin
// EdtConsulta.SetFocus;
// EdtConsulta.Clear;
// EdtQtd.Text      := '0,000';
// EdtDescUnit.Text := '0,00';
// setLabel23(0);
// CbLote.ItemIndex := -1;
// exit;
// end;
// if (Trim(EdtDescUnit.Text) <> '') and (StrToFloat(EdtdescUnit.Text) > 0 ) then
// begin
// //and (UPPERCASE(vEmpresa) <> 'LLPARAFUSOS') then
// BtnAprazo.Enabled := False;
// edtdesconto.Text := '0,00000';
// edtdesconto.ReadOnly := True;
// end;
// qtd := Trunc(StrToFloat(EdtQtd.Text));
// if qtd = 0 then
// qtd := 1;
// for t:=1 to qtd do begin //ESSE LACO DE REPETICAO É UTILIZADO SOMENTE PELA KARIB
// With SgDados do begin
// if RowCount >= 2 then
// RowCount := RowCount + 1;
// Row := 1;
// For L:= Row to RowCount -1 do begin
// if Cells[0,L] = '' then begin
// Row := L;
// Break;
// end;
// end;
// Cells[0,Row] := ADOSPConsulta.FieldByName('Código').AsString;     // codigo
// if (UpperCase(vEmpresa) = 'GAMA') then
// Cells[1,Row] := vDescricaoGama
// else
// Cells[1,Row] := ADOSPConsulta.FieldByName('Descrição').AsString;    // descrição
// if (UpperCase(vEmpresa) = 'GAMA') then
// Cells[10,Row] := vUndGama
// else
// Cells[10,Row] := ADOSPConsulta.FieldByName('UNIDADE').AsString;    // unidade
// if (UpperCase(vEmpresa) = 'GAMA') then
// Cells[12,Row] := floatToStr(vFatorGama);
// if vAutoPecas = 'H' then
// Cells[13,Row] := lote;
// case vCasasQtd of   // preco de venda
// 0: Cells[2,Row] := FormatFloat('0',quantidade);
// 1: Cells[2,Row] := FormatFloat('0.0',quantidade);         // quantidadeCells[3,Row] := FormatFloat('0.0',StrToFloat(EdtPreco.Text));
// 2: Cells[2,Row] := FormatFloat('0.00',quantidade);
// 3: Cells[2,Row] := FormatFloat('0.000',quantidade);
// 4: Cells[2,Row] := FormatFloat('0.0000',quantidade);
// 5: Cells[2,Row] := FormatFloat('0.00000',quantidade);
// end; // case
// case vCasasPreco of   // preco de venda
// 1: Cells[3,Row] := FormatFloat('0.0',StrToFloat(EdtPreco.Text));
// 2: Cells[3,Row] := FormatFloat('0.00',StrToFloat(EdtPreco.Text));
// 3: Cells[3,Row] := FormatFloat('0.000',StrToFloat(EdtPreco.Text));
// 4: Cells[3,Row] := FormatFloat('0.0000',StrToFloat(EdtPreco.Text));
// 5: Cells[3,Row] := FormatFloat('0.00000',StrToFloat(EdtPreco.Text));
// end; // case
// //    Cells[3,Row] := FormatFloat('0.00',StrToFloat(EdtPreco.Text));        // preco de venda
// case vCasasPreco of   // preco de venda
// 1: Cells[4,Row] := FormatFloat('0.0',StrToFloat(Cells[2,Row])  // total
// * StrToFloat(Cells[3,Row]));
// 2: Cells[4,Row] := FormatFloat('0.00',StrToFloat(Cells[2,Row])  // total
// * StrToFloat(Cells[3,Row]));
// 3: Cells[4,Row] := FormatFloat('0.000',StrToFloat(Cells[2,Row])  // total
// * StrToFloat(Cells[3,Row]));
// 4: Cells[4,Row] := FormatFloat('0.0000',StrToFloat(Cells[2,Row])  // total
// * StrToFloat(Cells[3,Row]));
// 5: Cells[4,Row] := FormatFloat('0.00000',StrToFloat(Cells[2,Row])  // total
// * StrToFloat(Cells[3,Row]));
// end; // case
// Cells[5,Row]  := ADOSPConsulta.FieldByName('Prateleira').AsString;
// Cells[6,Row]  := ADOSPConsulta.FieldByName('CÓDIGO_BARRAS').AsString;
// Cells[7,Row]  := ADOSPConsulta.FieldByName('Referência').AsString;
// Cells[8,Row]  := ADOSPConsulta.FieldByName('Estoque').AsString;
// if vSelecionaCFOP = 'S' then
// Cells[11,Row]  := EdtCFOP.Text;   // cfop por item thiago
// case vCasasPreco of
// 1 : begin
// if StrToFloat(FormatFloat('0.0',StrtoFloat(EdtPreco.Text))) > StrToFloat(FormatFloat('0.0',ADOSPConsulta.FieldByName('valor').AsFloat)) then
// Cells[9,Row]:= FormatFloat('0.0',StrtoFloat(EdtPreco.Text))
// //else if vTipoDescontoNF <> '1' then
// //  Cells[9,Row]  := FormatFloat('0.0',StrtoFloat(EdtPreco.Text))
// else
// Cells[9,Row]  := FormatFloat('0.0',ADOSPConsulta.FieldByName('valor').AsFloat);
// end;
// 2 : begin
// if StrToFloat(FormatFloat('0.00',StrtoFloat(EdtPreco.Text))) > StrToFloat(FormatFloat('0.00',ADOSPConsulta.FieldByName('valor').AsFloat)) then
// Cells[9,Row]:= FormatFloat('0.00',StrtoFloat(EdtPreco.Text))
// //else if vTipoDescontoNF <> '1' then
// //   Cells[9,Row]  := FormatFloat('0.00',StrtoFloat(EdtPreco.Text))
// else
// Cells[9,Row]  := FormatFloat('0.00',ADOSPConsulta.FieldByName('valor').AsFloat);
// end;
// 3 : begin
// if StrToFloat(FormatFloat('0.000',StrtoFloat(EdtPreco.Text))) > StrToFloat(FormatFloat('0.000',ADOSPConsulta.FieldByName('valor').AsFloat)) then
// Cells[9,Row]:= FormatFloat('0.000',StrtoFloat(EdtPreco.Text))
// //else if vTipoDescontoNF <> '1' then
// //  Cells[9,Row]  := FormatFloat('0.000',StrtoFloat(EdtPreco.Text))
// else
// Cells[9,Row]  := FormatFloat('0.000',ADOSPConsulta.FieldByName('valor').AsFloat);
// end;
// 4 : begin
// if StrToFloat(FormatFloat('0.0000',StrtoFloat(EdtPreco.Text))) > StrToFloat(FormatFloat('0.0000',ADOSPConsulta.FieldByName('valor').AsFloat)) then
// Cells[9,Row]:= FormatFloat('0.0000',StrtoFloat(EdtPreco.Text))
// //else if vTipoDescontoNF <> '1' then
// //  Cells[9,Row]  := FormatFloat('0.0000',StrtoFloat(EdtPreco.Text))
// else
// Cells[9,Row]  := FormatFloat('0.0000',ADOSPConsulta.FieldByName('valor').AsFloat);
// end;
// 5 : begin
// if StrToFloat(FormatFloat('0.00000',StrtoFloat(EdtPreco.Text))) > StrToFloat(FormatFloat('0.0000',ADOSPConsulta.FieldByName('valor').AsFloat)) then
// Cells[9,Row]:= FormatFloat('0.00000',StrtoFloat(EdtPreco.Text))
// //else if vTipoDescontoNF <> '1' then
// //  Cells[9,Row]  := FormatFloat('0.00000',StrtoFloat(EdtPreco.Text))
// else
// Cells[9,Row]  := FormatFloat('0.00000',ADOSPConsulta.FieldByName('valor').AsFloat);
// end;
// end; // case
// EdtTotal.Text := FormatFloat('0.00',StrtoFloat(EdtTotal.Text) +
// StrToFloat(Cells[4,Row]));
// SgDados.Refresh;
// EdtSubTotal.Text := EdtTotal.Text;
// end;
// if (UpperCase(vFlagEtiqueta) <> 'KARIB') then begin
// EdtConsulta.SetFocus;
// atualizaEditQtdItens;
// EdtQtd.Text      := '0,000';
// EdtPreco.Text    := '0,000';
// EdtDescUnit.Text := '0,00';
// setLabel23(0);
// CbLote.ItemIndex := -1;
// vDescricaoGama := '';
// vUndGama := '';
// vFatorGama := 0;
// AtualizaQryConsulta;
// Exit;  // EVITA REPETIR O ITENS NA GRID SE NAO FOR KARIB
// end;
// end;
// atualizaEditQtdItens;
// EdtQtd.Text      := '0,000';
// EdtPreco.Text    := '0,000';
// EdtDescUnit.Text := '0,00';
// setLabel23(0);
// CbLote.ItemIndex := -1;
/// /  EdtConsulta.Clear;
// EdtConsulta.SetFocus;
// vDescricaoGama := '';
// vUndGama := '';
// vFatorGama := 0;
// end;

procedure TFrmPrincipalPreVenda.DesativarCamposDescontoTotal;
begin
  EdtDesconto.ReadOnly := True;
  EdtSubTotal.ReadOnly := True;
end;

procedure TFrmPrincipalPreVenda.EdtDescontoExit(Sender: TObject);
var
  i: Integer;
  vlBruto, vlLiquido, vlLiquidoItem, descReal, temp, temp2, vlSubTotal: Currency;
  vlLiquidoItemReal, vlDescDiff : real;
begin
  if prevenda = nil then
    exit;
  // Se saiu do campo edtDesconto para um campo diferente de edtSubTotal, desativa o desconto
  if ((EdtDesconto.ReadOnly) and (EdtSubTotal.Focused)) or
    not(EdtSubTotal.Focused) then
    DesativarCamposDescontoTotal;
  if vCasasPreco > vLimiteCasasPreco then
  // Se a quantidade de casas do preço for maior que dois,
    EdtDesconto.Text := FormatFloat('0.000000', StrToFloatDef(EdtDesconto.Text,
      0)) // o Edtdesconto fica com a formatação antiga.
  else // senão fica com duas casas decimais
    EdtDesconto.Text := FormatFloat('0.00', StrToFloatDef(EdtDesconto.Text, 0));
  if (StrToFloatDef(EdtDesconto.Text, 0) > 0) and (vAtacadoVarejo = 'A') then
  // (UpperCase(vEmpresa) = 'CAMARATUBA')OR
  begin
    if vBloquearDescontoAtacado = True then
    begin
      Application.OnMessage := NaoProcessaMsg;
      MessageDlg('Desconto para clientes atacado está bloqueado.', mtWarning,
        [mbOK], 0);
      EdtDesconto.Text := '0,00';
      EdtDesconto.SelectAll;
      EdtDesconto.Setfocus;
      Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
      exit;
    end
  end;
  if (StrToFloatDef(EdtDesconto.Text, 0) > 0) and
    ((UpperCase(vEmpresa) = 'CARDOSOACESSORIOS')) then
  // (UpperCase(vEmpresa) = 'CAMARATUBA')or
  begin
    if TNEGCliente.isCliente_Crediario(EdtCdCliente.Text) then
    begin
      Application.OnMessage := NaoProcessaMsg;
      MessageDlg('Desconto já é automático para clientes de crediário.',
        mtWarning, [mbOK], 0);
      EdtDesconto.Text := '0,00';
      EdtDesconto.SelectAll;
      EdtDesconto.Setfocus;
      Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
      exit;
    end
  end;
  if (StrToFloatDef(EdtDesconto.Text, 0) > 0) and (vDescontoClienteAuto = True)
    and (TNEGCliente.getPercentualDoPrecoComDescontoDecimal
    (StrToIntDef(EdtCdCliente.Text, 0)) < 1) then
  // (UpperCase(vEmpresa) = 'CAMARATUBA')or
  begin
    Application.OnMessage := NaoProcessaMsg;
    MessageDlg('Desconto já é automático para este cliente.', mtWarning,
      [mbOK], 0);
    EdtDesconto.Text := '0,00';
    EdtDesconto.SelectAll;
    EdtDesconto.Setfocus;
    Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
    exit;
  end;
  if ExisteDescontoFornecedorInvalido then
  begin
    prevenda.descontoPercentual := 0;
    EdtDesconto.Text := '0,00';
    EdtDesconto.SelectAll;
    EdtDesconto.Setfocus;
    exit;
  end;

  // temp := StrToFloat(edtTotal.Text)-((StrToFloat(EdtDesconto.Text)/100)*StrToFloat(edtTotal.Text));
  // temp := SimpleRoundTo(temp,-2);
  // temp2 := StrToFloat(edtSubTotal.Text);
  if UpperCase(vEmpresa) = 'PROAUTO' then
  begin
    // if (temp < temp2) then
    if StrToFloat(FormatFloat('0.0000000', prevenda.descontoPercentual)) <
      StrToFloat(FormatFloat('0.0000000', StrToFloat(EdtDesconto.Text))) then
      if (((StrToFloat(EdtDesconto.Text) > vlDescontoVendedor) and
        ((StrToFloat(EdtDesconto.Text) - vlDescontoVendedor) > 0.01)) and
        (vDescontoCliente = 0)) OR ((StrToFloat(EdtDesconto.Text) > 0) and
        (bloquearDescontoAtacado) and (vAtacadoVarejo = 'A')) then
      begin
        vFlag := '6';
        LiberaVanda;
        EdtDesconto.Setfocus;
        Application.OnMessage := FormPrincipal.ProcessaMsg;
      end;
  end else if StrToFloat(FormatFloat('0.0000000', prevenda.descontoPercentual)) <
    StrToFloat(FormatFloat('0.0000000', StrToFloat(EdtDesconto.Text))) then
  // end else if (temp < temp2) then
  begin
    if ((TNEGCliente.getDescontoPercentual(StrToIntDef(EdtCdCliente.Text, -1)) >
      0) AND (TNEGLoja.getConfiguracaoDescontoAutomaticoPorCliente) AND
      (StrToFloat(EdtDesconto.Text) > 0) AND (PERMISSAO('615', 'V',false) = 'N')) OR
      (((StrtoFloat(FormatFloat('0.00',StrToFloatDef(EdtDesconto.Text, 0))) > vPorcDesconto) AND
      ((StrtoFloat(FormatFloat('0.00',StrToFloatDef(EdtDesconto.Text, 0))) - vPorcDesconto) > 0.01)) and
      (PERMISSAO('615', 'V',false) = 'N')) OR ((StrToFloat(EdtDesconto.Text) > 0) and
      (bloquearDescontoAtacado) and (vAtacadoVarejo = 'A')) OR
      (((StrToFloat(EdtDesconto.Text)) > 0) and (PERMISSAO('613', 'V',false) = 'N')) then // usuário não tem permissão para dar desconto até o limite
    begin
      if (StrToCurrDef(EdtDesconto.Text, 0) > 0) and (liberouVenda = False) and
         (StrToCurrDef(EdtDesconto.Text, 0) <= vPorcDesconto) and
         (PERMISSAO('613', 'V',false) = 'N')  then
      begin
        vFlag := '0';
        LiberaVanda;
      end else
      // valor total abaixo da soma do custo final
      if (StrToFloat(EdtDesconto.Text) > 0) AND  (StrToFloat(EdtSubTotal.Text) < getSomaCustoFinal) AND
        TNEGLoja.getBloquearVendaAbaixoDoCustoFinal AND (PERMISSAO('631', 'V') = 'N') then
      begin
        if (possuiPermissaoVenderAbaixoDoCusto = True) or (FrmCancelamentoVenda.Possui_Permissao('631', 'V', cbxUsuario.Text,
          EdtUsuario.Text, False)) then
        begin
          Application.MessageBox(Pchar('Vendendo abaixo do custo final'),
            'Atenção', mb_Ok + MB_ICONINFORMATION + MB_APPLMODAL);
          possuiPermissaoVenderAbaixoDoCusto := False;
        end
        else
        begin
          try
            if FrmCancelamentoVenda <> nil then
              FreeAndNil(FrmCancelamentoVenda);
            FrmCancelamentoVenda := TFrmCancelamentoVenda.Create(self, '631', 'V',
              possuiPermissaoVenderAbaixoDoCusto);
            FrmCancelamentoVenda.Copyright.caption :=
              '<<<<   Venda abaixo do custo final    >>>>';
            FrmCancelamentoVenda.ShowModal;
            FreeAndNil(FrmCancelamentoVenda);
          except
            FreeAndNil(FrmCancelamentoVenda);
          end;
        end;
        if (not possuiPermissaoVenderAbaixoDoCusto) then
        begin
          prevenda.descontoPercentual := 0;
          EdtDesconto.Text := '0,000';
          // EdtSubTotal.Text := EdtTotal.Text;
        end;
        Application.OnMessage := FormPrincipal.ProcessaMsg;
      end
      else
      begin
        if TestaFinanceiroNaConfirmacao = false then
        begin
          vFlag := '6';
          LiberaVanda;
        end;
        EdtDesconto.Setfocus;
        Application.OnMessage := FormPrincipal.ProcessaMsg;
      end
    end else if (StrToFloat(EdtDesconto.Text) > 0) AND (StrToFloat(EdtSubTotal.Text) < getSomaCustoFinal) AND TNEGLoja.getBloquearVendaAbaixoDoCustoFinal AND (PERMISSAO('631', 'V') = 'N') then
    begin
      if (possuiPermissaoVenderAbaixoDoCusto = True) or (FrmCancelamentoVenda.Possui_Permissao('631', 'V', cbxUsuario.Text,
        EdtUsuario.Text, False)) then
      begin
        Application.MessageBox(Pchar('Vendendo abaixo do custo final'), 'Atenção', mb_Ok + MB_ICONINFORMATION + MB_APPLMODAL);
      end else
      begin
        try
          if FrmCancelamentoVenda <> nil then
            FreeAndNil(FrmCancelamentoVenda);
          FrmCancelamentoVenda := TFrmCancelamentoVenda.Create(self, '631', 'V', possuiPermissaoVenderAbaixoDoCusto);
          FrmCancelamentoVenda.Copyright.caption :=
            '<<<<   Venda abaixo do custo final    >>>>';
          FrmCancelamentoVenda.ShowModal;
          FreeAndNil(FrmCancelamentoVenda);
        except
            FreeAndNil(FrmCancelamentoVenda);
        end;
      end;
      if (not possuiPermissaoVenderAbaixoDoCusto) then
      begin
        prevenda.descontoPercentual := 0;
        EdtDesconto.Text := '0,000';
        // EdtSubTotal.Text := EdtTotal.Text;
      end;
      Application.OnMessage := FormPrincipal.ProcessaMsg;
    end
  end;

  // só é permitido aplicar desconto nos itens que não estão em promoção
  vlBruto := 0;
  vlLiquido := 0;
  vlLiquidoItemReal := 0;
  vlLiquidoItem := 0;
  if FormatFloat('0.000000',prevenda.descontoPercentual) <> EdtDesconto.Text then
    valorAjustar := 0;
  prevenda.descontoPercentual := StrToFloat(EdtDesconto.Text);
  for i := 0 to prevenda.itens.Count - 1 do
  begin
    if i = 27 then
      Sleep(1);
    if (prevenda.itens[i].Promocao_desconto_Item = false) or
      (((UpperCase(vEmpresa) = 'BG') or (UpperCase(vEmpresa) = 'KADU') or (UpperCase(vEmpresa) = 'MOTOPECAS') or (UpperCase(vEmpresa) = 'PROAUTO')) and
      (prevenda.descontoPercentual > 0)) then
    // and (prevenda.descontoPercentual <> 0) then
    begin
      // and (prevenda.itens[i].precoVenda = prevenda.itens[i].precoBruto) then begin
      if SgDados.Cells[0, i + 1] <> '' then
      begin
        // aplico o desconto em cada item
        if prevenda.descontoPercentual <> 0 then
        begin
          // vlSubTotal := prevenda.itens[i].quantidade * prevenda.itens[i].precoBruto;
          // vlSubTotal := SimpleRoundTo(vlSubTotal,-2);
          prevenda.itens[i].precoVenda := prevenda.itens[i].precoBruto *
            (1 - (prevenda.descontoPercentual / 100));

          if i = 0 then
            prevenda.itens[i].precoVenda := prevenda.itens[i].precoVenda -
              (valorAjustar / prevenda.itens[i].quantidade);
          // prevenda.itens[i].precoVenda :=
          // ((vlSubTotal)
          // -
          // (vlSubTotal * (prevenda.descontoPercentual/100)))
          // / prevenda.itens[i].quantidade;
          prevenda.itens[i].precoVenda :=
            SimpleRoundTo(prevenda.itens[i].precoVenda, vCasasPreco * -1);
        end
        else
          prevenda.itens[i].precoVenda := (prevenda.itens[i].precoBruto);
        // prevenda.itens[i].precoVenda := prevenda.itens[i].precoBruto - ((prevenda.itens[i].precoBruto * prevenda.descontoPercentual) / 100);
        // prevenda.itens[i].precoVenda := prevenda.itens[i].precoBruto - (prevenda.itens[i].precoBruto * (prevenda.descontoPercentual / 100));
      end;
    end;
    // prevenda.itens[i].SubTotal := prevenda.itens[i].quantidade * prevenda.itens[i].precoVenda;
    SgDados.Cells[3, i + 1] := FormatFloatQ(vCasasPreco,
      SimpleRoundTo(prevenda.itens[i].precoVenda, vCasasPreco * -1));
    prevenda.itens[i].precoVenda := StrToFloat(SgDados.Cells[3, i + 1]);
    prevenda.itens[i].SubTotal := prevenda.itens[i].quantidade * prevenda.itens
      [i].precoVenda;
    prevenda.itens[i].SubTotal := SimpleRoundTo(prevenda.itens[i].SubTotal, -2);
    SgDados.Cells[4, i + 1] := FormatFloatQ(2, prevenda.itens[i].SubTotal);
    // SgDados.Cells[4,i+1]:= FormatFloatQ(2,SimpleRoundTo(prevenda.itens[i].precoVenda * prevenda.itens[i].quantidade,-2)); // total
    temp := (prevenda.itens[i].quantidade * prevenda.itens[i].precoBruto);
    vlBruto := vlBruto + SimpleRoundTo(temp, -2);
    // if prevenda.descontoPercentual <> 0 then
    // vlLiquido := vlLiquido + (prevenda.itens[i].quantidade * prevenda.itens[i].precoVenda)
    // else
    temp := ((prevenda.itens[i].quantidade * prevenda.itens[i].precoVenda));
    // temp := SimpleRoundTo(temp,-2);
    vlLiquidoItemReal := temp;
    vlLiquidoItem := SimpleRoundTo(temp, -2);
    vlLiquido := vlLiquido + SimpleRoundTo(temp, -2);
    vlDescDiff := vlLiquidoItem - vlLiquidoItemReal;
    if vlDescDiff > 0.01 then
    begin
      SgDados.Cells[3,i + 1] := FormatFloatQ(vCasasPreco,SimpleRoundTo(prevenda.itens[0].precoVenda - (vlDescDiff / prevenda.itens[0].quantidade), vCasasPreco * -1));
      prevenda.itens[0].precoVenda := StrToFloat(SgDados.Cells[3,i + 1]);
      prevenda.itens[0].SubTotal := prevenda.itens[0].quantidade * prevenda.itens[0].precoVenda;
      prevenda.itens[0].SubTotal := SimpleRoundTo(prevenda.itens[0].SubTotal, -2);
      SgDados.Cells[4,i + 1] := FormatFloatQ(2, prevenda.itens[0].SubTotal);
      vlLiquido := vlLiquido - SimpleRoundTo(vlDescDiff, -2);
    end;
  end;
  descReal := (vlBruto * StrToFloat(EdtDesconto.Text)) / 100;
  prevenda.descontoPercentual := StrToFloat(EdtDesconto.Text);
  EdtTotal.Text := FormatFloatQ(2, SimpleRoundTo(vlBruto, -2) +
    GetValorIPIBruto(prevenda));
  vlTotalAnterior := SimpleRoundTo(StrToFloatDef(EdtSubTotal.Text, 0), -2);
  EdtSubTotal.Text := FormatFloatQ(2,
    (vlLiquido + GetValorIPILiquido(prevenda)));
  edtTotalIPI.Text := FormatFloatQ(2, (GetValorIPILiquido(prevenda)));
  frmLucroVenda := TfrmLucroVenda.Create(nil);
  verificaLucro((StrToFloat(frmLucroVenda.edtvlLucro.Text)/StrToFloat(frmLucroVenda.edtvlValor.Text))*100);
  FreeAndNil(frmLucroVenda);
end;

function TFrmPrincipalPreVenda.getHoraServidor: string;
begin
  with ADOQryProcura1 do
  begin
    sql.Text := 'Select CONVERT(CHAR(10),GETDATE(),8) as data';
    open;
    result := FieldByName('data').AsString;
    // Pega a hora do banco de dados (servidor).
    Close;
  end;
end;

function TFrmPrincipalPreVenda.getMensagemRestricao
  (restricao: TListaRestricao): string;
var
  Msg: string;
begin
  if ATRASO in restricao then
    Msg := 'ATRASO';
  if CHEQUE in restricao then
    Msg := Msg + ',CHEQUE';
  if LIMITE in restricao then
    Msg := Msg + ',LIMITE';
  result := Msg;
end;

function TFrmPrincipalPreVenda.getSomaCustoFinal: Currency;
var
  i: Integer;
  soma: Currency;
  Produto: TDOMProduto;
  quantidade: Real;
begin
  soma := 0;
  for i := 1 to (SgDados.RowCount - 1) do
  begin
    if (SgDados.Cells[0, i]) <> '' then
    begin
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, i]));
      quantidade := StrToFloat(SgDados.Cells[2, i]);
      if vAtacadoVarejo = 'A' then
        soma := soma + (Produto.nrCustoFinal_a * quantidade)
      else
        soma := soma + (Produto.nrCustoFinal_v * quantidade);
      Produto.destruir;
    end
    else
      Break;
  end;
  result := soma;
end;

procedure TFrmPrincipalPreVenda.BtnCancelarClick(Sender: TObject);
var
  query: TADOQuery;
begin
  if MessageDlg('Cancelar esta pré-venda?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
  begin
    // Limpar_Tela;
    Cancelar;
    if vAutoLogoff then
      Solicitar_Login;
  end else
  begin
    cbxcliente.SelectAll;
    cbxcliente.Setfocus;
  end;
  query := TADOQuery.Create(self);
  query.Connection := DModulo.Conexao;
  With query do // Pegar a obs da pré-venda
  begin
    sql.Text := 'Select campo_20 From Configuracao WITH (NOLOCK)';
    open;
    lblMensagem.caption := FieldByName('Campo_20').AsString;
    if Length(SubstituiTexto(lblMensagem.caption, ' ')) = 0 then
      lblMensagem.caption :=
        'Digite uma mensagem para os vendedores no SAEF. Menu UTILITARIOS>GERENCIAIS>CONFIGURAÇÃO DO SISTEMA';
    Close;
  end;
  FreeAndNil(query);
  RodaScripts1;
  // SgDados.RowCount:=2;
  atualizaEditQtdItens;
  listaProdutosAcrescimo.Clear;
end;

procedure TFrmPrincipalPreVenda.AuxiliarLancto(i: Integer);
begin
  SgDados.Cells[0, i] := ADOQryProcura.FieldByName('cdProduto').AsString;
  if (UpperCase(vEmpresa) = 'PTINTAS') OR (UpperCase(vEmpresa) = 'JNUNES') then
    SgDados.Cells[1, i] := ADOQryProcura.FieldByName('dsServico').AsString
  else if (UpperCase(vEmpresa) = 'GAMA') or (UpperCase(vEmpresa) = 'JETLASER') or (UpperCase(vEmpresa) = 'ANADRI') then
  begin
    SgDados.Cells[1, i] := ADOQryProcura.FieldByName('dsServico').AsString;
    SgDados.Cells[10, i] := ADOQryProcura.FieldByName('dsMetragem').AsString;
    SgDados.Cells[12, i] := FormatFloat('0.00000',
      ADOQryProcura.FieldByName('nrFatorConversao').AsFloat);
  end
  else
    SgDados.Cells[1, i] := ADOQryProduto.FieldByName('nmProduto').AsString;
  SgDados.Cells[2, i] := FormatFloatQ(vCasasQtd,
    ADOQryProcura.FieldByName('nrQtd').AsFloat);
  SgDados.Cells[3, i] := FormatFloatQ(vCasasPreco,
    ADOQryProcura.FieldByName('vlPreco').AsFloat);
  SgDados.Cells[4, i] := FormatFloatQ(vCasasPreco,
    (ADOQryProcura.FieldByName('nrQtd').AsFloat * ADOQryProcura.FieldByName
    ('vlPreco').AsFloat));
  SgDados.Cells[6, i] := ADOQryProduto.FieldByName('cdFabricante').AsString;
  SgDados.Cells[7, i] := ADOQryProduto.FieldByName('dsReferencia').AsString;
  SgDados.Cells[8, i] := ADOQryProduto.FieldByName('nrQtdReal').AsString;
  SgDados.Cells[9, i] := FormatFloatQ(vCasasPreco,
    ADOQryProcura.FieldByName('vlDesconto').AsFloat);
  EdtTotal.Text := FormatFloat('0.00', StrToFloat(EdtTotal.Text) +
    (StrToFloat(SgDados.Cells[9, i]) * StrToFloat(SgDados.Cells[2, i])));
  // if (ADOQryProcura.FieldByName('vlDesconto').AsFloat <> ADOQryProcura.FieldByName('vlPreco').AsFloat) then
  // begin
  // //and (UPPERCASE(vEmpresa) <> 'LLPARAFUSOS') then
  // BtnAprazo.Enabled := False;
  // edtdesconto.Text := '0,00000';
  // edtdesconto.ReadOnly := True;
  // end;

  edtValorBruto.Text := FormatFloat('0.00', StrToFloat(edtValorBruto.Text) +
    (StrToFloat(SgDados.Cells[9, i]) * StrToFloat(SgDados.Cells[2, i])));
  if usarLoteValidade = True then
  begin
    SgDados.Cells[13, i] := ADOQryProcura.FieldByName('nrLote').AsString;
    if (trim(SgDados.Cells[13, i]) <> '') and
      (ADOQryProcura.FieldByName('cdfabricanteLote').AsString = '') then
      SgDados.Cells[16, i] :=
        intToStr(getFabricanteLote(DModulo.Conexao.ConnectionString,
        StrToInt(SgDados.Cells[0, i]), SgDados.Cells[13, i]))
    else
      SgDados.Cells[16, i] := ADOQryProcura.FieldByName
        ('cdfabricanteLote').AsString;
  end;
  SgDados.Cells[11, i] := ADOQryProcura.FieldByName('dsCfop').AsString;
  if (UpperCase(vEmpresa) = 'AMBIENTE') then
  begin
    SgDados.Cells[14, i] := ADOQryProcura.FieldByName('cdAmbiente').AsString;
    SgDados.Cells[15, i] := ADOQryProcura.FieldByName('dsAmbiente').AsString;
  end;
  // INDICO NO ARRAY SE ESSA LINHA FICARÁ DESTACADA OU NÃO
  if (vDestacarItensOcupados) and
    ((RgOpcoes.ItemIndex = 0) or ((transformarOrcamentoPrevenda = True) and
    (RgOpcoes.ItemIndex = 1))) then
    if ((vEstqNegativo <> 'S') and
      (qtdInsuficienteParaPrevend(StrToInt(SgDados.Cells[0, i]),
      StrToFloatDef(SgDados.Cells[2, i], 0)) > 0) and
      (TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, i])).tipoComposicao
      <> composto)) or ((TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, i])
      ).tipoComposicao = composto) and
      (TNEGProduto.getEstoquePossivelProdutoComposto(StrToInt(SgDados.Cells[0,
      i]), 1) <= 0)) then
      ArraylinhasDestacadas[i] := True
    else
      ArraylinhasDestacadas[i] := false;
end;

procedure TFrmPrincipalPreVenda.RemontaSgDados(i: Integer);
begin
  SgDados.Cells[0, i] := ADOQryProcura.FieldByName('cdProduto').AsString;
  if (UpperCase(vEmpresa) = 'PTINTAS') OR (UpperCase(vEmpresa) = 'JNUNES') then
    SgDados.Cells[1, i] := ADOQryProcura.FieldByName('dsServico').AsString
  else if (UpperCase(vEmpresa) = 'GAMA') or (UpperCase(vEmpresa) = 'JETLASER') or (UpperCase(vEmpresa) = 'ANADRI') then
  begin
    SgDados.Cells[1, i] := ADOQryProcura.FieldByName('dsServico').AsString;
    SgDados.Cells[10, i] := ADOQryProcura.FieldByName('dsMetragem').AsString;
    SgDados.Cells[12, i] := FormatFloat('0.00000',
      ADOQryProcura.FieldByName('nrFatorConversao').AsFloat);
  end
  else
    SgDados.Cells[1, i] := ADOQryProduto.FieldByName('nmProduto').AsString;
  SgDados.Cells[2, i] := FormatFloatQ(vCasasQtd,
    (ADOQryProduto.FieldByName('nrqtdreal').AsFloat));
  SgDados.Cells[3, i] := FormatFloatQ(vCasasPreco,
    ADOQryProcura.FieldByName('vlPreco').AsFloat);
  SgDados.Cells[4, i] := FormatFloatQ(vCasasPreco,
    (ADOQryProduto.FieldByName('nrqtdreal').AsFloat * ADOQryProcura.FieldByName
    ('vlPreco').AsFloat));
  EdtTotal.Text := FormatFloat('0.00', StrToFloat(EdtTotal.Text) +
    (StrToFloat(SgDados.Cells[9, i]) * StrToFloat(SgDados.Cells[2, i])));
  SgDados.Cells[6, i] := ADOQryProduto.FieldByName('cdFabricante').AsString;
  SgDados.Cells[7, i] := ADOQryProduto.FieldByName('dsReferencia').AsString;
  SgDados.Cells[8, i] := ADOQryProduto.FieldByName('nrQtdReal').AsString;
  SgDados.Cells[9, i] := FormatFloatQ(vCasasPreco,
    ADOQryProcura.FieldByName('vlDesconto').AsFloat);
  edtValorBruto.Text := FormatFloat('0.00', StrToFloat(edtValorBruto.Text) +
    (StrToFloat(SgDados.Cells[9, i]) * StrToFloat(SgDados.Cells[2, i])));
end;

function TFrmPrincipalPreVenda.RequisitosAtendidos: Boolean;
var
  resultado: Boolean;
begin
  resultado := True;
  if prevenda = nil then
  begin
    MessageDlg('Selecione um ou mais itens antes de confirmar a prevenda.',
      mtWarning, [mbOK], 0);
    resultado := false;
  end;
  if resultado then
    if ExisteDescontoFornecedorInvalido then
      resultado := false;
  if resultado then
    if not QuantidadePositiva then
      resultado := false;
  if resultado then
    if Vender_Proibida_Fracionado then
      resultado := false;
  if resultado then
    if not PossuiEstoque then
      resultado := false;
  if resultado then
    if ProdutoJaReservado then
      resultado := false;
  if resultado then
    if not ClienteValido then
      resultado := false;
  if resultado then
    if not VendedorValido then
      resultado := false;
  if resultado then
    if not LoginValido then
      resultado := false;
  if resultado then
    if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then
    begin
      BtnConfirmar.Enabled := True;
      Alteraquantidade1.Enabled := True;
      resultado := false;
    end;
  if resultado then
    if not ExisteItemPrevenda then
      resultado := false;
  if resultado then
    if not ValidarNumeroLancamento_LIBEL then
      resultado := false;
  result := resultado;
end;

procedure TFrmPrincipalPreVenda.atualizaGridDados;
var
  i: Integer;
begin
  if (vEstqNegativo <> 'S') then
  begin
    LimpaGrid2(SgDados, ADOQryProcura.RecordCount);
    tiraLinhasVazias(SgDados);
    // open;
    ADOQryProcura.first;
    for i := 1 to ADOQryProcura.RecordCount do
    begin
      ADOQryProduto.Locate('cdproduto', ADOQryProcura.FieldByName('cdProduto')
        .AsFloat, []);
      // if (ADOQryProcura.FieldByName('nrQtd').AsFloat > ADOQryProduto.FieldByName('nrqtdreal').AsFloat) and (vEstqNegativo <> 'S') and (vOrcamento<>'O') then begin
      if (ADOQryProduto.FieldByName('nrqtdreal').AsFloat <= 0) and
        (vEstqNegativo <> 'S') and (vOrcamento <> 'O') and
        (ADOQryProduto.FieldByName('dsTIPO_ITEM').AsString <> '09') then
      begin
        Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
        if (vOrcamento = 'N') and (FrmPrincipalPreVenda.RgOpcoes.ItemIndex = 1)
        then
        begin
          MessageDlg('O Produto de código ' + ADOQryProduto.FieldByName
            ('cdProduto').AsString + ' está com a quantidade ' +
            FormatFloat('0.00', ADOQryProduto.FieldByName('nrqtdreal').AsFloat)
            + ' disponível em estoque.' + #13 + #13 +
            'Portanto, será excluído deste orçamento!', mtWarning, [mbOK], 0);
          edtQtdItens.Text :=
            FormatFloat('0', StrToFloat(edtQtdItens.Text) - 1);
          { if Messagedlg('O Produto de código '+ ADOQryProduto.FieldByName('cdProduto').AsString+' está com '+ FormatFloat('0.00',ADOQryProduto.FieldByName('nrqtdreal').AsFloat) +
            ' em estoque, portanto, não está com quantidade suficiente para venda!' + #13 +
            'Deseja adiciona-lo mesmo com a quantidade insuficiente em estoque?'
            ,mtInformation, [mbYes, mbNo], 0) = mrYes then
            AuxiliarLancto(i); }
        end;
        Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
      end
      else if (ADOQryProcura.FieldByName('nrQtd').AsFloat >
        ADOQryProduto.FieldByName('nrqtdreal').AsFloat) and
        (ADOQryProduto.FieldByName('nrqtdreal').AsFloat > 0) and
        (vEstqNegativo <> 'S') and
        (ADOQryProduto.FieldByName('dsTIPO_ITEM').AsString <> '09') then
      begin
        Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
        MessageDlg('Atenção! ' + #13 + 'O Produto de código ' +
          ADOQryProduto.FieldByName('cdProduto').AsString +
          ' está com a quantidade ' + FormatFloat('0.00',
          ADOQryProduto.FieldByName('nrqtdreal').AsFloat) +
          ' disponível em estoque.' + #13 + 'Foi Solicitado ' +
          FormatFloat('0.00', (ADOQryProcura.FieldByName('nrQtd').AsFloat)) +
          ' item(s) ' + #13 + 'Será adicionado na pré-venda/orçamento somente '
          + FormatFloat('0.00', (ADOQryProduto.FieldByName('nrqtdreal').AsFloat)
          ) + ' unidades do produto.', mtWarning, [mbOK], 0);
        Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
        RemontaSgDados(SgDados.RowCount);
        SgDados.RowCount := SgDados.RowCount + 1;
      end
      else
      begin
        AuxiliarLancto(SgDados.RowCount);
        SgDados.RowCount := SgDados.RowCount + 1;
      end;
      ADOQryProcura.Next;
    end;
    tiraLinhasVazias(SgDados);
  end;
end;

// procedure TFrmPrincipalPreVenda.atualizaGridDados;
// var i: integer;
// begin
// if(vEstqNegativo <> 'S') then begin
// Limpa_Grid(SgDados);
// //open;
// ADOQryProcura.first;
// for i := 1 to ADOQryProcura.RecordCount do begin
// ADOQryProduto.Locate('cdproduto',ADOQryProcura.FieldByName('cdProduto').AsFloat,[]);
/// /      if (ADOQryProcura.FieldByName('nrQtd').AsFloat > ADOQryProduto.FieldByName('nrqtdreal').AsFloat) and (vEstqNegativo <> 'S') and (vOrcamento<>'O') then begin
// if (ADOQryProduto.FieldByName('nrqtdreal').AsFloat <= 0) and (vEstqNegativo <> 'S') and (vOrcamento<>'O') then begin
// Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
// if (vOrcamento = 'N') and (FrmPrincipalPreVenda.RgOpcoes.ItemIndex = 1) then begin
// Messagedlg('O Produto de código '+ ADOQryProduto.FieldByName('cdProduto').AsString+' está com a quantidade '+ FormatFloat('0.00',ADOQryProduto.FieldByName('nrqtdreal').AsFloat) +
// ' disponível em estoque.' + #13 + #13 +
// 'Portanto, será excluído deste orçamento!',mtWarning, [mbOk], 0);
// edtQtdItens.Text := FormatFloat('0',StrToFloat(edtQtdItens.Text) - 1);
// {            if Messagedlg('O Produto de código '+ ADOQryProduto.FieldByName('cdProduto').AsString+' está com '+ FormatFloat('0.00',ADOQryProduto.FieldByName('nrqtdreal').AsFloat) +
// ' em estoque, portanto, não está com quantidade suficiente para venda!' + #13 +
// 'Deseja adiciona-lo mesmo com a quantidade insuficiente em estoque?'
// ,mtInformation, [mbYes, mbNo], 0) = mrYes then
// AuxiliarLancto(i); }
// end;
// Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
// end else
// if (ADOQryProcura.FieldByName('nrQtd').AsFloat > ADOQryProduto.FieldByName('nrqtdreal').AsFloat) and (ADOQryProduto.FieldByName('nrqtdreal').AsFloat > 0)
// and (vEstqNegativo <> 'S') then begin
// Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
// Messagedlg('Atenção! '+#13+
// 'O Produto de código '+ ADOQryProduto.FieldByName('cdProduto').AsString+' está com a quantidade '+ FormatFloat('0.00',ADOQryProduto.FieldByName('nrqtdreal').AsFloat) +
// ' disponível em estoque.' + #13 +
// 'Foi Solicitado '+ formatFloat('0.00',(ADOQryProcura.FieldByName('nrQtd').AsFloat))+' item(s) '+#13+
// 'Será adicionado na pré-venda/orçamento somente '+ formatFloat('0.00',(ADOQryProduto.FieldByName('nrqtdreal').AsFloat)) +' unidades do produto.' ,mtWarning, [mbOk], 0);
// Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
// RemontaSgDados(i);
// SgDados.RowCount := SgDados.RowCount + 1;
// end else begin
// AuxiliarLancto(i);
// SgDados.RowCount := SgDados.RowCount + 1;
// end;
// ADOQryProcura.Next;
// end;
// tiraLinhasVazias(SgDados);
// end;
// end;

function TFrmPrincipalPreVenda.Existe_Numero_Orcamento
  (nrOrcamento: string): Boolean;
var
  qry: TADOQuery;
begin
  qry := TADOQuery.Create(nil);
  qry.Connection := DModulo.Conexao;
  with qry do
  begin
    sql.Text :=
      'select nrOrcamento from orcamento where nrOrcamento = :nrOrcamento';
    Parameters.ParamByName('nrOrcamento').Value := nrOrcamento;
    open;
    result := qry.RecordCount > 0;
    Close;
  end;
  FreeAndNil(qry);
end;

function TFrmPrincipalPreVenda.Verifica_Se_Produto_Fracionado
  (cdProduto: string): Boolean;
var
  qry: TADOQuery;
begin
  qry := TADOQuery.Create(nil);
  qry.Connection := DModulo.Conexao;
  with qry do
  begin
    sql.Text := 'select fracionado from unidade U with (noLock) ' +
      'inner join Produto P with (noLock) on P.dsUnidade = U.dsUnidade ' +
      'where P.cdProduto = :cdProduto ';
    Parameters.ParamByName('cdProduto').Value := cdProduto;
    open;
    result := not FieldByName('fracionado').AsBoolean;
    Close;
  end;
  FreeAndNil(qry);
end;

procedure TFrmPrincipalPreVenda.BtnConfirmarClick(Sender: TObject);
begin
  try
    if chkbxEtiqueta.Checked = True then
    begin
      MessageDlg('Desmarque a opção de imprimir etiquetas antes de confirmar.', mtInformation, [mbOK], 0);
      exit;
    end;
    BtnConfirmar.Enabled := false;
    if RequisitosAtendidos then
    begin // conjuntos de validacoes feitas antes de confirmar a prevenda/orcamento
      if (RgOpcoes.ItemIndex = 3) and (UpperCase(vEmpresa) <> 'AMBIENTAR') and
        (UpperCase(vEmpresa) <> 'PBFARMA') then
      begin // somente p proauto
        SalvaTransferencia;
        BtnConfirmar.Enabled := True;
        Alteraquantidade1.Enabled := True;
        exit;
      end;
      if ((vOrcamento = 'O') and (RgOpcoes.ItemIndex = 1)) then
        if transformarOrcamentoPrevenda then
        // Indica que o orcamento agora irá se tornar uma prevenda
          vOrcamento := 'N';
      vTime := getHoraServidor;
      if EdtLancto.Text <> '' then
        DesbloqueiaAlteracaoPreVenda(StrToInt(EdtLancto.Text));
      if (UpperCase(vEmpresa) = 'COPYART') then
      // se for copy art sempre pergunta o tipo da forração dos livros
        Verifica_Livro_Forracao;
      if (vSelecionaForma = 'S') and (RgOpcoes.ItemIndex <> 3) then
      begin
        // if FrmFormaPag = nil then
        FrmFormaPag := TFrmFormaPag.Create(self); // Cria o formulário
        FrmFormaPag.Position := poMainFormCenter;
        if (UpperCase(vEmpresa) = 'JNUNES') and (RgOpcoes.ItemIndex <> 1) then
        begin
          FrmFormaPag.Memo1.Lines.Add('NOME: ');
          FrmFormaPag.Memo1.Lines.Add('FONE: ');
          FrmFormaPag.Memo1.Lines.Add('ENDERECO: ');
          FrmFormaPag.Memo1.Lines.Add('PTO REFERENCIA: ');
        end;
        // auxiLiberacao := false;
        FrmFormaPag.ShowModal;
      end else
      begin
        prevenda.codigoFormaPagamento := '-1';
        SalvarPreVenda(prevenda);
      end;
    end;
    CbxCliente.Setfocus;
  finally
    BtnConfirmar.Enabled := true;
  end;
end;

procedure TFrmPrincipalPreVenda.SgDadosDblClick(Sender: TObject);
var
  L, C, Lauxi: Integer;
  existeItemLancadoNaGrid: Boolean;
begin
  if (SgDados.Row = 0) or (SgDados.Cells[0, SgDados.Row] = '') then
  // SgDados.RowCount -1 then
    exit;
  if MessageDlg('Deseja excluir esta linha?', mtConfirmation, [mbYes, mbNo], 0)
    <> mrYes then
  begin
    EdtConsulta.Setfocus;
    exit;
  end;
  // remove o valor cancelado do edit do valor total
  if SgDados.EditorMode = True then
    SgDados.EditorMode := false;

  prevenda.itens.Delete(SgDados.Row - 1);
  if prevenda.itens.Count = 0 then
  begin
    possuiPermissaoVenderAbaixoDoCusto := False;
    liberouVenda := False;
  end;
  // EdtTotal.Text := FormatFloat('0.00',StrToFloat(EdtTotal.Text) - (StrToFloat(SgDados.Cells[9,SgDados.Row]) * StrToFloat(SgDados.Cells[2,SgDados.Row])));
  // edtValorBruto.Text := FormatFloat('0.00',StrToFloat(edtValorBruto.Text) -
  // (StrToFloat(SgDados.Cells[9,SgDados.Row])*StrToFloat(SgDados.Cells[2,SgDados.Row])));
  if StrToFloat(EdtTotal.Text) = 0 then
  begin
    EdtDesconto.Text := LimpaEdtDesconto;
    BtnAprazo.Enabled := True;
  end;
  if vPAFECF then
    cancelar_item(SgDados.Row); // cancela o item da lista
  // else begin // exclui o item da lista
  // With SgDados do
  // begin
  // if Row = RowCount -1 then // limpa quando a grid tem só uma linha
  // begin
  // for C := 0 to ColCount do
  // Cells[C,Row] := '';
  // end else
  // begin
  // for C := 1 to ColCount do
  // Cells[C,Row] := '';
  // Lauxi := Row;
  // for L := Lauxi to RowCount -1 do
  // begin
  // for C := 0 to ColCount do
  // Cells[C,Row] := Cells[C,Row + 1];
  // if Row < Rowcount -1 then
  // Row := Row + 1;
  // end;
  // end;
  // Row := 1;
  // for L:= Row to RowCount -1 do
  // begin
  // if Cells[0,L] = '' then
  // begin
  // Row := L;
  // Break;
  // end;
  // end;
  // if RowCount > 1 then
  // RowCount := RowCount-1;
  // end;
  // end;
  // SgDados.Refresh;
  // // Recalcula o valor da venda com o desconto
  // EdtDescontoExit(Self);
  CarregarItensGrid(prevenda, intToStr(SgDados.Row));
  if SgDados.Cells[0, 1] = '' then
    vProdutoPromocao := ''; // Se só tiver uma linha, limpa o flag da promocao
  existeItemLancadoNaGrid := (SgDados.Cells[0, 1] <> '');
  if (not existeItemLancadoNaGrid) then
    BtnAprazo.Enabled := True;
  atualizaEditQtdItens;
  SgDadosExit(self);
  preencheArrayLinhasDestacadas;
  EdtDesconto.Text := '0,00';
  EdtDescontoExit(self);
  SgDados.Repaint;
  EdtConsulta.Setfocus;
  setLabel23(QuantidadeDispEmLotes(ADOSPConsulta.FieldByName('Código')
    .AsInteger));
end;

function TFrmPrincipalPreVenda.LimpaEdtDesconto: string;
begin
  if MoPreVenda.vCasasPreco > MoPreVenda.vLimiteCasasPreco then
    result := '0,00000'
  else
    case vCasasPreco of // preco de venda
      1:
        result := '0,0';
      2:
        result := '0,00';
      3:
        result := '0,000';
      4:
        result := '0,0000';
      5:
        result := '0,00000';
    end; // case
end;

procedure TFrmPrincipalPreVenda.CbxAmbienteChange(Sender: TObject);
begin
  if CbxAmbiente.ItemIndex <> -1 then
  begin
    AdoAmbiente.open;
    AdoAmbiente.Locate('dsAmbiente', CbxAmbiente.Text, []);
    EdtCdAmbiente.Text := AdoAmbiente.FieldByName('cdAmbiente').AsString;
  end else
    EdtCdAmbiente.Clear;
end;
{
  Preenche os edits relacionados após o usuário alterar o cliente na cbxCliente.
}
procedure TFrmPrincipalPreVenda.PreencherCamposDoClienteSetadoNaCombo;
begin
  if CbxCliente.ItemIndex <> -1 then
  begin
    ADOQryCliente.open;
    if ADOQryCliente.Locate('cdPessoa', copy_campo(CbxCliente.Text, '|', 2), []) then
    begin
      Label10.Caption := 'Observação';
      EdtCdCliente.Text := ADOQryCliente.FieldByName('cdPessoa').AsString;
      cdTabelaPreco := ADOQryCliente.FieldByName('cdTabelaPreco').AsInteger;
      EdtEndereco.Text := ADOQryCliente.FieldByName('nmLogradouro').AsString;
      if (UpperCase(vEmpresa) = 'CAMARATUBA') OR
        (UpperCase(vEmpresa) = 'CARDOSOACESSORIOS') then
        EdtApelido.Text := ADOQryCliente.FieldByName('dsPreVenda').AsString
      else if ADOQryCliente.FieldByName('apelido').AsString <> '' then
      begin
        EdtApelido.Text := ADOQryCliente.FieldByName('apelido').AsString;
        Label10.Caption := 'Apelido';
      end else
        EdtApelido.Text := ADOQryCliente.FieldByName('dsPreVenda').AsString;
      vUF_Cliente := ADOQryCliente.FieldByName('dsUF').AsString;
    end else
    begin
      EdtCdCliente.Text := '';
      EdtEndereco.Text := '';
      EdtApelido.Text := ''; // apelido
      vUF_Cliente := '';
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.CbxClienteChange(Sender: TObject);
begin
  // if possuiItensLançados then
  // begin
  // if Application.MessageBox('Alterar o cliente implica na perda dos produtos lançados na prevenda, deseja continuar',
  // 'Confirmação',MB_ICONEXCLAMATION + Mb_YesNo) = IdYes
  // then
  // begin
  // limparArrayBoolean(arrayLinhasDestacadas,0,299,False);
  // for I := 1 to 180 do
  // for J := 1 to 7 do
  // vVetor[I,J] := '';
  // EdtConsulta.Clear;
  // EdtSubTotal.Text := '0,00';
  // EdtDesconto.Text := LimpaEdtDesconto;
  // EdtTotal.Text    := '0,00';
  // edtValorBruto.text := '0,00';
  // vObs := '';
  // Limpa_Grid(SgDados);
  // atualizaEditQtdItens;
  // indiceClienteAtual:= CbxCliente.ItemIndex;
  /// /      CbxCliente.ItemIndex:= indiceClienteAtual;
  // end
  // else
  // begin
  // CbxCliente.ItemIndex:= indiceClienteAtual;
  // Exit;
  // end;
  // end
  // else
  // indiceClienteAtual:= CbxCliente.ItemIndex;
  if CbxCliente.ItemIndex <> -1 then
  begin
    PreencherCamposDoClienteSetadoNaCombo;
    // LblVista.caption  := FormatFloat('0.00',ADOQryCliente.Fieldbyname('vldescVista').AsFloat);
    // LblPrazo.caption  := FormatFloat('0.00',ADOQryCliente.Fieldbyname('vldescPrazo').AsFloat);
    // if rgOpcoes.ItemIndex <> 1 then
    // if (vAlteraCliente <> 'S') and (RgOpcoes.ItemIndex = 1) then // N IMPORTA O PREÇO DE ATACADO OU VAREJO ENTÃO N PRECISA LIMPAR A TELA DOS PRODUTOS    thiago
    // begin
    // LimpaGrid;
    // EdtTotal.Text    := '0,00';
    // edtValorBruto.text := '0,00';
    // EdtSubTotal.Text := '0,00';
    // EdtDesconto.Text := LimpaEdtDesconto;
    // end;
  end
  else
  begin
    // LblVista.caption   := '0,00';
    // LblPrazo.caption   := '0,00';
    EdtCdCliente.Text := '';
    EdtEndereco.Text := '';
    EdtApelido.Text := ''; // apelido
    vUF_Cliente := '';
  end;
end;

procedure TFrmPrincipalPreVenda.SBF5Click(Sender: TObject);
begin
  // listarUsuariosNaCombo;
  Monta_Combo;
  if (RgOpcoes.ItemIndex in [0, 2, 4]) then
    CbxCliente.Setfocus
  else
    EdtLancto.Setfocus;
  ADOQryCliente.open;
  ListBox1.Clear;
  ListBox1.Visible := false;
  Label11.Text := '0,00';
  Label13.Text := '__/__/____';
  Label15.Text := '0,00';
  LblReserva.Text := '0,00';
  AtualizaQryConsulta;
end;

procedure TFrmPrincipalPreVenda.EdtPrecoExit(Sender: TObject);
var
  vdesconto: Real;
  vAuxiPreco: Real;
  descontoAcimaLimite, descontoSemPermissao, descontoEmClienteAtacado: Boolean;
  i: Integer;
  permissao615 : string;
begin
  if StrToFloatDef(EdtQtd.Text, 0) <= 0 then
    exit;
  if (UpperCase(vEmpresa) = 'RURALPET') and (CbLote.Items.Count > 0) and (CbLote.ItemIndex = -1) then
  begin
    MessageDlg('Obrigatório selecionar um lote para esse item.', mtWarning, [mbOK], 0);
    exit;
  end;
  if (CbxCliente.ItemIndex < 0) then
  // and (UPPERCASE(vEmpresa) <> 'CAMARATUBA')
  begin
    Application.MessageBox('Informe o cliente', 'Atenção',
      mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
    LimparPesquisa;
    CbxCliente.Setfocus;
    exit;
  end;
  if (ADOSPConsulta.RecordCount = 0) then
  begin
    Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
    ShowMessage('Nenhum item foi selecionado');
    EdtConsulta.Setfocus;
    EdtConsulta.SelectAll;
    Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
    exit;
  end;
  IF (UpperCase(vEmpresa) = 'GAMA') and (trim(EdtCFOP.Text) = '') and EdtCFOP.Visible then
  begin
    Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
    ShowMessage('Preencha o campo CFOP');
    EdtCFOP.SelectAll;
    EdtCFOP.Setfocus;
    Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
    exit;
  end;
  if (UpperCase(vEmpresa) = 'TREVO') and
    ((StrToFloatDef(EdtPreco.Text, 0) > 0) and (StrToFloatDef(EdtQtd.Text,
    0) > 0)) and (edtLogin.Text = '') then
    if Solicitar_Login('S') = false then
    begin
      EdtConsulta.SelectAll;
      EdtConsulta.Setfocus;
      exit;
    end;
  if trim(EdtPreco.Text) = '' then
    EdtPreco.Text := FormatFloatQ(vCasasPreco, 0.0);
  if Length(EdtSubTotal.Text) < 1 then
    EdtSubTotal.Text := '0';
  EdtPreco.Text := FormatFloatQ(vCasasPreco, StrToFloat(EdtPreco.Text));
  // preco de venda
  vAuxiPreco := StrToFloat(FormatFloatQ(vCasasPreco, getValorVendaProduto));
  // ADOSPConsulta.FieldByName('Valor').AsFloat) );
  if vAuxiPreco > 0 then
    vdesconto := (1 - (StrToFloat(EdtPreco.Text) / vAuxiPreco)) * 100
  else
    vdesconto := 0;
  EdtDescUnit.Text := FormatFloat('0.00', vdesconto);
  if (StrToFloatDef(EdtDescUnit.Text, 0) > 0) and (vAtacadoVarejo = 'A') then
  // (UpperCase(vEmpresa) = 'CAMARATUBA')OR
  begin
    if vBloquearDescontoAtacado = True then
    begin
      Application.OnMessage := NaoProcessaMsg;
      MessageDlg('Desconto para clientes atacado está bloqueado.', mtWarning,
        [mbOK], 0);
      EdtPreco.Text := FormatFloatQ(vCasasPreco, getValorVendaProduto);
      // ADOSPConsulta.FieldByName('Valor').AsFloat);
      EdtDescUnit.Text := '0,00';
      EdtPreco.SelectAll;
      EdtPreco.Setfocus;
      Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
      exit;
    end
  end
  else if (StrToFloatDef(EdtDescUnit.Text, 0) > 0) and
    ((UpperCase(vEmpresa) = 'CARDOSOACESSORIOS')) then
  // (UpperCase(vEmpresa) = 'CAMARATUBA')OR
  begin
    if TNEGCliente.isCliente_Crediario(EdtCdCliente.Text) then
    begin
      Application.OnMessage := NaoProcessaMsg;
      MessageDlg('Desconto já é automático para clientes de crediário.',
        mtWarning, [mbOK], 0);
      EdtPreco.Text := FormatFloatQ(vCasasPreco, getValorVendaProduto);
      // ADOSPConsulta.FieldByName('Valor').AsFloat);
      EdtDescUnit.Text := '0,00';
      EdtPreco.SelectAll;
      EdtPreco.Setfocus;
      Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
      exit;
    end
  end else if (StrToFloatDef(EdtDescUnit.Text, 0) > 0) and
    (vDescontoClienteAuto = True) and
    (TNEGCliente.getPercentualDoPrecoComDescontoDecimal
    (StrToIntDef(EdtCdCliente.Text, 0)) < 1) then
  begin
    Application.OnMessage := NaoProcessaMsg;
    MessageDlg('Desconto já é automático para este cliente.', mtWarning, [mbOK], 0);
    EdtPreco.Text := FormatFloatQ(vCasasPreco, getValorVendaProduto);
    // ADOSPConsulta.FieldByName('Valor').AsFloat);
    EdtDescUnit.Text := '0,00';
    EdtPreco.SelectAll;
    EdtPreco.Setfocus;
    Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
    exit;
  end;
  if vLimitarDescontoFornecedor then
  begin
    if StrToFloatDef(EdtDescUnit.Text, 0) > GetLimiteDescontoFornecedor
      (StrToInt(EdtCdCliente.Text), ADOSPConsulta.FieldByName('Código').AsInteger) then
    begin
      Application.OnMessage := NaoProcessaMsg;
      MessageDlg('Desconto Máx definido pelo fornecedor é de ' +
        FormatFloat('0.00', GetLimiteDescontoFornecedor
        (StrToInt(EdtCdCliente.Text), ADOSPConsulta.FieldByName('Código')
        .AsInteger)) + '%', mtWarning, [mbOK], 0);
      EdtPreco.Text := FormatFloatQ(vCasasPreco, getValorVendaProduto);
      // ADOSPConsulta.FieldByName('Valor').AsFloat);
      EdtDescUnit.Text := '0,00';
      EdtPreco.SelectAll;
      EdtPreco.Setfocus;
      Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
      exit;
    end else
    begin
      if GetLimiteDescontoFornecedor(StrToInt(EdtCdCliente.Text),
        ADOSPConsulta.FieldByName('Código').AsInteger) <> 100 then
      begin
        EdtPreco.Text := FormatFloatQ(vCasasPreco, StrToFloat(EdtPreco.Text));
        EnviaProdutos;
        exit;
      end;
    end;
  end;
  // Não pode da desconto num produto em promoção
  // if (UpperCase(vEmpresa) = 'REZENDE') and
  // if (StrToFloat(EdtPreco.Text) < ADOSPConsulta.FieldByName('Valor').AsFloat - 0.1) and ((UPPERCASE(vEmpresa) = 'REZENDE') or (UpperCase(vEmpresa) = 'BELAVISTA') or (UPPERCASE(vEmpresa) = 'PROAUTO')) then
  if (StrToFloat(EdtPreco.Text) < getValorVendaProduto - 0.1) and
    ((UpperCase(vEmpresa) = 'REZENDE') or (UpperCase(vEmpresa) = 'BELAVISTA') or
    (UpperCase(vEmpresa) = 'PROAUTOOLD')) then
  begin
    // if (StrToFloat(EdtDescUnit.text) > 0.1) and ((ADOSPConsulta.FieldByName('dsPromocao').AsString = 'S') or
    // (ADOSPConsulta.FieldByName('dsPromocaoVarejo').AsString = 'S')) then begin
    Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
    // ShowMessage('Este item encontra-se em promoção. Portanto não é liberado nenhum desconto para o mesmo!');
    ShowMessage
      ('Não é possível vender este produto com preço menor do que o cadastro!');
    EdtPreco.Text := FormatFloatQ(vCasasPreco, getValorVendaProduto);
    // ADOSPConsulta.FieldByName('Valor').AsFloat);
    EdtDescUnit.Text := '0,00';
    EdtPreco.SelectAll;
    EdtPreco.Setfocus;
    Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
    exit;
  end;
  // if (StrToFloat(EdtDescUnit.Text) > 0) and (bloquearDescontoAtacado) and (vAtacadoVarejo = 'A')  then begin
  // //if (StrToFloat(EdtDescUnit.text) > 0.1) and ((ADOSPConsulta.FieldByName('dsPromocao').AsString = 'S') or
  // //                                             (ADOSPConsulta.FieldByName('dsPromocaoVarejo').AsString = 'S')) then begin
  // Application.OnMessage :=  FrmPrincipalPreVenda.NaoProcessaMsg;
  // //ShowMessage('Este item encontra-se em promoção. Portanto não é liberado nenhum desconto para o mesmo!');
  // Application.messagebox('Desconto não permitido: cliente atacado!','Atenção', MB_OK + MB_ICONWARNING + MB_APPLMODAL);
  // EdtPreco.Text:= FormatFloat('0.00',ADOSPConsulta.FieldByName('Valor').AsFloat);
  // EdtDescUnit.Text:= '0,00';
  // EdtPreco.SelectAll;
  // EdtPreco.SetFocus;
  // Application.OnMessage:=  FrmPrincipalPreVenda.ProcessaMsg;
  // exit;
  // end;
  // se o produto estiver em promoção, não pode dar desconto por item
  if ((ADOSPConsultaPRECO.AsCurrency <> ADOSPConsultaVALOR.AsCurrency) and
    (StrToFloat(EdtDescUnit.Text) > 0)) and (UpperCase(vEmpresa) <> 'KADU') then
  begin
    Application.MessageBox
      (Pchar('Não é possível dar desconto para um produto que está em promoção!'),
      'Atenção', mb_Ok + MB_ICONINFORMATION + MB_APPLMODAL);
    EdtPreco.Text := FormatFloatQ(vCasasPreco, getValorVendaProduto);
    // ADOSPConsulta.FieldByName('Valor').AsFloat);
    EdtDescUnit.Text := '0,00';
    EdtDescUnit.SelectAll;
    EdtDescUnit.Setfocus;
    exit;
  end;
  if UpperCase(vEmpresa) = 'PROAUTO' then
  begin
    if (StrToFloat(EdtDescUnit.Text) > vlDescontoVendedor) OR
      ((StrToFloat(EdtDescUnit.Text) > 0) and (bloquearDescontoAtacado) and
      (vAtacadoVarejo = 'A')) then
    begin // vPorcDesconto
      vFlag := '0';
      LiberaVanda;
    end;
  end else
  begin // existe o desconto no cadastro do cliente E está configurado para dar o desconto automático E o usuário está tentando dar mais desconto SEM permissão
//    if StrToCurrDef(EdtDescUnit.Text, 0) > 0 then
//      permissao615 := PERMISSAO('615', 'V');
    descontoAcimaLimite :=
      ((TNEGCliente.getDescontoPercentual(StrToInt(EdtCdCliente.Text)) > 0) AND
      (TNEGLoja.getConfiguracaoDescontoAutomaticoPorCliente) AND
      (StrToFloat(EdtDescUnit.Text) > 0) AND (PERMISSAO('615', 'V') = 'N')) OR
      ((StrtoFloat(FormatFloat('0.00',StrToFloatDef(EdtDescUnit.Text, 0))) > StrToFloat(FormatFloat('0.00',
      vPorcDesconto))) and (PERMISSAO('615', 'V') = 'N'));
      descontoSemPermissao := (((StrToFloat(EdtDescUnit.Text)) > 0) and
        (PERMISSAO('613', 'V') = 'N'));
    // usuário não tem permissão para dar desconto até o limite
    descontoEmClienteAtacado := ((StrToFloat(EdtDescUnit.Text) > 0) and
      (bloquearDescontoAtacado) and (vAtacadoVarejo = 'A') and
      (PERMISSAO('615', 'V') = 'N'));
    if descontoAcimaLimite then
    begin
      vFlag := '6';
      try
        if FrmCancelamentoVenda = nil then
          FrmCancelamentoVenda := TFrmCancelamentoVenda.Create(Application);
        FrmCancelamentoVenda.ShowModal;
        FrmPrincipalPreVenda.possuiPermissaoVenderAbaixoDoCusto := False;
        FreeAndNil(FrmCancelamentoVenda);
      except
        FreeAndNil(FrmCancelamentoVenda);
      end;
      if (liberouVenda = false) then
      begin
        EdtConsulta.SetFocus;
        exit;
      end;
    end else
  //  (descontoAcimaLimite OR descontoSemPermissao OR descontoEmClienteAtacado)
    if (descontoAcimaLimite OR descontoSemPermissao OR descontoEmClienteAtacado)
      and (TestaFinanceiroNaConfirmacao = false) then
    begin
      vFlag := '0';
      LiberaVanda;
      exit;
    end else
    begin
      if ((TNEGCliente.getDescontoPercentual(StrToInt(EdtCdCliente.Text)) > 0)
        AND (TNEGLoja.getConfiguracaoDescontoAutomaticoPorCliente) AND
        (StrToFloat(EdtDescUnit.Text) > 0)) OR
        ((StrToFloat(EdtDescUnit.Text)) > StrToFloat(FormatFloat('0.00',
        vPorcDesconto))) then
        Application.MessageBox(Pchar('Desconto acima do limite'), 'Atenção',
          mb_Ok + MB_ICONINFORMATION + MB_APPLMODAL);
    end;
  end;

  EdtPreco.Text := FormatFloatQ(vCasasPreco, StrToFloat(EdtPreco.Text));
  EnviaProdutos;

  HabilitaDesabilitaDesconto;
  EdtConsulta.SelectAll;
  // EdtConsulta.Clear;
end;

procedure TFrmPrincipalPreVenda.HabilitaDesabilitaDesconto;
var
  existeProdutoSemPromocaoEDesconto: Boolean;
  i: Integer;
begin
  if prevenda = nil then
    exit;
  // se só tiver um item e o mesmo estiver em promoção, desabilito o desconto no total
  if prevenda.itens.Count = 1 then
  begin
    if prevenda.itens[0].Promocao_desconto_Item = True then
    begin
      BtnAprazo.Enabled := false;
      EdtDesconto.Text := '0,00000';
      EdtDesconto.ReadOnly := True;
    end;
  end
  else
  begin
    existeProdutoSemPromocaoEDesconto := false;
    for i := 0 to prevenda.itens.Count - 1 do
    begin
      // primeiro verifico se o item esta em promocao       //depois verifico se o item não teve desconto
      if (prevenda.itens[i].Promocao_desconto_Item = false) and
        (prevenda.itens[i].precoVenda = prevenda.itens[i].precoBruto) then
      begin
        existeProdutoSemPromocaoEDesconto := True;
        Break;
      end;
    end;
    // se teve algum produto que não está em promoção ou nao teve desconto por item então libero o campo de desconto no total
    // só libero o campo de desconto no total se
    if ((existeProdutoSemPromocaoEDesconto) and
      ((UpperCase(vEmpresa) <> 'BG') and (UpperCase(vEmpresa) <> 'KADU') and (UpperCase(vEmpresa) <> 'MOTOPECAS') and (UpperCase(vEmpresa) <> 'PROAUTO') and (UpperCase(vEmpresa) <> 'CAMARATUBA')))
      or (((UpperCase(vEmpresa) = 'BG') or (UpperCase(vEmpresa) = 'KADU') or (UpperCase(vEmpresa) = 'MOTOPECAS') or (UpperCase(vEmpresa) = 'PROAUTO'))
      and (prevenda.descontoPercentual = 0)) then
    begin
      BtnAprazo.Enabled := True;
      EdtDesconto.Text := '0,00000';
      EdtDesconto.ReadOnly := false;
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.EdtQtdKeyPress(Sender: TObject; var Key: Char);
var
  Texto: string;
begin
  // na mega moveis, eles não querem q os vendedores vendam "Meio" produto, ou 0,5 sofá. kenneth
  if ((UpperCase(vEmpresa) = 'MEGA') or (UpperCase(vEmpresa) = 'BELAVISTA'))
  then
    ValidarInteiro(Key)
  else
  begin
    if (Key = Char(27)) then
      BtnCancelar.Click
    else
    begin
      Texto := TEdit(Sender).Text;
      if (TEdit(Sender).SelText = TEdit(Sender).Text) then
        Texto := '';
      ValidarNumero(Key, Texto);
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.edtReferenciaExit(Sender: TObject);
begin
  //
end;

procedure TFrmPrincipalPreVenda.EdtPrecoKeyPress(Sender: TObject;
  var Key: Char);
var
  Texto: string;
begin
  if (Key = Char(27)) then
    BtnCancelar.Click
  else
  begin
    Texto := TEdit(Sender).Text;
    if (TEdit(Sender).SelText = TEdit(Sender).Text) then
      Texto := '';
    ValidarNumero(Key, Texto);
  end;
end;

procedure TFrmPrincipalPreVenda.EdtSubTotalKeyPress(Sender: TObject;
  var Key: Char);
begin
  ValidarNumero(Key);
  if (Key = Char(27)) then
    BtnCancelar.Click;
end;

procedure TFrmPrincipalPreVenda.EdtSubTotalEnter(Sender: TObject);
begin
  vlTotalAnterior := StrToFloat(FormatFloat('0.00',
    StrToFloatDef(EdtSubTotal.Text, 0)));
end;

procedure TFrmPrincipalPreVenda.EdtSubTotalExit(Sender: TObject);
var
  diminuiuTotal: Boolean;
begin
  inherited;
  if chkbxEtiqueta.Checked = true then exit;
  // Se saiu do campo edtSubTotal para um campo diferente de edtDesconto, desativa o desconto
  if not(EdtSubTotal.ReadOnly or EdtDesconto.Focused) then
    DesativarCamposDescontoTotal;
  EdtSubTotal.Text := FormatFloat('0.00', StrToFloatDef(EdtSubTotal.Text, 0));
  // if (diminuiuTotal) and (bloquearDescontoAtacado) and (vAtacadoVarejo = 'A')  then
  // begin
  // Application.OnMessage:=  FrmPrincipalPreVenda.NaoProcessaMsg;
  // Application.messagebox('Desconto não permitido: cliente atacado!','Atenção', MB_OK + MB_ICONWARNING + MB_APPLMODAL);
  // EdtSubTotal.Text:= FormatFloat('0.00', vlTotalAnterior);
  // EdtSubTotal.selectAll;
  // EdtSubTotal.setFocus;
  // Application.OnMessage:= FrmPrincipalPreVenda.ProcessaMsg;
  // Exit;
  // end;
  if vCasasPreco > vLimiteCasasPreco then
    Recalcula_Desconto
    // recalcula o valor do desconto sem recalculoar o preço com desconto
    // e sem ajustar o número de casas decimais
  else
    Corrige_Desconto;
  // recalcula o desconto % e recalcula o preço com desconto,
  // para não dar diferença na hora de puxar no SPDV100 e no CUPOM
  diminuiuTotal := (StrToFloat(FormatFloat('0.00', vlTotalAnterior)) >
    StrToFloat(EdtSubTotal.Text));
  if diminuiuTotal then
  begin
    if (StrToFloatDef(EdtDesconto.Text, 0) > 0) and (vAtacadoVarejo = 'A') then
    // (UpperCase(vEmpresa) = 'CAMARATUBA')OR
    begin
      if vBloquearDescontoAtacado = True then
      begin
        Application.OnMessage := NaoProcessaMsg;
        MessageDlg('Desconto para clientes atacado está bloqueado.', mtWarning,
          [mbOK], 0);
        EdtDesconto.Text := '0,00';
        EdtDesconto.SelectAll;
        EdtDesconto.Setfocus;
        Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
        exit;
      end
    end // claudio: comentei de acordo com o atend 33920
    else if (StrToFloatDef(EdtDesconto.Text, 0) > 0) and
      ((UpperCase(vEmpresa) = 'CARDOSOACESSORIOS')) then
    // (UpperCase(vEmpresa) = 'CAMARATUBA')or
    begin
      if TNEGCliente.isCliente_Crediario(EdtCdCliente.Text) then
      begin
        Application.OnMessage := NaoProcessaMsg;
        MessageDlg('Desconto já é automático para clientes de crediário.',
          mtWarning, [mbOK], 0);
        EdtDesconto.Text := '0,00';
        EdtSubTotal.Text := FormatFloat('0.00', vlTotalAnterior);
        EdtSubTotal.Setfocus;
        Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
        exit;
      end;
    end
    else if (StrToFloatDef(EdtDesconto.Text, 0) > 0) and
      (vDescontoClienteAuto = True) and
      (TNEGCliente.getPercentualDoPrecoComDescontoDecimal
      (StrToIntDef(EdtCdCliente.Text, 0)) < 1) then
    begin
      Application.OnMessage := NaoProcessaMsg;
      MessageDlg('Desconto já é automático para este cliente.', mtWarning,
        [mbOK], 0);
      EdtDesconto.Text := '0,00';
      EdtSubTotal.Text := FormatFloat('0.00', vlTotalAnterior);
      EdtSubTotal.Setfocus;
      Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
      exit;
    end;
    if ExisteDescontoFornecedorInvalido then
    begin
      EdtDesconto.Text := '0,00';
      EdtSubTotal.Text := FormatFloat('0.00', vlTotalAnterior);
      EdtSubTotal.Setfocus;
      exit;
    end;
    if UpperCase(vEmpresa) = 'PROAUTO' then
    begin
      if (StrToFloat(EdtDesconto.Text) > vlDescontoVendedor) OR
        ((bloquearDescontoAtacado) and (vAtacadoVarejo = 'A')) then
      begin
        vFlag := '6';
        LiberaVanda;
      end;
    end
    else
    begin
      if ((StrtoFloat(FormatFloat('0.00',StrToFloatDef(EdtDesconto.Text, 0))) > vPorcDesconto) and
        (PERMISSAO('615', 'V') = 'N')) OR
        ((bloquearDescontoAtacado) and (vAtacadoVarejo = 'A')) OR
        (PERMISSAO('613', 'V') = 'N') then
      begin

        // valor total abaixo da soma do custo final
        if (StrToFloat(EdtDesconto.Text) > 0) AND
          (StrToFloat(EdtSubTotal.Text) < getSomaCustoFinal) AND
          TNEGLoja.getBloquearVendaAbaixoDoCustoFinal AND
          (PERMISSAO('631', 'V') = 'N') then
        begin
          if (possuiPermissaoVenderAbaixoDoCusto = True) or (FrmCancelamentoVenda.Possui_Permissao('631', 'V', cbxUsuario.Text,
            EdtUsuario.Text, False)) then
          begin
            Application.MessageBox(Pchar('Vendendo abaixo do custo final'),
              'Atenção', mb_Ok + MB_ICONINFORMATION + MB_APPLMODAL);
          end
          else
          begin
            try
              if FrmCancelamentoVenda <> nil then
                FreeAndNil(FrmCancelamentoVenda);
              FrmCancelamentoVenda := TFrmCancelamentoVenda.Create(self, '631',
                'V', possuiPermissaoVenderAbaixoDoCusto);
              FrmCancelamentoVenda.Copyright.caption :=
                '<<<<   Venda abaixo do custo final    >>>>';
              FrmCancelamentoVenda.ShowModal;
              FreeAndNil(FrmCancelamentoVenda);
            except
              FreeAndNil(FrmCancelamentoVenda);
            end;
          end;
          if (not possuiPermissaoVenderAbaixoDoCusto) then
          begin
            prevenda.descontoPercentual := 0;
            EdtDesconto.Text := '0,000';
            // EdtSubTotal.Text := EdtTotal.Text;
          end;
          Application.OnMessage := FormPrincipal.ProcessaMsg;
        end
        else
        begin
          vFlag := '6';
          LiberaVanda;
        end;
      end
      else if (StrToFloat(EdtDesconto.Text) > 0) AND
        (StrToFloat(EdtSubTotal.Text) < getSomaCustoFinal) AND
        TNEGLoja.getBloquearVendaAbaixoDoCustoFinal AND
        (PERMISSAO('631', 'V') = 'N') then
      begin
        if (possuiPermissaoVenderAbaixoDoCusto = True) or (FrmCancelamentoVenda.Possui_Permissao('631', 'V', cbxUsuario.Text,
          EdtUsuario.Text, False)) then
        begin
          Application.MessageBox(Pchar('Vendendo abaixo do custo final'),
            'Atenção', mb_Ok + MB_ICONINFORMATION + MB_APPLMODAL);
        end
        else
        begin
          try
            if FrmCancelamentoVenda <> nil then
              FreeAndNil(FrmCancelamentoVenda);
            FrmCancelamentoVenda := TFrmCancelamentoVenda.Create(self, '631', 'V',
              possuiPermissaoVenderAbaixoDoCusto);
            FrmCancelamentoVenda.Copyright.caption :=
              '<<<<   Venda abaixo do custo final    >>>>';
            FrmCancelamentoVenda.ShowModal;
            FreeAndNil(FrmCancelamentoVenda);
          except
            FreeAndNil(FrmCancelamentoVenda);
          end;
        end;
        if (not possuiPermissaoVenderAbaixoDoCusto) then
        begin
          prevenda.descontoPercentual := 0;
          EdtDesconto.Text := '0,000';
          // EdtSubTotal.Text := EdtTotal.Text;
        end;
        Application.OnMessage := FormPrincipal.ProcessaMsg;
      end
    end;
  end;
  EdtDescontoExit(Self);
end;

procedure TFrmPrincipalPreVenda.Recalcula_Desconto;
var
  varvdesc, varvlComDesc, varvlSemDesc: Real;
  vlBruto, vlLiquido, vlProdutos, vlDescPorc, temp: Real;
  i: Integer;
  x, y, T: Real;
  vlTemp: Currency;
  cont : integer;
begin
  vlBruto := 0;
  vlLiquido := 0;
  if prevenda = nil then
    exit;
  for i := 0 to prevenda.itens.Count - 1 do
  begin
    if prevenda.itens[i].Promocao_desconto_Item = True then
    begin
      vlTemp := (prevenda.itens[i].quantidade * prevenda.itens[i].precoVenda);
      vlBruto := vlBruto + SimpleRoundTo(vlTemp, -2);
    end
    else
    begin
      vlTemp := (prevenda.itens[i].quantidade * prevenda.itens[i].precoBruto);
      vlBruto := vlBruto + SimpleRoundTo(vlTemp, -2);
    end;
    vlLiquido := vlLiquido + prevenda.itens[i].SubTotal;
  end;
  vlLiquido := SimpleRoundTo(vlLiquido, -2);
  // vlBruto    := TNEGPrevenda.GetValorItensComPromocao(prevenda); //StrToFloat(EdtTotal.Text);
  if ((vlLiquido - StrToFloat(EdtSubTotal.Text)) > 0.005) or
    ((vlLiquido - StrToFloat(EdtSubTotal.Text)) < -0.005) then
    vlLiquido := StrToFloat(EdtSubTotal.Text);
  vlLiquido := SimpleRoundTo(vlLiquido + GetValorIPILiquido(prevenda), -2);
  vlProdutos := TNEGPrevenda.GetValorItensSemPromocao(prevenda) +
    GetValorIPIBruto(prevenda);
  vlBruto := vlBruto + GetValorIPIBruto(prevenda);
  // calculo o valor do desconto em porcentagem somente no valor referente aos produtos que não estão em promoção
  vlDescPorc := 0;
  if vlProdutos > 0 then
    vlDescPorc :=
      (((StrToFloat(FormatFloatQ(vCasasPreco, vlBruto)) -
      StrToFloat(FormatFloatQ(vCasasPreco, vlProdutos))) -
      (StrToFloat(FormatFloatQ(vCasasPreco, vlLiquido)) -
      StrToFloat(FormatFloatQ(vCasasPreco, vlProdutos)))) * 100) /
      StrToFloat(FormatFloatQ(vCasasPreco, vlProdutos));

  EdtDesconto.Text := FormatFloat('0.000000', vlDescPorc);
  EdtDescontoExit(self);
//  temp := StrToFloat(EdtSubTotal.Text);
//  if StrToFloat(EdtDesconto.Text) > 0 then begin
//    cont := 0;
//    while vlLiquido < temp do
//    begin
//      EdtDesconto.Text := FloatToStr(StrToFloat(EdtDesconto.Text) + 0.005);
//      EdtDescontoExit(self);
//      temp := StrToFloat(EdtSubTotal.Text);
//      cont := cont + 1;
//      if cont > 100 then break;
//    end;
//  end;
//  if StrToFloat(EdtDesconto.Text) > 0 then begin
//    cont := 0;
//    while StrToFloat(FormatFloat('0.00', vlLiquido)) >
//      StrToFloat(EdtSubTotal.Text) do
//    begin
//      EdtDesconto.Text := FloatToStr(StrToFloat(EdtDesconto.Text) - 0.0025);
//      EdtDescontoExit(self);
//      temp := StrToFloat(EdtSubTotal.Text);
//      cont := cont + 1;
//      if cont > 100 then break;
//    end;
//  end;

  if (StrToFloat(FormatFloat('0.00', vlLiquido)) <> StrToFloat(EdtSubTotal.Text)) and
   (StrtoFloatDef(EdtDesconto.Text,0) <> 0)
  then
  begin
    valorAjustar := StrToFloat(EdtSubTotal.Text) -
      StrToFloat(FormatFloat('0.00', vlLiquido));
    prevenda.itens[0].precoVenda := prevenda.itens[0].precoVenda -
      (valorAjustar / prevenda.itens[0].quantidade);
    EdtSubTotal.Text := FormatFloat('0.00', vlLiquido);
  end;

  // estava antes assim
  { if vCasasPreco > vLimiteCasasPreco then
    begin
    varvlComDesc := StrToFloat(EdtSubTotal.Text);
    varvlSemDesc := StrToFloat(EdtTotal.Text);

    if varvlSemDesc > 0 then
    begin
    varvdesc := (1-(varvlComDesc/varvlSemDesc))*100;
    EdtDesconto.Text := FormatFloat('0.00000',varvdesc);
    end;
    exit; //Ainda não estamos usando essa parte debaixo do código
    end
    else
    case vCasasPreco of   // preco de venda
    1: EdtDesconto.Text := FormatFloat('0.0',varvdesc);
    2: EdtDesconto.Text := FormatFloat('0.00',varvdesc);
    3: EdtDesconto.Text := FormatFloat('0.000',varvdesc);
    4: EdtDesconto.Text := FormatFloat('0.0000',varvdesc);
    5: EdtDesconto.Text := FormatFloat('0.00000',varvdesc);
    end;
  }
end;

procedure TFrmPrincipalPreVenda.Corrige_Desconto;
var
  vdesconto, vValor_total, vPreco_Desconto: Real;
begin
  // atribuo valores às variáves que vou usar na procedure para recalcular o juro
  vdesconto := StrToFloat(EdtDesconto.Text);
  vValor_total := StrToFloat(EdtTotal.Text);
  vPreco_Desconto := StrToFloat(EdtSubTotal.Text);
  // gera o desconto correto, com duas casas decimais
  Gera_Desconto_Correto(vPreco_Desconto, vdesconto, vValor_total, vCasasPreco);
  EdtDesconto.Text := FormatFloat('0.00', vdesconto);
  case vCasasPreco of // preco de venda
    1:
      EdtSubTotal.Text := FormatFloat('0.0', vPreco_Desconto);
    2:
      EdtSubTotal.Text := FormatFloat('0.00', vPreco_Desconto);
    3:
      EdtSubTotal.Text := FormatFloat('0.000', vPreco_Desconto);
    4:
      EdtSubTotal.Text := FormatFloat('0.0000', vPreco_Desconto);
    5:
      EdtSubTotal.Text := FormatFloat('0.00000', vPreco_Desconto);
  end;
end;

// preco_desconto ......: preço após o desconto
// Desconto_Atual ......: variável que vai receber o valor do deconto com duas casas decimais
// Valor_Total .........: Valor total da venda
// Casas_Decimais_Preco : Número de casas decimais do preço de acordo com a configuração do saef
procedure TFrmPrincipalPreVenda.Gera_Desconto_Correto(var Preco_Desconto: Real;
  var Desconto_Atual: Real; valor_Total: Real; casas_decimais: Integer);
var
  vdesconto, vPreco, vlBruto, descReal: Real;
  i: Integer;
begin
  // só é permitido aplicar desconto nos itens que não estão em promoção
  // vlBruto:= 0;
  // for I := 0 to prevenda.itens.Count - 1 do begin
  // if prevenda.itens[i].Promocao_desconto_Item = false then begin
  // vlBruto := vlBruto + prevenda.itens[i].quantidade * prevenda.itens[i].precoVenda;
  // end;
  // end;
  // valor_Total := vlBruto;
  // descReal := (vlBruto * StrToFloat(EdtDesconto.Text)) / 100;

  Desconto_Atual := (valor_Total - Preco_Desconto) * 100 / valor_Total;
  // calculando o desconto atual
  vdesconto := Arredonda_Pra_Cima(Desconto_Atual, casas_decimais);
  // arredondo o desconto para duas casas decimais
  vPreco := (1 - vdesconto / 100) * valor_Total;
  if vPreco <> Preco_Desconto then
  // se o novo preço com desconto for diferente do antigo, o antigo sai e fica o novo
  begin // porque senão gera uma diferença quando for recalcular o desconto no SPDV100 ou CUPOM FISCAL
    Preco_Desconto := vPreco; // atribuo o preço recalculado
    Desconto_Atual := vdesconto;
  end;
end;

function TFrmPrincipalPreVenda.GetFlagEmpresa: string;
begin
  result := UpperCase(vEmpresa);
end;

function TFrmPrincipalPreVenda.Arredonda_Pra_Cima(numero: Real;
  numero_de_casas: Integer): Real;
var
  Arred: Real;
begin
  case numero_de_casas of
    1:
      begin
        Arred := RoundTo(numero, -1);
        if Arred > numero then
          Arred := Arred - 0.1;
        result := Arred;
      end;
    2:
      begin
        Arred := RoundTo(numero, -2);
        if Arred > numero then
          Arred := Arred - 0.01;
        result := Arred;
      end;
    3:
      begin
        Arred := RoundTo(numero, -3);
        if Arred > numero then
          Arred := Arred - 0.001;
        result := Arred;
      end;
    4:
      begin
        Arred := RoundTo(numero, -4);
        if Arred > numero then
          Arred := Arred - 0.0001;
        result := Arred;
      end;
  else
    result := numero; // senão estiver entre 1 e 4, não arredonda
  end;
end;

procedure TFrmPrincipalPreVenda.moverCamposImpressao(var relOrcamento
  : TFrmRelOrcamentos; movimento: Integer);
begin
  with relOrcamento do
  begin
    RLLabel5.Left := RLLabel5.Left + movimento;
    RLLabel13.Left := RLLabel3.Left + movimento;
    RLDBText2.Left := RLDBText2.Left + movimento;

    QRLabel12.Left := QRLabel12.Left + movimento;
    RLLabel14.Left := RLLabel4.Left + movimento;
    QreUnidade.Left := QreUnidade.Left + movimento;

    QRLabel7.Left := QRLabel7.Left + movimento;
    RLLabel17.Left := RLLabel7.Left + movimento;
    QREQtd.Left := QREQtd.Left + movimento;

    QRLabel8.Left := QRLabel8.Left + movimento;
    RLLabel18.Left := RLLabel8.Left + movimento;
    QREPreco.Left := QREPreco.Left + movimento;
    RLLblUnitario.Left := RLLblUnitario.Left + movimento;

    RLLabel2.Left := RLLabel2.Left + movimento;
    RLLabel19.Left := RLLabel9.Left + movimento;
    RLDBResult3.Left := RLDBResult3.Left + movimento;
    RLLblDesconto.Left := RLLblDesconto.Left + movimento;
  end;
end;

procedure TFrmPrincipalPreVenda.ImprimeOrcamento(valor: Integer;
  enviar_email: Boolean = false);
var
  vcdpessoa: String[01];
  i: Integer;
  varQtdItens: Integer;
  email: string;
  envioOK: Boolean;
  qry: TADOQuery;
begin
  // Imprime Somente o Orçamento
  if vPAFECF and ((vOrcamento = 'N') or (RgOpcoes.ItemIndex in [0, 4])) then
    exit;
  if vMemo.Text <> '' then
  begin
    if (UpperCase(vEmpresa) <> 'JNUNES') and (MessageDlg('Imprimir o campo OBSERVAÇÃO?', mtConfirmation, [mbYes, mbNo], 0) = mrNo) then
      vMemo.Clear;
  end;
  FrmRelOrcamentos := TFrmRelOrcamentos.Create(self); // Cria o formulário
  qry := TADOQuery.Create(nil);
  with qry do
  begin
    Connection := DModulo.Conexao;
    sql.Text := 'select dsCGC from CONFIGURACAO WITH (NOLOCK)';
    open;
    if (RecordCount > 0) and (SoNumeros(FieldByName('dsCGC').AsString) = '08872144000140') then // HIPERMOVEIS
    begin
      FrmRelOrcamentos.qrlInstragran.Visible := True;
      FrmRelOrcamentos.qrlfacebook.Visible   := True;
    end else
    begin
      FrmRelOrcamentos.qrlInstragran.Visible := False;
      FrmRelOrcamentos.qrlfacebook.Visible   := False;
    end;
  end;
  // FrmRelOrcamentos.QreQtd.DisplayMask      := TNEGLoja.displayFormat(vCasasQtd);
  // //FrmRelOrcamentos.RLDBResult1.DisplayMask := TNEGLoja.displayFormat(vCasasPreco);
  // FrmRelOrcamentos.QrePreco.DisplayMask    := TNEGLoja.displayFormat(vCasasPreco);

  if dsCGC = '10305634000106' then      // d rios
  begin
    FrmRelOrcamentos.RLDBText1.DataField := 'cdFabricante';
    FrmRelOrcamentos.RLLabel1.Caption    := 'C. Barras';
  end;
  if (UpperCase(vEmpresa) = 'ATIVA') then
  begin
    FrmRelOrcamentos.RLLabel1.Caption := 'Prateleira';
    FrmRelOrcamentos.RLDBText1.DataField := 'dsPrateleira';
  end;
  if (UpperCase(vEmpresa) = 'MOSR') then
  begin
    FrmRelOrcamentos.QREOrcamento.Font.Size := 11;
    FrmRelOrcamentos.QreRota.Visible := True;
    FrmRelOrcamentos.QreRota2.Visible := True;
    FrmRelOrcamentos.RLLinhaProduto.Visible := True;
    // solicitou para que esses campos não aparecam

    FrmRelOrcamentos.RLDBResult3.Visible := False;
    FrmRelOrcamentos.QREPreco.Visible  := False;
    FrmRelOrcamentos.QRETotal.Visible  := False;
    FrmRelOrcamentos.QRLabel8.Visible  := False;
    FrmRelOrcamentos.RLLabel2.Visible  := False;
    FrmRelOrcamentos.QRLabel9.Visible  := False;
    FrmRelOrcamentos.RLLabel18.Enabled := false;
    FrmRelOrcamentos.RLLabel18.Visible := False;
    FrmRelOrcamentos.RLLabel19.Visible := False;
    FrmRelOrcamentos.RLLabel20.Visible := False;

  end;
  if (UpperCase(vEmpresa) = 'LAMARAO') then
  begin
    FrmRelOrcamentos.RLDBText6.Visible := True;
    FrmRelOrcamentos.RLLabel11.Visible := True;
    FrmRelOrcamentos.QRLabel6.Visible  := True;
    FrmRelOrcamentos.QreUnidade.Visible := false;
    FrmRelOrcamentos.RLLabel14.Visible := false;
    FrmRelOrcamentos.QRLabel12.Visible := false;
    FrmRelOrcamentos.RLDBText2.Left := FrmRelOrcamentos.RLDBText2.Left + 32;
    FrmRelOrcamentos.RLLabel13.Left := FrmRelOrcamentos.RLLabel13.Left + 32;
    FrmRelOrcamentos.RLLabel5.Left  := FrmRelOrcamentos.RLLabel5.Left + 32;
    FrmRelOrcamentos.RlDescricao.width  := 228;
    FrmRelOrcamentos.QREDescricao.width := 228;
  end else
  begin
    FrmRelOrcamentos.RLLabel23.Left := FrmRelOrcamentos.RLLabel11.Left;
    FrmRelOrcamentos.RLLabel24.Left := FrmRelOrcamentos.QRLabel6.Left;
    FrmRelOrcamentos.RlDescricao.Left := FrmRelOrcamentos.RLDBText6.Left;
    FrmRelOrcamentos.QREDescricao.Left := FrmRelOrcamentos.RLDBText6.Left;
    FrmRelOrcamentos.RlDescricao.width := 262;
    FrmRelOrcamentos.QREDescricao.width := 262;
  end;
  if (UpperCase(vEmpresa) = 'JNUNES') then
    FrmRelOrcamentos.QREDescricao.DataField := 'dsServico';
  if UpperCase(vEmpresa) = 'BELAVISTA' then
  // Hiper móveis pediu p ficar envertido o local do campo para o cliente e loja assinarem.
  begin
    FrmRelOrcamentos.QRLblEmpresa2.caption := 'Cliente';
    FrmRelOrcamentos.QRLabel18.caption := 'Empresa';
  end;
  // if (UpperCase(vEmpresa) = 'BELAVISTA') then  // esse cliente quer q saia o desconto em porcentagem
  // begin
  // FrmRelOrcamentos.RLLabel3.Visible := True;
  // FrmRelOrcamentos.lblPorcDesconto.Visible := True;
  // end;
  if (vOcultaDesconto = 'S') then
  begin
    FrmRelOrcamentos.RLDBResult3.DataField := '';
    FrmRelOrcamentos.RLDBResult3.DataFormula :=
      '(vlPreco-((vlPreco*nrDesconto)/100))';
  end;
  FrmRelOrcamentos.RLBand1.height := 185;
  FrmRelOrcamentos.RLBPAF.height := 0;
  FrmRelOrcamentos.RLBand3.height := 92;
  { Se for HOSPITALAR troco a coluna de Prateleira por Lote. }

  if (usarLoteValidade = True) then // and (UpperCase(vEmpresa) <> 'ATIVAOLD')
  begin
    FrmRelOrcamentos.RLLabel5.caption  := ''; // 'Validade    Lote';
    FrmRelOrcamentos.RLLabel13.caption := ''; // 'Validade    Lote';
    FrmRelOrcamentos.RLLabel24.Caption := 'Descrição \ Validade \  Lote';
    FrmRelOrcamentos.RLDBText2.AutoSize := True;
    FrmRelOrcamentos.RLDBText2.DataField := 'nrLote';
    FrmRelOrcamentos.RLBand2.height := 27;
    FrmRelOrcamentos.RLDBText2.Top := 13;
    FrmRelOrcamentos.RLDBText2.left := FrmRelOrcamentos.RLDBText6.Left;;   // ficará embaixo da descrição
    FrmRelOrcamentos.RLDBText2.Alignment := taLeftJustify;
    FrmRelOrcamentos.RlDescricao.width := 362;
    FrmRelOrcamentos.QREDescricao.width := 362;
    FrmRelOrcamentos.RLLabel15.Left := FrmRelOrcamentos.RLLabel23.Left + 50;
//    FrmRelOrcamentos.RLDBText2.DataFormula := 'nrLote dsValidade';
  end;
  varQtdItens := StrToIntDef(edtQtdItens.Text, 0);
  if (varQtdItens > 13) then
    // if MessageDlg('Imprimir em meia folha?',mtConfirmation,[mbYes,mbNo],0) = mrNo then
    FrmRelOrcamentos.QrMdRel.PageSetup.PaperHeight := 297;
  // FrmRelOrcamentos.QryRelDados.Active := True;
  With FrmRelOrcamentos.ADOSPRelDados do
  begin
    Close;
    Parameters.ParamByName('@DSLANCAMENTO').Value := EdtLancto.Text;
    Parameters.ParamByName('@CODIGO').Value := EdtCdCliente.Text;
    if (UpperCase(vEmpresa) = 'TRESLEOES') then
      Parameters.ParamByName('@FLAG').Value := 3
      // SELECT DO ORCAMENTO ORDENANDO OS ITENS PELA DESCRIÇÃO
    else
      Parameters.ParamByName('@FLAG').Value := 2;
    // INDICA Q A STORED PROCEDURE RODA PARA SELECT DOS ORCAMENTOS
    Parameters.ParamByName('@ORDEM').Value :=
      TNEGLoja.getConfiguracaoOrdemImpressaoPreVenda;
    open;
  end;
  FrmRelOrcamentos.RLPDFFilter1.FileName :=
    Pchar(ExtractFilePath(Application.ExeName) +
    FrmRelOrcamentos.ADOSPRelDados.FieldByName('nrOrcamento').AsString
    + '.pdf');
  if (UpperCase(vEmpresa) = 'CARIOCA') or (UpperCase(vEmpresa) = 'ANADRI') or (UpperCase(vEmpresa) = 'GAMA') or
    ((UpperCase(vEmpresa) = 'MEGA') and (vOrcamento = 'O')) then
  begin
    FrmRelOrcamentos.RlDescricao.Visible := True;
    FrmRelOrcamentos.RlDescricao.Transparent := False;
    FrmRelOrcamentos.QREDescricao.Visible := False;
    FrmRelOrcamentos.QREDescricao.Transparent := True;
  end else if (UpperCase(vEmpresa) = 'TELESOM') then
  begin
    FrmRelOrcamentos.RLSystemInfo2.Info := TRLInfoType(1);
  end;
  if vOcultaReferenciaNaImpressao then
  begin
    FrmRelOrcamentos.RLLabel1.Visible := false;
    FrmRelOrcamentos.RLDBText1.Visible := false;
    moverCamposImpressao(FrmRelOrcamentos, FrmRelOrcamentos.RLLabel1.Left -
      FrmRelOrcamentos.QRLabel6.Left);
    FrmRelOrcamentos.QRLabel6.Left := FrmRelOrcamentos.RLLabel1.Left;
    FrmRelOrcamentos.QREDescricao.Left := FrmRelOrcamentos.RLLabel1.Left;
  end;
  with FrmRelOrcamentos.ADOQryCliente do
  begin
    sql.Text :=
      'Select Distinct P.cdPessoa, P.nmPessoa, E.dsUf, UPPER(E.nmLogradouro) AS nmLogradouro, '
      + 'E.dsBairro,E.dsCidade,E.dsCep,P.Existir,E.dsUF,E.dsComplemento,E.nrNumero,C.dsPrevenda,'
      + 'G.dsRegiao                                                                             '
      + 'From Pessoa P WITH (NOLOCK), Endereco E WITH (NOLOCK),                                 '
      + 'Cliente C WITH (NOLOCK) left join Regiao G WITH (NOLOCK) on C.cdRegiao = G.cdRegiao    '
      + 'Where P.cdPessoa = E.cdPessoa and P.cdPessoa = C.cdPessoa and P.cdPessoa = :CDPESSOA   ';
    Parameters.ParamByName('CDPESSOA').Value := EdtCdCliente.Text;
    open;
    if FieldByName('Existir').AsString = 'F' then
      vcdpessoa := 'F'
    else
      vcdpessoa := 'J';
    if vPAFECF then
      FrmRelOrcamentos.LblDenoDest.caption := 'Nome: ' + FieldByName('cdPessoa')
        .AsString + ' - ' + FieldByName('nmPessoa').AsString
    else
      FrmRelOrcamentos.QrlCliente.caption := FieldByName('cdPessoa').AsString +
        ' - ' + FieldByName('nmPessoa').AsString;
    if UpperCase(vEmpresa) = 'CARIOCA' then
    // carioca n quer q imprima os dados do cliente
    begin
      FrmRelOrcamentos.QrlEndereco.caption := ' ';
      FrmRelOrcamentos.QrlCep.caption := ' ';
      FrmRelOrcamentos.QrlCidade.caption := ' ';
      FrmRelOrcamentos.QrlBairro.caption := ' ';
      FrmRelOrcamentos.QrlComp.caption := ' ';
      FrmRelOrcamentos.QrlUf.caption := 'UF: ';
    end else
    begin
      FrmRelOrcamentos.QrlEndereco.caption :=
        FieldByName('nmLogradouro').AsString;
      if FieldByName('nrNumero').AsString <> '' then
        FrmRelOrcamentos.QrlEndereco.caption :=
          FrmRelOrcamentos.QrlEndereco.caption + ', ' +
          FieldByName('nrNumero').AsString;
      FrmRelOrcamentos.QrlCep.caption    := FieldByName('dsCep').AsString;
      FrmRelOrcamentos.QrlCidade.caption := FieldByName('dsCidade').AsString;
      FrmRelOrcamentos.QrlBairro.caption := FieldByName('dsBairro').AsString;
      FrmRelOrcamentos.QrlComp.caption   := FieldByName('dsComplemento').AsString;
      FrmRelOrcamentos.QrlUf2.caption    := FieldByName('dsUf').AsString;
      FrmRelOrcamentos.QreRota2.caption  := FieldByName('dsRegiao').AsString;
    end;
    // FrmRelOrcamentos.QRLabel21.Caption   := FormatFloat('0.00',StrToFloat(EdtTotal.Text) - StrToFloat(EdtSubTotal.Text));
    sql.Text := 'Select distinct nmTelefone From Telefone WITH (NOLOCK) ' +
      'Where cdPessoa = :CDPESSOA ';
    Parameters.ParamByName('CDPESSOA').Value := EdtCdCliente.Text;
    open;
    FrmRelOrcamentos.QrlTelefone.caption := FieldByName('nmTelefone').AsString;
    if vcdpessoa = 'F' then
    begin
      sql.Text := 'Select dsCpf,dsIdentidade,dsNaturalidade from P_fisica ' +
        'WITH (NOLOCK) Where cdPessoa = ' + EdtCdCliente.Text + ' ';
      open;
      FrmRelOrcamentos.rlApelido.caption := ' - ' +
        FieldByName('dsnaturalidade').AsString;
      FrmRelOrcamentos.QrlCPF.caption := 'CPF/CNPJ: ' +
        FieldByName('dsCpf').AsString;
      FrmRelOrcamentos.QrlRG.caption := 'RG/IE: ' +
        FieldByName('dsIdentidade').AsString;
      if vPAFECF then
        FrmRelOrcamentos.RLLCNPJ_Dest.caption := 'CPF/CNPJ: ' +
          FieldByName('dsCpf').AsString;
    end else
    begin
      sql.Text :=
        'Select CGC,dsInscricaoEstadual from P_Juridica WITH (NOLOCK) ' +
        'Where cdPessoa = ' + EdtCdCliente.Text + '       ';
      open;
      FrmRelOrcamentos.QrlCPF.caption := 'CPF/CNPJ: ' +
        FieldByName('CGC').AsString;
      FrmRelOrcamentos.QrlRG.caption := 'RG/IE: ' +
        FieldByName('dsInscricaoEstadual').AsString;
      if vPAFECF then
        FrmRelOrcamentos.RLLCNPJ_Dest.caption := 'CPF/CNPJ: ' +
          FieldByName('CGC').AsString;
    end;
    if UpperCase(vEmpresa) = 'CARIOCA' then
    // carioca n quer q imprima os dados do cliente
    begin
      FrmRelOrcamentos.QrlCPF.caption := 'CPF/CNPJ: ';
      FrmRelOrcamentos.QrlRG.caption := 'RG/IE: ';
    end;
  end;
  FrmRelOrcamentos.AdoQryOrcamento.Parameters.ParamByName('nrOrcamento').Value := EdtLancto.Text;
  FrmRelOrcamentos.AdoQryOrcamento.open;
  if (UpperCase(vEmpresa) = 'TELESOM') then
    FrmRelOrcamentos.QrlDtHR.caption :=
      DateToStr(DateOf(FrmRelOrcamentos.AdoQryOrcamento.FieldByName('hrHora')
      .AsDateTime))
  else if (SoNumeros(dsCGC) = '03643774000129') then
  // esse cliente Torrone quer q a data fique aberta
    FrmRelOrcamentos.QrlDtHR.caption :=
      FrmRelOrcamentos.AdoQryOrcamento.FieldByName('dtEmissao').AsString
  else
    FrmRelOrcamentos.QrlDtHR.caption :=
      FrmRelOrcamentos.AdoQryOrcamento.FieldByName('hrHora').AsString;
  FrmRelOrcamentos.AdoQryOrcamento.Close;
  if vPAFECF then
  begin
    if RgOpcoes.ItemIndex = 0 then
      FrmRelOrcamentos.QRLblTitulo2.caption := 'Pré-Venda'
    else if RgOpcoes.ItemIndex = 1 then
    begin
      if vOrcamento = 'O' then
        FrmRelOrcamentos.QRLblTitulo2.caption := 'Orçamento'
      else if vOrcamento = 'N' then
        FrmRelOrcamentos.QRLblTitulo2.caption := 'Pré-Venda'
    end else if RgOpcoes.ItemIndex = 2 then
      FrmRelOrcamentos.QRLblTitulo2.caption := 'Orçamento'
    else if RgOpcoes.ItemIndex = 4 then
      FrmRelOrcamentos.QRLblTitulo2.caption := 'Simples Remessa';
  end
  else
  begin
    if RgOpcoes.ItemIndex = 0 then
      FrmRelOrcamentos.QRLblTitulo.caption := 'Pré-Venda'
    else if RgOpcoes.ItemIndex = 1 then
    begin
      if vOrcamento = 'O' then
        FrmRelOrcamentos.QRLblTitulo.caption := 'Orçamento'
      else if vOrcamento = 'N' then
        FrmRelOrcamentos.QRLblTitulo.caption := 'Pré-Venda'
    end
    else if RgOpcoes.ItemIndex = 2 then
      FrmRelOrcamentos.QRLblTitulo.caption := 'Orçamento'
    else if RgOpcoes.ItemIndex = 4 then
      FrmRelOrcamentos.QRLblTitulo.caption := 'Simples Remessa';
    if CbPrevisao.Checked = True then
      FrmRelOrcamentos.QRLblPrevisao.caption := 'Previsão de Entrega: ' +
        DateToStr(DtLancto.Date)
    else
      FrmRelOrcamentos.QRLblPrevisao.Enabled := false;
  end;
  if (UpperCase(vEmpresa) = 'LLPARAFUSOS') then
  begin
    FrmRelOrcamentos.QRLblTitulo.caption := 'Orçamento';
    FrmRelOrcamentos.QrMdRel.PrintDialog := True;
  end;
  FrmRelOrcamentos.QrlCnpj.caption := 'CNPJ: ' +
    FrmRelOrcamentos.ADOQryConfig.FieldByName('dsCgc').AsString + '     I.E.: '
    + FrmRelOrcamentos.ADOQryConfig.FieldByName('dsInscricao').AsString;
  case valor of
    0:
      FrmRelOrcamentos.RlblFormaPgto.caption := 'Forma Pgto: a vista';
    1:
      FrmRelOrcamentos.RlblFormaPgto.caption := 'Forma Pgto: a prazo';
    2:
      FrmRelOrcamentos.RlblFormaPgto.caption := 'Forma Pgto: cartao a vista';
    3:
      FrmRelOrcamentos.RlblFormaPgto.caption := 'Forma Pgto: cartao parcelado';
    4:
      FrmRelOrcamentos.RlblFormaPgto.caption := 'Forma Pgto: cheque pré';
    5:
      FrmRelOrcamentos.RlblFormaPgto.caption := 'Forma Pgto: entrada + prazo';
    6:
      FrmRelOrcamentos.RlblFormaPgto.caption := 'Forma Pgto: entrada + cartao';
    7:
      FrmRelOrcamentos.RlblFormaPgto.caption := 'Forma Pgto: entrada + ch pré';
    12:
      FrmRelOrcamentos.RlblFormaPgto.caption := 'Forma Pgto: Cheque a Vista';
    13:
      FrmRelOrcamentos.RlblFormaPgto.caption := 'Forma Pgto: Cartão Débito';
    14:
      FrmRelOrcamentos.RlblFormaPgto.caption := 'Forma Pgto: Deposito/Transferencia/Pix';
    15:
      FrmRelOrcamentos.RlblFormaPgto.caption := 'Forma Pgto: Boleto Bancário';
  else
    FrmRelOrcamentos.RlblFormaPgto.caption := 'Forma Pgto: a vista';
  end;
  // case vCasasQtd of   // preco de venda
  // 0: frmRelOrcamentos.QREQtd.DisplayMask := '#,##0';
  // 1: frmRelOrcamentos.QREQtd.DisplayMask := '#,##0.0';
  // 2: frmRelOrcamentos.QREQtd.DisplayMask := '#,##0.00';
  // 3: frmRelOrcamentos.QREQtd.DisplayMask := '#,##0.000';
  // 4: frmRelOrcamentos.QREQtd.DisplayMask := '#,##0.0000';
  // 5: frmRelOrcamentos.QREQtd.DisplayMask := '#,##0.00000';
  // end; // case
  // case vCasasPreco of   // preco de venda
  // 1:
  // begin
  // frmRelOrcamentos.QREPreco.DisplayMask := '#,##0.0';
  // frmRelOrcamentos.RLDBResult3.DisplayMask := '#,##0.0';
  // end;
  // 2:
  // begin
  // frmRelOrcamentos.QREPreco.DisplayMask := '#,##0.00';
  // frmRelOrcamentos.RLDBResult3.DisplayMask := '#,##0.00';
  // end;
  // 3:
  // begin
  // frmRelOrcamentos.QREPreco.DisplayMask := '#,##0.000';
  // frmRelOrcamentos.RLDBResult3.DisplayMask := '#,##0.000';
  // end;
  // 4:
  // begin
  // frmRelOrcamentos.QREPreco.DisplayMask := '#,##0.0000';
  // frmRelOrcamentos.RLDBResult3.DisplayMask := '#,##0.0000';
  // end;
  // 5:
  // begin
  // frmRelOrcamentos.QREPreco.DisplayMask := '#,##0.00000';
  // frmRelOrcamentos.RLDBResult3.DisplayMask := '#,##0.00000';
  // end;
  // end; //case
  // if valor <> 10 then  //só imprime o campo memo se vir a impressão a partir do formulário q solicita forma de pagamento
  if (vMemo <> nil) then
    FrmRelOrcamentos.RLMemo1.Lines := vMemo.Lines;
//  if Label10.Caption = 'Observação' then
//    FrmRelOrcamentos.RLMemo1.Lines.Add(EdtApelido.Text);
  with FrmRelOrcamentos.ADOQryCliente do
  begin
    sql.Text :=
      'SELECT ISNULL(P.nmPessoa,'''') NOME FROM Pessoa P with (nolock)       '+
      'INNER JOIN Profissional PR with (nolock) ON P.cdPessoa = PR.cdPessoa  '+
      'INNER JOIN Orcamento O with (nolock) ON O.cdProfissional = P.cdPessoa '+
      'WHERE O.nrOrcamento = :NRORCAMENTO ';
    Parameters.ParamByName('NRORCAMENTO').Value := EdtLancto.Text;
    open;
    if RecordCount > 0 then
      if FieldByName('NOME').AsString <> '' then
        FrmRelOrcamentos.RLMemo1.Lines.Add('Profissional: ' +
          FieldByName('NOME').AsString);
    Close;
  end;
  if (vTipoImp = '1') then // or (RgOpcoes.ItemIndex = 2) then // ou orcamento
  begin
    FrmRelOrcamentos.QrMdRel.PreviewModal;
    if enviar_email = True then
    begin
      FrmRelOrcamentos.RLPDFFilter1.ShowProgress := false;
      FrmRelOrcamentos.RLPDFFilter1.FilterPages(FrmRelOrcamentos.QrMdRel.Pages);
      Repeat
        FrmFormaPag.pnlAguardaEnvioEmail.Visible := false;
        email := InputBox('Envio por e-mail',
          'Digite o e-mail do destinatário', '');
        if trim(email) <> '' then
        begin
          FrmFormaPag.pnlAguardaEnvioEmail.Visible := True;
          FrmFormaPag.pnlAguardaEnvioEmail.Refresh;
          envioOK := Envia_Email(vOrcamento,
            Pchar(ExtractFilePath(Application.ExeName) + EdtLancto.Text +
            '.pdf'), email, EdtLancto.Text);
          FrmFormaPag.pnlAguardaEnvioEmail.Visible := false;
        end else
          envioOK := True;
        if envioOK = false then
          if MessageDlg('Deseja tentar enviar o e-mail novamente?',
            mtConfirmation, [mbYes, mbNo], 0) = mrNo then
            envioOK := True;
      Until envioOK = True;
    end;
    DeleteFile(Pchar(ExtractFilePath(Application.ExeName) + EdtLancto.Text
      + '.pdf'));
    FrmRelOrcamentos.Free;
  end else
  begin
    try
      // FrmRelOrcamentos.QrMdRel.Print
      // FrmRelOrcamentos.QRMdRel.Printdialog := True;
      // coloca a impressao como default DOS para as empresas que imprime em matricial
      if vTipoImpressora = '' then
        FrmRelOrcamentos.QrMdRel.DefaultFilter := FrmRelOrcamentos.Qualidade_Dos
      else
        FrmRelOrcamentos.QrMdRel.DefaultFilter := FrmRelOrcamentos.Padrao;
      // imprime na impressora jato e lase ou matricial
      if vTipoImpressora = 'S' then
      begin
        FrmRelOrcamentos.QrMdRel.PageSetup.PaperHeight := 297;
        FrmRelOrcamentos.QrMdRel.PageSetup.PaperWidth := 210;
      end else
      begin
        FrmRelOrcamentos.QrMdRel.PageSetup.PaperHeight := 140;
        FrmRelOrcamentos.QrMdRel.PageSetup.PaperWidth := 210;
      end;
      if vPreVisualizarPrevenda = 'S' then
        FrmRelOrcamentos.QrMdRel.PreviewModal;
      if enviar_email = True then
      begin
        FrmRelOrcamentos.RLPDFFilter1.ShowProgress := false;
        FrmRelOrcamentos.RLPDFFilter1.FilterPages
          (FrmRelOrcamentos.QrMdRel.Pages);
        Repeat
          FrmFormaPag.pnlAguardaEnvioEmail.Visible := false;
          email := InputBox('Envio por e-mail',
            'Digite o e-mail do destinatário', '');
          if trim(email) <> '' then
          begin
            FrmFormaPag.pnlAguardaEnvioEmail.Visible := True;
            FrmFormaPag.pnlAguardaEnvioEmail.Refresh;
            envioOK := Envia_Email(vOrcamento,
              Pchar(ExtractFilePath(Application.ExeName) + EdtLancto.Text +
              '.pdf'), email, EdtLancto.Text);
            FrmFormaPag.pnlAguardaEnvioEmail.Visible := false;
          end else
            envioOK := True;
          if envioOK = false then
            if MessageDlg('Deseja tentar enviar o e-mail novamente?',
              mtConfirmation, [mbYes, mbNo], 0) = mrNo then
              envioOK := True;
        Until envioOK = True;
      end;
      if vPreVisualizarPrevenda = 'N' then
      begin
        if (vPrintSetup = 'S') then
        begin
          FrmRelOrcamentos.QrMdRel.DefaultFilter := FrmRelOrcamentos.Padrao;
          FrmRelOrcamentos.QrMdRel.PrintDialog := True;
          if (trim(vQtdPrint) <> '') then
          begin
            for i := 1 to StrToInt(vQtdPrint) do
            begin
              FrmRelOrcamentos.QrMdRel.DefaultFilter := FrmRelOrcamentos.Padrao;
              FrmRelOrcamentos.QrMdRel.Print;
            end;
          end else
            FrmRelOrcamentos.QrMdRel.Print;
        end else
        begin
          if (trim(vQtdPrint) <> '') then
          begin
            for i := 1 to StrToInt(vQtdPrint) do
            begin
              FrmRelOrcamentos.QrMdRel.DefaultFilter := FrmRelOrcamentos.Padrao;
              FrmRelOrcamentos.QrMdRel.PrintDialog := false;
              FrmRelOrcamentos.QrMdRel.Print;
            end;
          end else
            FrmRelOrcamentos.QrMdRel.Print;
        end;
      end;
      DeleteFile(Pchar(ExtractFilePath(Application.ExeName) + EdtLancto.Text
        + '.pdf'));
      FrmRelOrcamentos.Free;
    except
      exit;
      // Application.OnMessage := FormPrincipal.ProcessaMsg;

      // Limpar_Tela;
      // RgOpcoes.ItemIndex := 0;
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.ImprimeOrcamento2(valor: Integer);
var
  vcdpessoa: String[01];
  i: Integer;
  varQtdItens: Integer;
  email: string;
  envioOK: Boolean;
begin
  if vMemo.Text <> '' then
  begin
    if (UpperCase(vEmpresa) <> 'JNUNES') and
      (MessageDlg('Imprimir o campo OBSERVAÇÃO?', mtConfirmation, [mbYes, mbNo],
      0) = mrNo) then
      vMemo.Clear;
  end;
  frmRelOrcamentos40 := TfrmRelOrcamentos40.Create(self); // Cria o formulário
  if TNEGLoja.ImprimirComprovantePreVendaDetalhado = False then
  begin
//    frmRelOrcamentos40.RLBand2.height := 27;
  end;
    if TNEGLoja.getdsOcultaReferenciaConfiguracao = False then
    begin
      frmRelOrcamentos40.RLDBText2.Visible := False;
      frmRelOrcamentos40.RLLabel7.Visible  := False;
      frmRelOrcamentos40.RLDBText2.Visible := False;
      frmRelOrcamentos40.RLLabel6.Visible  := False;
      frmRelOrcamentos40.RLDBText1.Visible := False;
    end;
//  frmRelOrcamentos40.QrMdRel.PageSetup.PaperHeight := 280;
  if (vOcultaDesconto = 'S') then
  begin
    frmRelOrcamentos40.RLDBResult3.DataField := '';
    frmRelOrcamentos40.RLDBResult3.DataFormula :=
      '(vlPreco-((vlPreco*nrDesconto)/100))';
  end;
  varQtdItens := StrToIntDef(edtQtdItens.Text, 0);
  With frmRelOrcamentos40.ADOSPRelDados do
  begin
    Close;
    Parameters.ParamByName('@DSLANCAMENTO').Value := EdtLancto.Text;
    Parameters.ParamByName('@CODIGO').Value := EdtCdCliente.Text;
    if (UpperCase(vEmpresa) = 'TRESLEOES') then
      Parameters.ParamByName('@FLAG').Value := 3
      // SELECT DO ORCAMENTO ORDENANDO OS ITENS PELA DESCRIÇÃO
    else
      Parameters.ParamByName('@FLAG').Value := 2;
    // INDICA Q A STORED PROCEDURE RODA PARA SELECT DOS ORCAMENTOS
    Parameters.ParamByName('@ORDEM').Value :=
      TNEGLoja.getConfiguracaoOrdemImpressaoPreVenda;
    open;
  end;
  frmRelOrcamentos40.RLBarcode.caption := intToStr(StrToInt(EdtLancto.Text));
  frmRelOrcamentos40.RLPDFFilter1.FileName :=
    Pchar(ExtractFilePath(Application.ExeName) +
    frmRelOrcamentos40.ADOSPRelDados.FieldByName('nrOrcamento').AsString
    + '.pdf');
  with frmRelOrcamentos40.ADOQryCliente do
  begin
    sql.Text :=
      'Select Distinct P.cdPessoa, P.nmPessoa, E.dsUf, UPPER(E.nmLogradouro) AS nmLogradouro, '
      + 'E.dsBairro,E.dsCidade,E.dsCep,P.Existir,E.dsUF,E.dsComplemento,E.nrNumero,C.dsPrevenda,'
      + 'G.dsRegiao                                                                             '
      + 'From Pessoa P WITH (NOLOCK), Endereco E WITH (NOLOCK),                                 '
      + 'Cliente C WITH (NOLOCK) left join Regiao G WITH (NOLOCK) on C.cdRegiao = G.cdRegiao    '
      + 'Where P.cdPessoa = E.cdPessoa and P.cdPessoa = C.cdPessoa and P.cdPessoa = :CDPESSOA   ';
    Parameters.ParamByName('CDPESSOA').Value := EdtCdCliente.Text;
    open;
    if FieldByName('Existir').AsString = 'F' then
      vcdpessoa := 'F'
    else
      vcdpessoa := 'J';
    frmRelOrcamentos40.QrlCliente.caption := FieldByName('cdPessoa').AsString +
      ' - ' + FieldByName('nmPessoa').AsString;
    frmRelOrcamentos40.QrlEndereco.caption :=
      FieldByName('nmLogradouro').AsString;
    if FieldByName('nrNumero').AsString <> '' then
      frmRelOrcamentos40.QrlEndereco.caption :=
        frmRelOrcamentos40.QrlEndereco.caption + ', ' +
        FieldByName('nrNumero').AsString;
    frmRelOrcamentos40.QrlCidade.caption := FieldByName('dsCidade').AsString;
    frmRelOrcamentos40.QrlBairro.caption := FieldByName('dsBairro').AsString;
    frmRelOrcamentos40.QrlComp.caption := FieldByName('dsComplemento').AsString;
    frmRelOrcamentos40.QrlUf2.caption := FieldByName('dsUf').AsString;
  end;
  frmRelOrcamentos40.AdoQryOrcamento.Parameters.ParamByName('nrOrcamento').Value
    := EdtLancto.Text;
  frmRelOrcamentos40.AdoQryOrcamento.open;
  frmRelOrcamentos40.QrlDtHR.caption :=
    frmRelOrcamentos40.AdoQryOrcamento.FieldByName('hrHora').AsString;
  frmRelOrcamentos40.AdoQryOrcamento.Close;
  if RgOpcoes.ItemIndex = 0 then
    frmRelOrcamentos40.QRLblTitulo.caption := 'Pré-Venda'
  else if RgOpcoes.ItemIndex = 1 then
  begin
    if vOrcamento = 'O' then
      frmRelOrcamentos40.QRLblTitulo.caption := 'Orçamento'
    else if vOrcamento = 'N' then
      frmRelOrcamentos40.QRLblTitulo.caption := 'Pré-Venda'
  end
  else if RgOpcoes.ItemIndex = 2 then
    frmRelOrcamentos40.QRLblTitulo.caption := 'Orçamento'
  else if RgOpcoes.ItemIndex = 4 then
    frmRelOrcamentos40.QRLblTitulo.caption := 'Simples Remessa';
  case valor of
    0:
      frmRelOrcamentos40.RlblFormaPgto.caption := 'Forma Pgto: a vista';
    1:
      frmRelOrcamentos40.RlblFormaPgto.caption := 'Forma Pgto: a prazo';
    2:
      frmRelOrcamentos40.RlblFormaPgto.caption := 'Forma Pgto: cartao a vista';
    3:
      frmRelOrcamentos40.RlblFormaPgto.caption :=
        'Forma Pgto: cartao parcelado';
    4:
      frmRelOrcamentos40.RlblFormaPgto.caption := 'Forma Pgto: cheque pré';
    5:
      frmRelOrcamentos40.RlblFormaPgto.caption := 'Forma Pgto: entrada + prazo';
    6:
      frmRelOrcamentos40.RlblFormaPgto.caption :=
        'Forma Pgto: entrada + cartao';
    7:
      frmRelOrcamentos40.RlblFormaPgto.caption :=
        'Forma Pgto: entrada + ch pré';
    12:
      frmRelOrcamentos40.RlblFormaPgto.caption := 'Forma Pgto: Cheque a Vista';
    13:
      frmRelOrcamentos40.RlblFormaPgto.caption := 'Forma Pgto: Cartão Débito';
    14:
      frmRelOrcamentos40.RlblFormaPgto.caption :=
        'Forma Pgto: Deposito/Transferencia/Pix';
    15:
      frmRelOrcamentos40.RlblFormaPgto.caption := 'Forma Pgto: Boleto Bancário';
  else
    frmRelOrcamentos40.RlblFormaPgto.caption := 'Forma Pgto: a vista';
  end;
  if (vMemo <> nil) then
    frmRelOrcamentos40.RLMemo1.Lines := vMemo.Lines;
  with frmRelOrcamentos40.ADOQryCliente do
  begin
    sql.Text :=
      'SELECT ISNULL(P.nmPessoa,'''') NOME FROM Pessoa P with (nolock) INNER JOIN Profissional PR with (nolock) ON P.cdPessoa = PR.cdPessoa  '
      + 'INNER JOIN Orcamento O with (nolock) ON O.cdProfissional = P.cdPessoa WHERE O.nrOrcamento = :NRORCAMENTO ';
    Parameters.ParamByName('NRORCAMENTO').Value := EdtLancto.Text;
    open;
    if RecordCount > 0 then
      if FieldByName('NOME').AsString <> '' then
        frmRelOrcamentos40.RLMemo1.Lines.Add('Profissional: ' +
          FieldByName('NOME').AsString);
    Close;
  end;
  if (vTipoImp = '1') then
  begin
    frmRelOrcamentos40.QrMdRel.PreviewModal;
    DeleteFile(Pchar(ExtractFilePath(Application.ExeName) + EdtLancto.Text
      + '.pdf'));
    frmRelOrcamentos40.Free;
  end
  else
  begin
    try
      frmRelOrcamentos40.QrMdRel.Print;
      if duasVias40Colunas  = 'S' then
      begin
        sleep(4000);
        frmRelOrcamentos40.QrMdRel.Print;
      end;

      // if vPreVisualizarPrevenda = 'S' then       // vou deixar o preview para q o usuario escolha a impressora
      // frmRelOrcamentos40.QrMdRel.PreviewModal;
      // if vPreVisualizarPrevenda = 'N' then
      // begin
      // if (vPrintSetup = 'S') then
      // begin
      // frmRelOrcamentos40.QrMdRel.PrintDialog := true;
      // if (Trim(vQtdPrint) <> '') then
      // begin
      // for i := 1 to StrToInt(vQtdPrint)do
      // begin
      // frmRelOrcamentos40.QrMdRel.Print;
      // end;
      // end else
      // frmRelOrcamentos40.QrMdRel.Print;
      // end else
      // begin
      // if (Trim(vQtdPrint) <> '') then
      // begin
      // for i := 1 to StrToInt(vQtdPrint) do
      // begin
      // frmRelOrcamentos40.QrMdRel.PrintDialog := false;
      // frmRelOrcamentos40.QrMdRel.Print;
      // end;
      // end else
      // frmRelOrcamentos40.QrMdRel.Print;
      // end;
      // end;
      DeleteFile(Pchar(ExtractFilePath(Application.ExeName) + EdtLancto.Text
        + '.pdf'));
      frmRelOrcamentos40.Free;
    except
      exit;
    end;
  end;
end;

function TFrmPrincipalPreVenda.Envia_Email(tipo: string; pdf_enviado: string;
  email: string; numero: string): Boolean;
var
  Path: string;
  xAnexo: Integer;
  vLancamento: string[5];
begin
  if email = '' then
  begin
    ShowMessage('Email não cadastrado ou não informado.');
    exit; // cliente sem email
  end;
  // criando
  with SMTP do
  begin
    // AuthenticationType := atLogin;
    Host := 'smtp.gmail.com';
    // Host := 'smtp.live.com';
    IOHandler := SSLSocket;
    Port := 465; // gmail
    Username := vUsuarioProxy;
    Password := vSenhaProxy;
    // Port := 25; //hotmail
    if TNEGLoja.getEnviaEmailConfiguracao <> '' then
    begin
      Username := TNEGLoja.getEnviaEmailConfiguracao + '@gmail.com';
      Password := TNEGLoja.getSenhaEmailConfiguracao;
    end
    else
    begin
      Username := 'support.arquivos@gmail.com';
      Password := 'supportdata';
    end;
  end;
  SSLSocket.SSLOptions.Method := sslvSSLv23;
  SSLSocket.SSLOptions.Mode := sslmClient;
  // enviando
  MSG_XML.Clear;
  with MSG_XML do
  begin
    if tipo = 'O' then
      Body.Add('Esta mensagem refere-se ao Orçamento emitido no dia ' +
        FormatDateTime('dd-mm-yyyy', DtLancto.Date))
    else
      Body.Add('Esta mensagem refere-se a Pré-Venda emitida no dia ' +
        FormatDateTime('dd-mm-yyyy', DtLancto.Date));
    // Body.Add('[SUPPORT INFORMATICA LTDA]');
    // Body.add('[04.041.252/0001-10])');
    Body.Add(' ');
    Body.Add(' ');
    Body.Add('Este e-mail foi enviado automaticamente pelo sistema da SUPPORT INFORMÁTICA LTDA (79)3302-5707');
    From.Address := ''; // opcional
    From.Name := TNEGLoja.getRazaoSocialConfiguracao; // opcional
    Recipients.Add;
    Recipients.Items[0].Address := trim(email);
    Recipients.Items[0].Name := ''; // opcional
    if tipo = 'O' then
      Subject := 'Orçamento n°' + numero
    else
      Subject := 'Pré-Venda n°' + numero;
    TIdAttachmentFile.Create(MSG_XML.MessageParts, TFileName(pdf_enviado));
    // Anexo dos arquivos
  end;
  try
    if SMTP.Connected then
      SMTP.Disconnect;
    SMTP.Connect();
    SMTP.Send(MSG_XML);
    SMTP.Disconnect;
    MessageDlg('Email enviado com sucesso!', mtInformation, [mbOK], 0);
    result := True;
  except
    on e: Exception do
    begin
      MessageDlg('Falha no envio do email!' + #13 + e.Message, mtWarning,
        [mbOK], 0);
      result := false;
      // exit;
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.ImprimeOrcamentoAmbiente(valor: Integer);
var
  vcdpessoa: String[01];
  i: Integer;
  varQtdItens: Integer;
begin
  // Imprime Somente o Orçamento
  if vPAFECF and ((vOrcamento = 'N') or (RgOpcoes.ItemIndex = 0)) then
    exit;
  if vMemo.Text <> '' then
  begin
    if (UpperCase(vEmpresa) <> 'JNUNES') and (MessageDlg('Imprimir o campo OBSERVAÇÃO?', mtConfirmation, [mbYes, mbNo], 0) = mrNo) then
      vMemo.Clear;
  end;
  frmRelOrcamentosAmbiente := TFrmRelOrcamentosAmbiente.Create(self);
  // Cria o formulário
  { Se for HOSPITALAR troco a coluna de Prateleira por Lote. }
  { if vAutoPecas = 'H' then begin
    frmRelOrcamentosAmbiente.RLLabel5.Caption:= 'Lote';
    frmRelOrcamentosAmbiente.RLLabel13.Caption:= 'Lote';
    frmRelOrcamentosAmbiente.rlDbText2.DataField:= 'nrLote';
    end;
    if vPAFECF then begin
    frmRelOrcamentosAmbiente.RLBand1.Height  := 0;
    frmRelOrcamentosAmbiente.RLBPAF.Height   := 132;
    frmRelOrcamentosAmbiente.RLBand3.Height  := 109;
    frmRelOrcamentosAmbiente.RLBand3.Borders.DrawBottom := True;
    frmRelOrcamentosAmbiente.RLBand3.Borders.DrawLeft   := True;
    frmRelOrcamentosAmbiente.RLBand3.Borders.DrawRight  := True;
    //frmRelOrcamentosAmbiente.RLBand2.Borders.DrawLeft   := True;
    //frmRelOrcamentosAmbiente.RLBand2.Borders.DrawRight  := True;
    //    frmRelOrcamentos.QRLabel5.Caption := '';
    end else begin
    frmRelOrcamentosAmbiente.RLBand1.Height := 175;
    frmRelOrcamentosAmbiente.RLBPAF.Height  := 0;
    frmRelOrcamentosAmbiente.RLBand3.Height := 92;
    //    FrmRelOrcamentos.RLDraw12.visible := False;
    end;
    varQtdItens := StrToIntDef(edtQtdItens.Text,0);
    if (varQtdItens > 13) then
    //if MessageDlg('Imprimir em meia folha?',mtConfirmation,[mbYes,mbNo],0) = mrNo then
    frmRelOrcamentosAmbiente.QrMdRel.PageSetup.PaperHeight := 297;
    // FrmRelOrcamentos.QryRelDados.Active := True;
  }
  With frmRelOrcamentosAmbiente.ADOQuery2 do
  begin
    Close;
    sql.Text :=
      'SELECT P.nmPessoa,T.nmProduto,T.dsProdutoNota,T.dsReferencia,O.cdPessoa,                         '
      + 'O.nrOrcamento,O.cdCliente,I.cdProduto,O.dtEmissao,I.NrQtd,I.vlPreco,                             '
      + 'O.nrDesconto,T.dsUnidade,T.dsPrateleira, I.cdAmbiente, A.dsAmbiente                              '
      + 'FROM Orcamento O WITH (nolock),Pessoa P WITH (nolock),                                           '
      + 'Produto T WITH (nolock),IteOrcamento I WITH (nolock),                                            '
      + '     Ambiente A WITH (NOLOCK)                                                                    '
      + 'WHERE O.nrOrcamento = :nrOrcamento And P.cdPessoa = O.cdPessoa And T.cdProduto = I.cdProduto And '
      + 'O.cdPessoa = P.cdPessoa And I.dsSituacao = '''' And A.cdAmbiente =* I.cdAmbiente                 '
      + 'and O.nrOrcamento = I.nrOrcamento                                                                '
      +
    // 'group by I.cdAmbiente, P.nmPessoa,T.nmProduto,T.dsProdutoNota,T.dsReferencia,O.cdPessoa,         '+
    // 'O.nrOrcamento,O.cdCliente,I.cdProduto,O.dtEmissao,I.NrQtd,I.vlPreco,                             '+
    // 'O.nrDesconto,T.dsUnidade,T.dsPrateleira, A.dsAmbiente                                            '+
      'order by A.dsAmbiente,I.cdAmbiente, T.dsPrateleira                                               ';
    Parameters.ParamByName('nrOrcamento').Value := EdtLancto.Text;
    open;
  end;

  if vOcultaReferenciaNaImpressao then
  begin
    frmRelOrcamentosAmbiente.RLLabel1.Visible := false;
    frmRelOrcamentosAmbiente.RLDBText1.Visible := false;
    frmRelOrcamentosAmbiente.QRLabel6.Left :=
      frmRelOrcamentosAmbiente.RLLabel1.Left;
    frmRelOrcamentosAmbiente.QREDescricao.Left :=
      frmRelOrcamentosAmbiente.RLLabel1.Left;
  end;
  with frmRelOrcamentosAmbiente.ADOQryCliente do
  begin
    sql.Text :=
      'Select Distinct P.cdPessoa,P.nmPessoa,E.dsUf,E.nmLogradouro,E.dsBairro,      '
      + 'E.dsCidade,E.dsCep,P.Existir,E.dsUF,E.dsComplemento,E.nrNumero,C.dsPrevenda  '
      + 'From Pessoa P WITH (NOLOCK),Endereco E WITH (NOLOCK),Cliente C WITH (NOLOCK) '
      + 'Where P.cdPessoa = E.cdPessoa and P.cdPessoa = C.cdPessoa and P.cdPessoa = :CDPESSOA';
    Parameters.ParamByName('CDPESSOA').Value := EdtCdCliente.Text;
    open;
    if FieldByName('Existir').AsString = 'F' then
      vcdpessoa := 'F'
    else
      vcdpessoa := 'J';
    // if vPAFECF then
    // frmRelOrcamentosAmbiente.LblDenoDest.Caption := 'Nome: ' + FieldByName('cdPessoa').AsString + ' - ' + FieldByName('nmPessoa').AsString
    // else
    frmRelOrcamentosAmbiente.QrlCliente.caption := FieldByName('cdPessoa')
      .AsString + ' - ' + FieldByName('nmPessoa').AsString;

    frmRelOrcamentosAmbiente.QrlEndereco.caption :=
      FieldByName('nmLogradouro').AsString;
    if FieldByName('nrNumero').AsString <> '' then
      frmRelOrcamentosAmbiente.QrlEndereco.caption :=
        frmRelOrcamentosAmbiente.QrlEndereco.caption + ', ' +
        FieldByName('nrNumero').AsString;
    frmRelOrcamentosAmbiente.QrlCep.caption := FieldByName('dsCep').AsString;
    frmRelOrcamentosAmbiente.QrlCidade.caption :=
      FieldByName('dsCidade').AsString;
    frmRelOrcamentosAmbiente.QrlBairro.caption :=
      FieldByName('dsBairro').AsString;
    frmRelOrcamentosAmbiente.QrlComp.caption :=
      FieldByName('dsComplemento').AsString;
    frmRelOrcamentosAmbiente.QrlUf2.caption := FieldByName('dsUf').AsString;
    // FrmRelOrcamentos.QRLabel21.Caption   := FormatFloat('0.00',StrToFloat(EdtTotal.Text) - StrToFloat(EdtSubTotal.Text));
    sql.Text := 'Select distinct nmTelefone From Telefone WITH (NOLOCK) ' +
      'Where cdPessoa = :CDPESSOA ';
    Parameters.ParamByName('CDPESSOA').Value := EdtCdCliente.Text;
    open;
    frmRelOrcamentosAmbiente.QrlTelefone.caption :=
      FieldByName('nmTelefone').AsString;
    if vcdpessoa = 'F' then
    begin
      sql.Text := 'Select dsCpf,dsIdentidade,dsNaturalidade from P_fisica ' +
        'WITH (NOLOCK) Where cdPessoa = ' + EdtCdCliente.Text + ' ';
      open;
      frmRelOrcamentosAmbiente.rlApelido.caption := ' - ' +
        FieldByName('dsnaturalidade').AsString;
      frmRelOrcamentosAmbiente.QrlCPF.caption := 'CPF/CNPJ: ' +
        FieldByName('dsCpf').AsString;
      frmRelOrcamentosAmbiente.QrlRG.caption := 'RG/IE: ' +
        FieldByName('dsIdentidade').AsString;
      // if vPAFECF then
      // frmRelOrcamentosAmbiente.RLLCNPJ_Dest.Caption := 'CPF/CNPJ: ' + FieldByName('dsCpf').AsString;
    end
    else
    begin
      sql.Text :=
        'Select CGC,dsInscricaoEstadual from P_Juridica WITH (NOLOCK) ' +
        'Where cdPessoa = ' + EdtCdCliente.Text + '       ';
      open;
      frmRelOrcamentosAmbiente.QrlCPF.caption := 'CPF/CNPJ: ' +
        FieldByName('CGC').AsString;
      frmRelOrcamentosAmbiente.QrlRG.caption := 'RG/IE: ' +
        FieldByName('dsInscricaoEstadual').AsString;
      // if vPAFECF then
      // frmRelOrcamentosAmbiente.RLLCNPJ_Dest.Caption := 'CPF/CNPJ: ' + FieldByName('CGC').AsString;
    end;
  end;
  frmRelOrcamentosAmbiente.AdoQryOrcamento.Parameters.ParamByName('nrOrcamento')
    .Value := EdtLancto.Text;
  frmRelOrcamentosAmbiente.AdoQryOrcamento.open;
  frmRelOrcamentosAmbiente.QrlDtHR.caption :=
    frmRelOrcamentosAmbiente.AdoQryOrcamento.FieldByName('hrHora').AsString;
  frmRelOrcamentosAmbiente.AdoQryOrcamento.Close;

  { if vPAFECF then begin
    if RgOpcoes.ItemIndex = 0 then
    frmRelOrcamentosAmbiente.QRLblTitulo2.Caption := '**Pré-Venda**'
    else if RgOpcoes.ItemIndex = 1 then begin
    if vOrcamento = 'O' then
    frmRelOrcamentosAmbiente.QRLblTitulo2.Caption := '**Orçamento**'
    else if vOrcamento = 'N' then
    frmRelOrcamentosAmbiente.QRLblTitulo2.Caption := '**Pré-Venda**'
    end else if RgOpcoes.ItemIndex = 2 then
    frmRelOrcamentosAmbiente.QRLblTitulo2.Caption := '**Orçamento**';
    end else begin
  }
  if RgOpcoes.ItemIndex = 0 then
    frmRelOrcamentosAmbiente.QRLblTitulo.caption := 'Pré-Venda'
  else if RgOpcoes.ItemIndex = 1 then
  begin
    if vOrcamento = 'O' then
      frmRelOrcamentosAmbiente.QRLblTitulo.caption := 'Orçamento'
    else if vOrcamento = 'N' then
      frmRelOrcamentosAmbiente.QRLblTitulo.caption := 'Pré-Venda'
  end
  else if RgOpcoes.ItemIndex = 2 then
    frmRelOrcamentosAmbiente.QRLblTitulo.caption := 'Orçamento';
  if CbPrevisao.Checked = True then
    frmRelOrcamentosAmbiente.QRLblPrevisao.caption := 'Previsão de Entrega: ' +
      DateToStr(DtLancto.Date)
  else
    frmRelOrcamentosAmbiente.QRLblPrevisao.Enabled := false;
  // end;
  frmRelOrcamentosAmbiente.QrlCnpj.caption := 'CNPJ: ' +
    frmRelOrcamentosAmbiente.ADOQryConfig.FieldByName('dsCgc').AsString +
    '     I.E.: ' + frmRelOrcamentosAmbiente.ADOQryConfig.FieldByName
    ('dsInscricao').AsString;
  case valor of
    0:
      frmRelOrcamentosAmbiente.RlblFormaPgto.caption := 'Forma Pgto: a vista';
    1:
      frmRelOrcamentosAmbiente.RlblFormaPgto.caption := 'Forma Pgto: a prazo';
    2:
      frmRelOrcamentosAmbiente.RlblFormaPgto.caption :=
        'Forma Pgto: cartao a vista';
    3:
      frmRelOrcamentosAmbiente.RlblFormaPgto.caption :=
        'Forma Pgto: cartao parcelado';
    4:
      frmRelOrcamentosAmbiente.RlblFormaPgto.caption :=
        'Forma Pgto: cheque pré';
    5:
      frmRelOrcamentosAmbiente.RlblFormaPgto.caption :=
        'Forma Pgto: entrada + prazo';
    6:
      frmRelOrcamentosAmbiente.RlblFormaPgto.caption :=
        'Forma Pgto: entrada + cartao';
    7:
      frmRelOrcamentosAmbiente.RlblFormaPgto.caption :=
        'Forma Pgto: entrada + ch pré';
    8:
      frmRelOrcamentosAmbiente.RlblFormaPgto.caption :=
        'Forma Pgto: Cheque a Vista';
    9:
      frmRelOrcamentosAmbiente.RlblFormaPgto.caption :=
        'Forma Pgto: Cartão Débito';
    10:
      frmRelOrcamentosAmbiente.RlblFormaPgto.caption :=
        'Forma Pgto: Deposito Bancario';
  else
    frmRelOrcamentosAmbiente.RlblFormaPgto.caption := 'Forma Pgto: a vista';
  end;
  case vCasasQtd of // preco de venda
    0:
      frmRelOrcamentosAmbiente.QREQtd.DisplayMask := '#,##0';
    1:
      frmRelOrcamentosAmbiente.QREQtd.DisplayMask := '#,##0.0';
    2:
      frmRelOrcamentosAmbiente.QREQtd.DisplayMask := '#,##0.00';
    3:
      frmRelOrcamentosAmbiente.QREQtd.DisplayMask := '#,##0.000';
    4:
      frmRelOrcamentosAmbiente.QREQtd.DisplayMask := '#,##0.0000';
    5:
      frmRelOrcamentosAmbiente.QREQtd.DisplayMask := '#,##0.00000';
  end; // case
  case vCasasPreco of // preco de venda
    1:
      begin
        frmRelOrcamentosAmbiente.QREPreco.DisplayMask := '#,##0.0';
        frmRelOrcamentosAmbiente.RLDBResult3.DisplayMask := '#,##0.0';
      end;
    2:
      begin
        frmRelOrcamentosAmbiente.QREPreco.DisplayMask := '#,##0.00';
        frmRelOrcamentosAmbiente.RLDBResult3.DisplayMask := '#,##0.00';
      end;
    3:
      begin
        frmRelOrcamentosAmbiente.QREPreco.DisplayMask := '#,##0.000';
        frmRelOrcamentosAmbiente.RLDBResult3.DisplayMask := '#,##0.000';
      end;
    4:
      begin
        frmRelOrcamentosAmbiente.QREPreco.DisplayMask := '#,##0.0000';
        frmRelOrcamentosAmbiente.RLDBResult3.DisplayMask := '#,##0.0000';
      end;
    5:
      begin
        frmRelOrcamentosAmbiente.QREPreco.DisplayMask := '#,##0.00000';
        frmRelOrcamentosAmbiente.RLDBResult3.DisplayMask := '#,##0.00000';
      end;
  end; // case
  // if valor <> 10 then  //só imprime o campo memo se vir a impressão a partir do formulário q solicita forma de pagamento
  if (vMemo <> nil) then
    frmRelOrcamentosAmbiente.RLMemo1.Lines := vMemo.Lines;

  if vTipoImp = '' then
  begin
    frmRelOrcamentosAmbiente.RLReport1.Print;
    frmRelOrcamentosAmbiente.Free;
  end
  else
  begin
    try
      // FrmRelOrcamentos.QrMdRel.Print
      // FrmRelOrcamentos.QRMdRel.Printdialog := True;
      // coloca a impressao como default DOS para as empresas que imprime em matricial
      if vTipoImpressora = '' then
        frmRelOrcamentosAmbiente.RLReport1.DefaultFilter :=
          frmRelOrcamentosAmbiente.Qualidade_Dos;
      // else
      // frmRelOrcamentosAmbiente.QrMdRel.DefaultFilter:= frmRelOrcamentosAmbiente.Padrao;
      // imprime na impressora jato e lase ou matricial
      if vTipoImpressora = 'S' then
      begin
        frmRelOrcamentosAmbiente.RLReport1.PageSetup.PaperHeight := 297;
        frmRelOrcamentosAmbiente.RLReport1.PageSetup.PaperWidth := 210;
      end
      else
      begin
        frmRelOrcamentosAmbiente.RLReport1.PageSetup.PaperHeight := 140;
        frmRelOrcamentosAmbiente.RLReport1.PageSetup.PaperWidth := 210;
      end;
      if (vPrintSetup = 'S') then
      begin
        // frmRelOrcamentosAmbiente.QrMdRel.DefaultFilter:= frmRelOrcamentosAmbiente.Padrao;
        frmRelOrcamentosAmbiente.RLReport1.PrintDialog := True;
        if (trim(vQtdPrint) <> '') then
        begin
          for i := 1 to StrToInt(vQtdPrint) do
          begin
            // frmRelOrcamentosAmbiente.QrMdRel.DefaultFilter:= frmRelOrcamentosAmbiente.Padrao;
            // if vPAFECF = False then
            frmRelOrcamentosAmbiente.RLReport1.Print;
          end;
        end
        else
          frmRelOrcamentosAmbiente.RLReport1.Print;
      end
      else
      begin
        // if vPAFECF = False then
        // if (Trim(vQtdPrint) <> '') and (vQtdPrint <> '1')  then begin
        if (trim(vQtdPrint) <> '') then
        begin
          for i := 1 to StrToInt(vQtdPrint) do
          begin
            // frmRelOrcamentosAmbiente.QrMdRel.DefaultFilter := frmRelOrcamentosAmbiente.Padrao;
            frmRelOrcamentosAmbiente.RLReport1.PrintDialog := false;
            // if vPAFECF = False then
            frmRelOrcamentosAmbiente.RLReport1.Print;
          end;
        end
        else
          frmRelOrcamentosAmbiente.RLReport1.Print;
      end;
      frmRelOrcamentosAmbiente.Free;
    except
      exit;
      // Application.OnMessage := FormPrincipal.ProcessaMsg;

      // Limpar_Tela;
      // RgOpcoes.ItemIndex := 0;
    end;
  end;
end;

{$REGION 'Impressão do orçamento da PBFARMA'}

procedure TFrmPrincipalPreVenda.ImprimeOrcamentoPBFARMA
  (indexRadioGroupFormaPgto_: Integer; observacao: string = '');
var
  vcdpessoa: String[01];
  i: Integer;
  varQtdItens: Integer;
begin
  // ImprimeOrcamento(indexRadioGroupFormaPgto_);

  // Imprime Somente o Orçamento
  if vPAFECF and ((vOrcamento = 'N') or (RgOpcoes.ItemIndex = 0)) then
    exit;
  if vMemo.Text <> '' then
  begin
    if MessageDlg('Imprimir o campo OBSERVAÇÃO?', mtConfirmation, [mbYes, mbNo], 0) = mrNo then
      vMemo.Clear;
  end;
  frmRelOrcamentosPB := TfrmRelOrcamentosPB.Create(self); // Cria o formulário
  { Se for HOSPITALAR troco a coluna de Prateleira por Lote. }
  if usarLoteValidade = True then
  begin
    frmRelOrcamentosPB.RLLabel5.caption := 'Lote';
    frmRelOrcamentosPB.RLLabel13.caption := 'Lote';
    frmRelOrcamentosPB.RLDBText2.DataField := 'nrLote';
    frmRelOrcamentosPB.RLBand2.Height := 29;
    frmRelOrcamentosPB.RLDBText2.Top := 15;
  end;
  if vPAFECF then
  begin
    frmRelOrcamentosPB.RLBand1.height := 0;
    frmRelOrcamentosPB.RLBPAF.height := 132;
    frmRelOrcamentosPB.RLBand3.height := 109;
    frmRelOrcamentosPB.RLBand3.Borders.DrawBottom := True;
    frmRelOrcamentosPB.RLBand3.Borders.DrawLeft := True;
    frmRelOrcamentosPB.RLBand3.Borders.DrawRight := True;
    frmRelOrcamentosPB.RLBand2.Borders.DrawLeft := True;
    frmRelOrcamentosPB.RLBand2.Borders.DrawRight := True;
    // FrmRelOrcamentosPB.QRLabel5.Caption := '';
  end
  else
  begin
    // FrmRelOrcamentosPB.RLBand1.Height:= 159;
    frmRelOrcamentosPB.RLBand1.height := 257;
    frmRelOrcamentosPB.RLBPAF.height := 0;
    // FrmRelOrcamentosPB.RLBand3.Height:= 92;
    // FrmRelOrcamentosPB.RLDraw12.visible := False;
  end;
  varQtdItens := StrToIntDef(edtQtdItens.Text, 0);
  if (varQtdItens > 13) then
    // if MessageDlg('Imprimir em meia folha?',mtConfirmation,[mbYes,mbNo],0) = mrNo then
    frmRelOrcamentosPB.QrMdRel.PageSetup.PaperHeight := 297;
  // FrmRelOrcamentosPB.QryRelDados.Active := True;
  With frmRelOrcamentosPB.ADOqryreldados do
  begin
    Parameters.ParamByName('DSLANCAMENTO').Value := EdtLancto.Text;
    open;
  end;
  if vOcultaReferenciaNaImpressao then
  begin
    frmRelOrcamentosPB.RLLabel1.Visible := false;
    frmRelOrcamentosPB.RLDBText1.Visible := false;
    frmRelOrcamentosPB.QRLabel6.Left := frmRelOrcamentosPB.RLLabel1.Left;
    frmRelOrcamentosPB.QREDescricao.Left := frmRelOrcamentosPB.RLLabel1.Left;
  end;
  with frmRelOrcamentosPB.ADOQryCliente do
  begin
    sql.Text :=
      'Select Distinct P.cdPessoa,P.nmPessoa,E.dsUf,E.nmLogradouro,E.dsBairro,      '
      + 'E.dsCidade,E.dsCep,P.Existir,E.dsUF,E.dsComplemento,E.nrNumero,C.dsPrevenda  '
      + 'From Pessoa P WITH (NOLOCK),Endereco E WITH (NOLOCK),Cliente C WITH (NOLOCK) '
      + 'Where P.cdPessoa = E.cdPessoa and P.cdPessoa = C.cdPessoa and P.cdPessoa = :CDPESSOA';
    Parameters.ParamByName('CDPESSOA').Value := EdtCdCliente.Text;
    open;
    if FieldByName('Existir').AsString = 'F' then
      vcdpessoa := 'F'
    else
      vcdpessoa := 'J';
    if vPAFECF then
      frmRelOrcamentosPB.LblDenoDest.caption := 'Nome: ' +
        FieldByName('cdPessoa').AsString + ' - ' +
        FieldByName('nmPessoa').AsString
    else
      frmRelOrcamentosPB.QrlCliente.caption := FieldByName('cdPessoa').AsString
        + ' - ' + FieldByName('nmPessoa').AsString;
    frmRelOrcamentosPB.QrlEndereco.caption :=
      FieldByName('nmLogradouro').AsString;
    if FieldByName('nrNumero').AsString <> '' then
      frmRelOrcamentosPB.QrlEndereco.caption :=
        frmRelOrcamentosPB.QrlEndereco.caption + ', ' +
        FieldByName('nrNumero').AsString;
    frmRelOrcamentosPB.QrlCep.caption := FieldByName('dsCep').AsString;
    frmRelOrcamentosPB.QrlCidade.caption := FieldByName('dsCidade').AsString;
    frmRelOrcamentosPB.QrlBairro.caption := FieldByName('dsBairro').AsString;
    frmRelOrcamentosPB.QrlComp.caption := FieldByName('dsComplemento').AsString;
    frmRelOrcamentosPB.QrlUf2.caption := FieldByName('dsUf').AsString;
    // FrmRelOrcamentosPB.QRLabel21.Caption   := FormatFloat('0.00',StrToFloat(EdtTotal.Text) - StrToFloat(EdtSubTotal.Text));
    sql.Text := 'Select distinct nmTelefone From Telefone WITH (NOLOCK) ' +
      'Where cdPessoa = :CDPESSOA ';
    Parameters.ParamByName('CDPESSOA').Value := EdtCdCliente.Text;
    open;
    frmRelOrcamentosPB.QrlTelefone.caption := FieldByName('nmTelefone')
      .AsString;
    if vcdpessoa = 'F' then
    begin
      sql.Text := 'Select dsCpf,dsIdentidade,dsNaturalidade from P_fisica ' +
        'WITH (NOLOCK) Where cdPessoa = ' + EdtCdCliente.Text + ' ';
      open;
      frmRelOrcamentosPB.rlApelido.caption := ' - ' +
        FieldByName('dsnaturalidade').AsString;
      frmRelOrcamentosPB.QrlCPF.caption := 'CPF/CNPJ: ' +
        FieldByName('dsCpf').AsString;
      frmRelOrcamentosPB.QrlRG.caption := 'RG/IE: ' +
        FieldByName('dsIdentidade').AsString;
      if vPAFECF then
        frmRelOrcamentosPB.RLLCNPJ_Dest.caption := 'CPF/CNPJ: ' +
          FieldByName('dsCpf').AsString;
    end
    else
    begin
      sql.Text :=
        'Select CGC,dsInscricaoEstadual from P_Juridica WITH (NOLOCK) ' +
        'Where cdPessoa = ' + EdtCdCliente.Text + '       ';
      open;
      frmRelOrcamentosPB.QrlCPF.caption := 'CPF/CNPJ: ' +
        FieldByName('CGC').AsString;
      frmRelOrcamentosPB.QrlRG.caption := 'RG/IE: ' +
        FieldByName('dsInscricaoEstadual').AsString;
      if vPAFECF then
        frmRelOrcamentosPB.RLLCNPJ_Dest.caption := 'CPF/CNPJ: ' +
          FieldByName('CGC').AsString;
    end;
  end;
  frmRelOrcamentosPB.AdoQryOrcamento.Parameters.ParamByName('nrOrcamento').Value
    := EdtLancto.Text;
  frmRelOrcamentosPB.AdoQryOrcamento.open;
  frmRelOrcamentosPB.QrlDtHR.caption :=
    frmRelOrcamentosPB.AdoQryOrcamento.FieldByName('hrHora').AsString;
  frmRelOrcamentosPB.AdoQryOrcamento.Close;

  if vPAFECF then
  begin
    if RgOpcoes.ItemIndex = 0 then
      frmRelOrcamentosPB.QRLblTitulo2.caption := 'Pré-Venda'
    else if RgOpcoes.ItemIndex = 1 then
    begin
      if vOrcamento = 'O' then
        frmRelOrcamentosPB.QRLblTitulo2.caption := 'Orçamento'
      else if vOrcamento = 'N' then
        frmRelOrcamentosPB.QRLblTitulo2.caption := 'Pré-Venda'
    end
    else if RgOpcoes.ItemIndex = 2 then
      frmRelOrcamentosPB.QRLblTitulo2.caption := 'Orçamento';
  end
  else
  begin
    if RgOpcoes.ItemIndex = 0 then
      frmRelOrcamentosPB.QRLblTitulo.caption := 'Pré-Venda'
    else if RgOpcoes.ItemIndex = 1 then
    begin
      if vOrcamento = 'O' then
        frmRelOrcamentosPB.QRLblTitulo.caption := 'Orçamento'
      else if vOrcamento = 'N' then
        frmRelOrcamentosPB.QRLblTitulo.caption := 'Pré-Venda'
    end
    else if RgOpcoes.ItemIndex = 2 then
      frmRelOrcamentosPB.QRLblTitulo.caption := 'Orçamento';
    if CbPrevisao.Checked = True then
      frmRelOrcamentosPB.QRLblPrevisao.caption := 'Previsão de Entrega: ' +
        DateToStr(DtLancto.Date)
    else
      frmRelOrcamentosPB.QRLblPrevisao.Enabled := false;
  end;
  frmRelOrcamentosPB.QrlCnpj.caption := 'CNPJ: ' +
    frmRelOrcamentosPB.ADOQryConfig.FieldByName('dsCgc').AsString +
    '     Insc. Estadual: ' + FormatMaskText('00.000.000-00;0;\',
    frmRelOrcamentosPB.ADOQryConfig.FieldByName('dsInscricao').AsString);
  case indexRadioGroupFormaPgto_ of
    0:
      frmRelOrcamentosPB.RlblFormaPgto.caption := 'Forma Pgto: a vista';
    1:
      frmRelOrcamentosPB.RlblFormaPgto.caption := 'Forma Pgto: a prazo';
    2:
      frmRelOrcamentosPB.RlblFormaPgto.caption := 'Forma Pgto: cartao a vista';
    3:
      frmRelOrcamentosPB.RlblFormaPgto.caption :=
        'Forma Pgto: cartao parcelado';
    4:
      frmRelOrcamentosPB.RlblFormaPgto.caption := 'Forma Pgto: cheque pré';
    5:
      frmRelOrcamentosPB.RlblFormaPgto.caption := 'Forma Pgto: entrada + prazo';
    6:
      frmRelOrcamentosPB.RlblFormaPgto.caption :=
        'Forma Pgto: entrada + cartao';
    7:
      frmRelOrcamentosPB.RlblFormaPgto.caption :=
        'Forma Pgto: entrada + ch pré';
    8:
      frmRelOrcamentosPB.RlblFormaPgto.caption := 'Forma Pgto: Cheque a Vista';
    9:
      frmRelOrcamentosPB.RlblFormaPgto.caption := 'Forma Pgto: Cartão Débito';
    10:
      frmRelOrcamentosPB.RlblFormaPgto.caption :=
        'Forma Pgto: Deposito Bancario';
  else
    frmRelOrcamentosPB.RlblFormaPgto.caption := 'Forma Pgto: a vista';
  end;
  frmRelOrcamentosPB.QREQtd.DisplayMask := getFormato(vCasasQtd);
  frmRelOrcamentosPB.QREPreco.DisplayMask := getFormato(vCasasPreco);
  frmRelOrcamentosPB.QRETotal.DisplayMask := '0.00';
  frmRelOrcamentosPB.RLMemo1.Lines.Add(observacao);
  if (vMemo <> nil) then
    frmRelOrcamentosPB.RLMemo1.Lines.AddStrings(vMemo.Lines);
  if vTipoImp = '1' then
  begin
    frmRelOrcamentosPB.QrMdRel.PreviewModal;
    frmRelOrcamentosPB.Free;
  end
  else
  begin
    try

      { coloca a impressao como default DOS para as empresas que imprime em matricial. }
      if vTipoImpressora = '' then
        frmRelOrcamentosPB.QrMdRel.DefaultFilter := frmRelOrcamentosPB.DOS;
      // else
      // FrmRelOrcamentosPB.QrMdRel.DefaultFilter:= FrmRelOrcamentosPB.Padrao;

      { imprime na impressora jato e lase ou matricial. }
      if vTipoImpressora = 'S' then
      begin
        frmRelOrcamentosPB.QrMdRel.PageSetup.PaperHeight := 297;
        frmRelOrcamentosPB.QrMdRel.PageSetup.PaperWidth := 210;
      end
      else
      begin
        frmRelOrcamentosPB.QrMdRel.PageSetup.PaperHeight := 140;
        frmRelOrcamentosPB.QrMdRel.PageSetup.PaperWidth := 210;
      end;
      if (vOrcamento = 'O') and not(transformarOrcamentoPrevenda) then
        frmRelOrcamentosPB.QrMdRel.PreviewModal
      else if (vPrintSetup = 'S') then
      begin
        // FrmRelOrcamentosPB.QrMdRel.DefaultFilter:= FrmRelOrcamentosPB.Padrao;
        frmRelOrcamentosPB.QrMdRel.PrintDialog := True;
        if (trim(vQtdPrint) <> '') then
        begin
          for i := 1 to StrToInt(vQtdPrint) do
          begin
            // FrmRelOrcamentosPB.QrMdRel.DefaultFilter:= FrmRelOrcamentosPB.Padrao;
            frmRelOrcamentosPB.QrMdRel.Print;
          end;
        end
        else
          frmRelOrcamentosPB.QrMdRel.Print;
      end
      else
      begin
        if (trim(vQtdPrint) <> '') then
        begin
          for i := 1 to StrToInt(vQtdPrint) do
          begin
            // FrmRelOrcamentosPB.QrMdRel.DefaultFilter:= FrmRelOrcamentosPB.Padrao;
            frmRelOrcamentosPB.QrMdRel.PrintDialog := false;
            frmRelOrcamentosPB.QrMdRel.Print;
          end;
        end
        else
          frmRelOrcamentosPB.QrMdRel.Print;
      end;
      frmRelOrcamentosPB.Free;
    except
      exit;
    end;
  end;
end;
{$ENDREGION}

procedure TFrmPrincipalPreVenda.CbxNomeChange(Sender: TObject);
begin
  // ** Claudio 10-09-2015
  // if CbxNome.ItemIndex <> -1 then
  // begin
  // ADOQryNome.Open;
  // ADOQryNome.Locate('nmPessoa',CbxNome.Text,[]);
  // EdtCdNome.Text := ADOQryNome.FieldbyName('cdPessoa').AsString;
  // end
  // else
  // EdtCdNome.Clear;
  // vnmVendedor := CbxNome.Text;
end;

procedure TFrmPrincipalPreVenda.BtnAprazoClick(Sender: TObject);
begin
  if (isDescontoValido(prevenda) = false) and
    (StrToFloatDef(EdtDesconto.Text, 0) = 0) then
  begin
    Application.OnMessage := NaoProcessaMsg;
    ShowMessage('Já foi concedido desconto no(s) iten(s) selecionado(s).');
    EdtConsulta.SelectAll;
    EdtConsulta.Setfocus;
    Application.OnMessage := ProcessaMsg;
    exit;
  end;

  if vBloqueiaDesconto = True then
  begin
    Application.OnMessage := NaoProcessaMsg;
    MessageDlg
      ('Esta pré-venda contém um ou mais produtos com o preço alterado no cadastro, não sendo possível dar desconto.',
      mtWarning, [mbOK], 0);
    Application.OnMessage := ProcessaMsg;
    exit;
  end;
  if trim(SgDados.Cells[0, 1]) = '' then
  // so poderá dar desconto quando tiver algum item pelo menos
  begin
    Application.OnMessage := NaoProcessaMsg;
    ShowMessage
      ('O desconto só é permitido quando este lançamento possuir pelo menos um ítem!');
    EdtConsulta.SelectAll;
    EdtConsulta.Setfocus;
    Application.OnMessage := ProcessaMsg;
    EdtDesconto.Text := '0,00';
    exit;
  end;

  // VERIFICA SE EXISTE ALGUM PRODUTO EM PROMOÇÃO (itepromocao.dspromocao)
  if vProdutoPromocao = 'S' then
  begin
    Application.OnMessage := NaoProcessaMsg;
    if (UpperCase(vEmpresa) = 'NACIONAL') then
    begin
      ShowMessage
        ('Esta pré-venda contém produtos em promoção, portanto não será possível dar desconto!');
      EdtDesconto.Text := LimpaEdtDesconto;
      EdtDesconto.ReadOnly := True;
      EdtSubTotal.ReadOnly := True;
      EdtConsulta.Setfocus;
    end
    else
    begin
      // ShowMessage('Esta pré-venda contém produtos que estão em promoção, cuidado com o desconto!');
      EdtDesconto.ReadOnly := false;
      EdtSubTotal.ReadOnly := false;
      EdtDesconto.Setfocus;
    end;
    Application.OnMessage := ProcessaMsg;
  end
  else
  begin
    EdtDesconto.ReadOnly := false;
    EdtSubTotal.ReadOnly := false;
    EdtDesconto.Setfocus;
  end;
end;

Procedure TFrmPrincipalPreVenda.LimpaGrid;
var
  i, C: Integer;
begin
  // For I := 1 to SgDados.RowCount do  //limpa grid Pecas
  // for C:=0 to SgDados.ColCount do
  // SgDados.Cells[C,I] := '';
  // SgDados.RowCount:=2;
  // SgDados.Refresh;

  Limpa_Grid(SgDados);
  ocultarExclamacao;
  tipoForro := '';
  edtQtdItens.Text := '0,00';
  limparArrayBoolean(ArraylinhasDestacadas, 0, 299, false);
end;

Procedure TFrmPrincipalPreVenda.LimpaGrid(var prevenda: TPrevenda;
  deletarSomenteItens: Boolean = false);
var
  i, C: Integer;
begin
  // For I := 1 to SgDados.RowCount do  //limpa grid Pecas
  // for C:=0 to SgDados.ColCount do
  // SgDados.Cells[C,I] := '';
  // SgDados.RowCount:=2;
  // SgDados.Refresh;
  EdtSubTotal.Text := '0,00';
  EdtDesconto.Text := LimpaEdtDesconto;
  EdtTotal.Text := '0,00';
  edtValorBruto.Text := '0,00';
  if deletarSomenteItens = false then
  begin
    if prevenda <> nil then
      FreeAndNil(prevenda);
  end
  else
  begin
    prevenda.itens.Clear;
  end;
  Limpa_Grid(SgDados);
  ocultarExclamacao;
  tipoForro := '';
  edtQtdItens.Text := '0,00';
  limparArrayBoolean(ArraylinhasDestacadas, 0, 299, false);
end;

Procedure TFrmPrincipalPreVenda.LimpaGrid2(Grid: TStringGrid; comeco: Integer);
var
  i, C: Integer;
begin
  With Grid do
  begin
    for i := comeco downto 1 do
      Rows[i].Clear;
  end;
end;

procedure TFrmPrincipalPreVenda.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
  if Application.MessageBox('Tem certeza que deseja sair da Pré-Venda?',
    'Confirmação', mb_IconExclamation + Mb_YesNo) = IdNo then
    CanClose := false
  else
  begin
    if prevenda <> nil then
      DesbloqueiaAlteracaoPreVenda(prevenda.numeroPrevenda);
    DModulo.adoThread.Cancel;
    DModulo.ConexaoThread.Cancel;
    // ExitProcess(0);
    TerminateProcess(getCurrentProcess, 0);
    Halt;
  end;
end;

procedure TFrmPrincipalPreVenda.BtnSairClick(Sender: TObject);
var
  wndHandle: THandle;
  wndClass: array [0 .. 50] of Char;
begin
  if MessageDlg('Tem certeza que deseja sair da Pré-Venda?', mtConfirmation,
    [mbYes, mbNo], 0) = mrYes then
  begin
    // ********* esconde a barra
    StrPCopy(@wndClass[0], 'Shell_TrayWnd');
    wndHandle := FindWindow(@wndClass[0], nil);
    ShowWindow(wndHandle, SW_RESTORE);
    // *********
    Application.Terminate
  end
  else
  begin
    EdtConsulta.SelectAll;
    EdtConsulta.Setfocus;
  end;
end;

Procedure TFrmPrincipalPreVenda.AtualizaQryConsulta;
begin
  With ADOSPConsulta do
  begin
    { Close;
      Parameters.ParamByName('@DSATIVO').Value := 'S';
      if CheckBox1.Checked = false then
      Parameters.ParamByName('@DSATIVO').Value := Null;
      Parameters.ParamByName('@ATACADOVAREJO').Value := vAtacadoVarejo;
      //Parameters.ParamByName('@CLIENTE').Value := EdtCdCliente.Text;
      //Parameters.ParamByName('@TABELAPRECO').Value := 'S';
      Case CmbConsulta.ItemIndex of
      0: begin
      if EdtConsulta.Text <> '' then
      Parameters.ParamByName('@CDPRODUTO').Value  := StrToInt(EdtConsulta.Text)
      else
      Parameters.ParamByName('@CDPRODUTO').Value  := EdtConsulta.Text;
      Parameters.ParamByName('@NMPRODUTO').Value    := Null;
      Parameters.ParamByName('@DSREFERENCIA').Value := Null;
      Parameters.ParamByName('@CDCODIGODIC').Value  := Null;
      Parameters.ParamByName('@NMGRUPO').Value      := Null;
      Parameters.ParamByName('@NMPRODUTO2').Value   := Null;
      Parameters.ParamByName('@C_BARRAS').Value     := Null;
      Parameters.ParamByName('@LANCAMENTO').Value   := Null;
      Parameters.ParamByName('@PESSOA').Value       := Null;
      end;
      1: begin
      Parameters.ParamByName('@CDPRODUTO').Value    := Null;
      Parameters.ParamByName('@NMPRODUTO').Value    := EdtConsulta.Text;
      Parameters.ParamByName('@DSREFERENCIA').Value := Null;
      Parameters.ParamByName('@CDCODIGODIC').Value  := Null;
      Parameters.ParamByName('@NMGRUPO').Value      := Null;
      Parameters.ParamByName('@NMPRODUTO2').Value   := Null;
      Parameters.ParamByName('@C_BARRAS').Value     := Null;
      Parameters.ParamByName('@LANCAMENTO').Value   := Null;
      Parameters.ParamByName('@PESSOA').Value       := Null;
      end;
      2: begin
      Parameters.ParamByName('@CDPRODUTO').Value    := Null;
      Parameters.ParamByName('@NMPRODUTO').Value    := Null;
      Parameters.ParamByName('@DSREFERENCIA').Value := EdtConsulta.Text;
      Parameters.ParamByName('@CDCODIGODIC').Value  := NULL;
      Parameters.ParamByName('@NMGRUPO').Value      := Null;
      Parameters.ParamByName('@NMPRODUTO2').Value   := Null;
      Parameters.ParamByName('@C_BARRAS').Value     := Null;
      Parameters.ParamByName('@LANCAMENTO').Value   := Null;
      Parameters.ParamByName('@PESSOA').Value       := Null;
      end;
      3: begin
      Parameters.ParamByName('@CDPRODUTO').Value    := Null;
      Parameters.ParamByName('@NMPRODUTO').Value    := Null;
      Parameters.ParamByName('@DSREFERENCIA').Value := NUll;
      Parameters.ParamByName('@CDCODIGODIC').Value  := EdtConsulta.Text;
      Parameters.ParamByName('@NMGRUPO').Value      := Null;
      Parameters.ParamByName('@NMPRODUTO2').Value   := Null;
      Parameters.ParamByName('@C_BARRAS').Value     := Null;
      Parameters.ParamByName('@LANCAMENTO').Value   := Null;
      Parameters.ParamByName('@PESSOA').Value       := Null;
      end;
      4: begin
      Parameters.ParamByName('@CDPRODUTO').Value    := Null;
      Parameters.ParamByName('@NMPRODUTO').Value    := Null;
      Parameters.ParamByName('@DSREFERENCIA').Value := Null;
      Parameters.ParamByName('@CDCODIGODIC').Value  := NULL;
      Parameters.ParamByName('@NMGRUPO').Value      := EdtConsulta.Text;
      Parameters.ParamByName('@NMPRODUTO2').Value   := Null;
      Parameters.ParamByName('@C_BARRAS').Value     := Null;
      Parameters.ParamByName('@LANCAMENTO').Value   := Null;
      Parameters.ParamByName('@PESSOA').Value       := Null;
      end;
      5: begin
      Parameters.ParamByName('@CDPRODUTO').Value    := Null;
      Parameters.ParamByName('@NMPRODUTO').Value    := Null;
      Parameters.ParamByName('@DSREFERENCIA').Value := Null;
      Parameters.ParamByName('@CDCODIGODIC').Value  := NULL;
      Parameters.ParamByName('@NMGRUPO').Value      := Null;
      if LblEspecificacao.Caption <> 'Localizar especificação contendo: ' then
      Parameters.ParamByName('@DSREFERENCIA').Value := Copy(LblEspecificacao.Caption,35,length(LblEspecificacao.Caption))
      else
      Parameters.ParamByName('@DSREFERENCIA').Value := null;
      Parameters.ParamByName('@NMPRODUTO2').Value := EdtConsulta.Text;
      Parameters.ParamByName('@C_BARRAS').Value   := Null;
      Parameters.ParamByName('@LANCAMENTO').Value := Null;
      Parameters.ParamByName('@PESSOA').Value     := Null;
      end;
      end; //case
      Case CmbConsulta.ItemIndex of
      0: Parameters.ParamByName('@OPCAO').Value   := '0'; // pesqisa por codigo do produto
      1,5: Parameters.ParamByName('@OPCAO').Value := '1';
      2: Parameters.ParamByName('@OPCAO').Value   := '2';
      3: Parameters.ParamByName('@OPCAO').Value   := '3';
      4: Parameters.ParamByName('@OPCAO').Value   := '4';
      end; }
    Close;
    if chkOcultarProdutosSemEstoque.Checked then
      Parameters.ParamByName('@OCULTARPRODUTOSEMESTOQUE').Value := 1
    else
      Parameters.ParamByName('@OCULTARPRODUTOSEMESTOQUE').Value := 0;
    if (vDescontoClienteAuto = True) then
    begin // se a opcao do configuracao tiver marcada
      Parameters.ParamByName('@DESCONTO').Value :=
        TNEGCliente.getPercentualDoPrecoComDescontoDecimal
        (StrToIntDef(EdtCdCliente.Text, 0))
    end
    else
      Parameters.ParamByName('@DESCONTO').Value := 1;
    if CheckBox1.Checked = false then
      Parameters.ParamByName('@DSATIVO').Value := '%'
    else
      Parameters.ParamByName('@DSATIVO').Value := 'S';
    Parameters.ParamByName('@ATACADOVAREJO').Value := vAtacadoVarejo;
    Parameters.ParamByName('@CDTABELAPRECO').Value := cdTabelaPreco;
    if UpperCase(vEmpresa) = 'CHALOC' then
      Parameters.ParamByName('@BUSCAPARCIAL').Value := 0
    else
      Parameters.ParamByName('@BUSCAPARCIAL').Value := 1;
    if RadioGroup1.ItemIndex = 5 then
    begin
      Parameters.ParamByName('@PESQUISA').Value :=
        Copy(LblEspecificacao.caption, 35, Length(LblEspecificacao.caption));
      Parameters.ParamByName('@PESQUISA2').Value := EdtConsulta.Text;
    end
    else if RadioGroup1.ItemIndex <> 4 then // diferente de codigo de barras
      Parameters.ParamByName('@PESQUISA').Value := EdtConsulta.Text;
    Case RadioGroup1.ItemIndex of
      0:
        Parameters.ParamByName('@OPCAO').Value := '0';
        // pesqisa por codigo do produto
      1:
        Parameters.ParamByName('@OPCAO').Value := '1';
        // pesqisa por nome do produto OU CODIGO DE BARRAS
      2:
        Parameters.ParamByName('@OPCAO').Value := '3'; // REFERENCIA FABRICA
      3:
        Parameters.ParamByName('@OPCAO').Value := '2'; // REFERENCIA DE INTERNA
      4:
        begin
          Parameters.ParamByName('@OPCAO').Value := '7';
          if (Copy(EdtConsulta.Text, 1, 1) = '2') then // codigo da balança
            Parameters.ParamByName('@PESQUISA').Value :=
              Copy(EdtConsulta.Text, 1, 7)
          else
          begin
            if EdtConsulta.Text = '' then
              Parameters.ParamByName('@PESQUISA').Value := -1
            else
            begin
              if (UpperCase(vEmpresa) = 'RURALPET') AND
                (Length(EdtConsulta.Text) = 13) AND
                (Pos('X', EdtConsulta.Text) > 0) then
              begin
                Parameters.ParamByName('@OPCAO').Value := '0';
                Parameters.ParamByName('@PESQUISA').Value :=
                  stringreplace(EdtConsulta.Text, 'X', '', [rfReplaceAll]);
              end
              else
                Parameters.ParamByName('@PESQUISA').Value := EdtConsulta.Text;
            end;
          end;
        end;
      5:
        Parameters.ParamByName('@OPCAO').Value := '5'; // ESPECIFICAÇÃO
      6:
        Parameters.ParamByName('@OPCAO').Value := '4'; // CODIGO ADICIONAL
    end;
    ADOSPConsultaPRECO.DisplayFormat := '#0.00'; // ADD POR CLAUDIO
    ADOSPConsultaVALOR.DisplayFormat := '#0.00';
    ADOSPConsultavlAtacado.DisplayFormat := '#0.00';
    ADOSPConsultanrQtdAtacarejo.DisplayFormat := '#0.00';

    ADOSPConsultaESTOQUE.DisplayFormat := '#' + getFormato(vCasasQtd);
    ADOSPConsultaPEDIDO.DisplayFormat := '#0.00';
    if (UpperCase(vEmpresa) = 'BELAVISTA') then
    begin
      DBGrid1.Columns[IndexOfDbGrid(DBGrid1, 'CÓDIGO_BARRAS')].Visible := false;
      // oculta o codigo de barras
      DBGrid1.Columns[IndexOfDbGrid(DBGrid1, 'DESCRIÇÃO')].width := 350;
      // aumenta a largura da coluna
    end;
    if (vAutoPecas = 'A') and (UpperCase(vEmpresa) <> 'TRATORMEC') then
      DBGrid1.Columns[IndexOfDbGrid(DBGrid1, 'CÓDIGO_BARRAS')].Visible := false;
    open; // mostra os dados no dbgrid
    AjustarAposConsultaProduto;
  end;
end;

procedure TFrmPrincipalPreVenda.CheckBox1Click(Sender: TObject);
begin
  vFlag := '0';
  EdtConsulta.SelectAll;
  EdtConsulta.Setfocus;
  AtualizaQryConsulta;
end;

procedure TFrmPrincipalPreVenda.CheckBox1Enter(Sender: TObject);
begin
  if vFlag = '1' then
    EdtConsulta.Setfocus;
end;

procedure TFrmPrincipalPreVenda.RadioGroup1Click(Sender: TObject);
var
  vIdent: String[20];
  i: Integer;
  textoConsulta_temp : string;
begin
  CmbConsulta.ItemIndex := RadioGroup1.ItemIndex;
  if RadioGroup1.ItemIndex = 5 then
  begin
    Application.OnMessage := NaoProcessaMsg;
    vIdent := InputBox('Localizar também pela especificação',
      'Entre com o texto para pesquisa, ou pressione enter para continuar!',
      '');
    Application.OnMessage := ProcessaMsg;
    LblEspecificacao.Visible := True;
    LblEspecificacao.caption := 'Localizar especificação contendo: ' + vIdent;
  end
  else
    LblEspecificacao.Visible := false;
  // EdtConsulta.Clear;
//  EdtConsultaChange(self);
  textoConsulta_temp := EdtConsulta.Text;
  EdtConsulta.Text := '';
  if (RadioGroup1.ItemIndex <> 4) then
    AtualizaQryConsulta;
  EdtConsulta.Text := textoConsulta_temp;
  EdtConsulta.SelectAll;
  EdtConsulta.Setfocus;
end;

procedure TFrmPrincipalPreVenda.EdtConsultaChange(Sender: TObject);
begin
  if RadioGroup1.ItemIndex IN [0,1,2,3] then
    FiltraConsulta
  else
  if (RadioGroup1.ItemIndex <> 4) then // DIFERENTE DE CODIGO DE BARRAS
    AtualizaQryConsulta;
  if DBGrid1.Color = clBtnHighlight then;
  DBGrid1.Color := clInfoBk;
  if ADOSPConsulta.RecordCount > 0 then
  begin
    ConsultaReserva;
    if usarLoteValidade = True then
      montaComboLote;
    if (UpperCase(vEmpresa) = 'REZENDE') or (UpperCase(vEmpresa) = 'BELAVISTA')
      or (UpperCase(vEmpresa) = 'PROAUTO') or (UpperCase(vEmpresa) = 'NACIONAL')
      OR (UpperCase(vEmpresa) = 'PTINTAS') or (UpperCase(vEmpresa) = 'RURALPET')
    then
      Consulta_Deposito
    else if Label12.Visible = True then
      Consultapedidodecompra1.Click;
    if (UpperCase(vEmpresa) = 'PTINTAS') then
      Consultapedidodecompra1.Click;
  end;
end;

procedure TFrmPrincipalPreVenda.EdtConsultaEnter(Sender: TObject);
begin
  Application.OnMessage := FormPrincipal.ProcessaMsg;
end;

procedure TFrmPrincipalPreVenda.Banese1Click(Sender: TObject);
begin
  RadioGroup1.ItemIndex := 0;
end;

procedure TFrmPrincipalPreVenda.btnLogoffClick(Sender: TObject);
begin
  // Cancelar;
  Solicitar_Login('B');
end;

procedure TFrmPrincipalPreVenda.HiperCard1Click(Sender: TObject);
begin
  RadioGroup1.ItemIndex := 1;
end;

procedure TFrmPrincipalPreVenda.RedeCard1Click(Sender: TObject);
begin
  BtnConfirmar.Click;
end;

procedure TFrmPrincipalPreVenda.VisaNet1Click(Sender: TObject);
begin
  RadioGroup1.ItemIndex := 2;
end;

procedure TFrmPrincipalPreVenda.AmericanExpress1Click(Sender: TObject);
begin
  RadioGroup1.ItemIndex := 3;
end;

procedure TFrmPrincipalPreVenda.DescrioContendo1Click(Sender: TObject);
begin
  RadioGroup1.ItemIndex := 5;
end;

procedure TFrmPrincipalPreVenda.BtnMdPrimeiroClick(Sender: TObject);
begin
  ADOSPConsulta.first;
  EdtPreco.Text := FormatFloatQ(vCasasPreco, getValorVendaProduto);
  // ADOSPConsulta.FieldByName('Valor').AsFloat);
  if EdtCFOP.Visible = True then // se tiver marcado no configuracao para exibir
    EdtCFOP.Text := SugereCFOP;
  if UpperCase(vEmpresa) = 'ODONTO' then
    Label15.Text := FormatFloat('0.00',
      PegaValorAtacado(ADOSPConsulta.FieldByName('código').AsInteger));
  // ConsultaGarantia;
  ConsultaReserva;
  if usarLoteValidade = True then
  begin
    montaComboLote;
    setLabel23(QuantidadeDispEmLotes(ADOSPConsulta.FieldByName('Código')
      .AsInteger));
  end;
  if (UpperCase(vEmpresa) = 'REZENDE') or (UpperCase(vEmpresa) = 'BELAVISTA') or
    (UpperCase(vEmpresa) = 'PROAUTO') or (UpperCase(vEmpresa) = 'NACIONAL') or
    (UpperCase(vEmpresa) = 'PTINTAS') or (UpperCase(vEmpresa) = 'RURALPET') then
    Consulta_Deposito
  else
    Consultapedidodecompra1Click(Sender);
  if (UpperCase(vEmpresa) = 'PTINTAS') then
    Consultapedidodecompra1.Click;
end;

procedure TFrmPrincipalPreVenda.BtnMdProximoClick(Sender: TObject);
begin
  ADOSPConsulta.Next;
  EdtPreco.Text := FormatFloatQ(vCasasPreco, getValorVendaProduto);
  // ADOSPConsulta.FieldByName('Valor').AsFloat);
  if EdtCFOP.Visible = True then // se tiver marcado no configuracao para exibir
    EdtCFOP.Text := SugereCFOP;
  if UpperCase(vEmpresa) = 'ODONTO' then
    Label15.Text := FormatFloat('0.00',
      PegaValorAtacado(ADOSPConsulta.FieldByName('código').AsInteger));
  // ConsultaGarantia;
  ConsultaReserva;
  if usarLoteValidade = True then
  begin
    montaComboLote;
    setLabel23(QuantidadeDispEmLotes(ADOSPConsulta.FieldByName('Código')
      .AsInteger));
  end;
  if (UpperCase(vEmpresa) = 'REZENDE') or (UpperCase(vEmpresa) = 'BELAVISTA') or
    (UpperCase(vEmpresa) = 'PROAUTO') or (UpperCase(vEmpresa) = 'NACIONAL') or
    (UpperCase(vEmpresa) = 'PTINTAS') or (UpperCase(vEmpresa) = 'RURALPET') then
    Consulta_Deposito
  else
    Consultapedidodecompra1Click(Sender);
  if (UpperCase(vEmpresa) = 'PTINTAS') then
    Consultapedidodecompra1.Click;
end;

procedure TFrmPrincipalPreVenda.BtnMdAnteriorClick(Sender: TObject);
begin
  ADOSPConsulta.Prior;
  EdtPreco.Text := FormatFloatQ(vCasasPreco, getValorVendaProduto);
  // ADOSPConsulta.FieldByName('Valor').AsFloat);
  if EdtCFOP.Visible = True then // se tiver marcado no configuracao para exibir
    EdtCFOP.Text := SugereCFOP;
  if UpperCase(vEmpresa) = 'ODONTO' then
    Label15.Text := FormatFloat('0.00',
      PegaValorAtacado(ADOSPConsulta.FieldByName('código').AsInteger));
  // ConsultaGarantia;
  ConsultaReserva;
  if usarLoteValidade = True then
  begin
    montaComboLote;
    setLabel23(QuantidadeDispEmLotes(ADOSPConsulta.FieldByName('Código')
      .AsInteger));
  end;
  if (UpperCase(vEmpresa) = 'REZENDE') or (UpperCase(vEmpresa) = 'BELAVISTA') or
    (UpperCase(vEmpresa) = 'PROAUTO') or (UpperCase(vEmpresa) = 'NACIONAL') or
    (UpperCase(vEmpresa) = 'PTINTAS') or (UpperCase(vEmpresa) = 'RURALPET') then
    Consulta_Deposito
  else
    Consultapedidodecompra1Click(Sender);
  if (UpperCase(vEmpresa) = 'PTINTAS') then
    Consultapedidodecompra1.Click;
end;

procedure TFrmPrincipalPreVenda.BtnMdUltimoClick(Sender: TObject);
begin
  ADOSPConsulta.Last;
  EdtPreco.Text := FormatFloatQ(vCasasPreco, getValorVendaProduto);
  // ADOSPConsulta.FieldByName('Valor').AsFloat);
  if EdtCFOP.Visible = True then // se tiver marcado no configuracao para exibir
    EdtCFOP.Text := SugereCFOP;
  if UpperCase(vEmpresa) = 'ODONTO' then
    Label15.Text := FormatFloat('0.00',
      PegaValorAtacado(ADOSPConsulta.FieldByName('código').AsInteger));
  // ConsultaGarantia;
  ConsultaReserva;
  if usarLoteValidade = True then
  begin
    montaComboLote;
    setLabel23(QuantidadeDispEmLotes(ADOSPConsulta.FieldByName('Código')
      .AsInteger));
  end;
  if (UpperCase(vEmpresa) = 'REZENDE') or (UpperCase(vEmpresa) = 'BELAVISTA') or
    (UpperCase(vEmpresa) = 'PROAUTO') or (UpperCase(vEmpresa) = 'NACIONAL') or
    (UpperCase(vEmpresa) = 'PTINTAS') or (UpperCase(vEmpresa) = 'RURALPET') then
    Consulta_Deposito;
  // if (UpperCase(vEmpresa) = 'PTINTAS') then
  Consultapedidodecompra1.Click;
end;

procedure TFrmPrincipalPreVenda.DBGrid1CellClick(Column: TColumn);
begin
  EdtPreco.Text := FormatFloatQ(vCasasPreco, getValorVendaProduto);
  // ADOSPConsulta.FieldByName('Valor').AsFloat);
  if EdtCFOP.Visible = True then // se tiver marcado no configuracao para exibir
    EdtCFOP.Text := SugereCFOP;
  if UpperCase(vEmpresa) = 'ODONTO' then
    Label15.Text := FormatFloat('0.00',
      PegaValorAtacado(ADOSPConsulta.FieldByName('código').AsInteger));
  // ConsultaGarantia;
  ConsultaReserva;
  if usarLoteValidade = True then
  begin
    montaComboLote;
    setLabel23(QuantidadeDispEmLotes(ADOSPConsulta.FieldByName('Código')
      .AsInteger));
  end;
  if (UpperCase(vEmpresa) = 'REZENDE') or (UpperCase(vEmpresa) = 'BELAVISTA') or
    (UpperCase(vEmpresa) = 'PROAUTO') or (UpperCase(vEmpresa) = 'NACIONAL') or
    (UpperCase(vEmpresa) = 'PTINTAS') or (UpperCase(vEmpresa) = 'RURALPET') then
    Consulta_Deposito
  else
    Consultapedidodecompra1Click(self);
  if (UpperCase(vEmpresa) = 'PTINTAS') then
    Consultapedidodecompra1.Click;
  EdtConsulta.SelectAll;
  EdtConsulta.Setfocus;
end;

procedure TFrmPrincipalPreVenda.EdtDescontoKeyPress(Sender: TObject;
  var Key: Char);
begin
  ValidarNumero(Key);
  if (Key = Char(27)) then
    BtnCancelar.Click;
end;

procedure TFrmPrincipalPreVenda.DBGrid1DblClick(Sender: TObject);
begin
  EdtQtd.Setfocus;
end;

procedure TFrmPrincipalPreVenda.ConsultaProduto1Click(Sender: TObject);
begin
  // Géssica da Mega Móveis Noderste não quer q ninguém olhe essa tela de consulta
  // pois os funcionários dela estão olhando o preço de custo e etc...
  if (PERMISSAO('121', 'V', false) = 'N') then
  begin
    if FrmConsultaProduto <> nil then
      FrmConsultaProduto.PnlTotal.Visible := false;
    Application.MessageBox('Você não possui permissão para visualizar o custo do produto.', 'Aviso', mb_Ok + MB_ICONINFORMATION + MB_APPLMODAL);
    exit;
  end;
  Application.OnMessage := FormPrincipal.NaoProcessaMsg;
  FrmConsultaProduto := TFrmConsultaProduto.Create(Application);
  with ADOQryProduto do
  begin
    sql.Text := 'Select vlcompra, vlAtacado, nrCustoAquisicao, nrCustofinal_v, nrCustofinal_a from produto WITH (NOLOCK) where cdproduto = :cdproduto';
    Parameters.ParamByName('cdproduto').Value := ADOSPConsulta.FieldByName('Código').AsString;
    open;
  end;
  FrmConsultaProduto.LblCodigo.caption := ADOSPConsulta.FieldByName
    ('Código').AsString;
  FrmConsultaProduto.LblBarras.caption := ADOSPConsulta.FieldByName
    ('Código_Barras').AsString;
  FrmConsultaProduto.LblReferencia.caption :=
    ADOSPConsulta.FieldByName('Referência').AsString;
  FrmConsultaProduto.LblDescricao.caption :=
    ADOSPConsulta.FieldByName('Descrição').AsString;
  FrmConsultaProduto.LblFabricante.caption :=
    ADOSPConsulta.FieldByName('Fabricante').AsString;
  FrmConsultaProduto.LblValor.caption := FormatFloat('#,##0.00',
    ADOSPConsulta.FieldByName('Valor').AsFloat);
  FrmConsultaProduto.lblValorAtacado.caption := FormatFloat('#,##0.00',
    ADOQryProduto.FieldByName('vlAtacado').AsFloat);
  FrmConsultaProduto.LblCompra.caption :=
    FormatFloat('#,##0.00', ADOQryProduto.FieldByName('vlCompra').AsFloat);
  FrmConsultaProduto.lblAquisicao.caption :=
    FormatFloat('0.00', ADOQryProduto.FieldByName('nrCustoAquisicao').AsFloat);
  FrmConsultaProduto.LblCustoFinalVarejo.caption :=
    FormatFloat('0.00', ADOQryProduto.FieldByName('nrCustofinal_v').AsFloat);
  FrmConsultaProduto.LblCustoFinalAtacao.caption :=
    FormatFloat('0.00', ADOQryProduto.FieldByName('nrCustofinal_a').AsFloat);
  FrmConsultaProduto.LblEstoque.caption :=
    FormatFloat('#,##0.00', ADOSPConsulta.FieldByName('Estoque').AsFloat);
  FrmConsultaProduto.LblControle.caption :=
    FormatFloat('#,##0.00', ADOSPConsulta.FieldByName('Pedido').AsFloat);
  Ativa := 'N';
//  if (PERMISSAO('121', 'V', false) = 'N') then
//  begin
//    FrmConsultaProduto.PnlTotal.Visible := false;
//    Application.MessageBox('Você não possui permissão para visualizar o custo do produto.', 'Aviso', mb_Ok + MB_ICONINFORMATION + MB_APPLMODAL);
//  end;
  FrmConsultaProduto.ShowModal;
  Application.OnMessage := FormPrincipal.ProcessaMsg;
end;

procedure TFrmPrincipalPreVenda.Help1Click(Sender: TObject);
begin
  RgOpcoes.ItemIndex := 0;
end;

procedure TFrmPrincipalPreVenda.Alterarpreodoproduto1Click(Sender: TObject);
begin
  if UpperCase(vEmpresa) = 'MEGA' then // a mega moveis não quer isso
    exit;
  if vMudaPreco = 'N' then
  begin
    if not(EdtPreco.Enabled) then
    begin
      vFlag := '10';
      LiberaVanda;
      // < Se tiver permissão a varíável [vMudaPreco] fica, temporariamente, igual a 'S'
      if (vMudaPreco = 'S') then
      begin
        EdtPreco.Enabled := True;
        EdtPreco.Color := clWindow;
        if (UpperCase(vEmpresa) <> 'REZENDE') then
        begin // < para a autopeças rezende n é p liberar o desconto
          EdtDescUnit.Enabled := True;
          EdtDescUnit.Color := clWindow;
        end;
        EdtConsulta.Setfocus;
      end;
      vMudaPreco := getVMudaPreco;
      // < Devolvo o valor que está na tabela [configuracao] à variável
    end
    else
    begin
      EdtPreco.Enabled := false;
      EdtPreco.Color := clInfoBk;
      EdtDescUnit.Enabled := false;
      EdtDescUnit.Color := clInfoBk;
      EdtConsulta.Setfocus;
    end;
  end;
end;

Procedure TFrmPrincipalPreVenda.RgOpcoesClick(Sender: TObject);
var
  vTexto: String;
  restrincaoFinanceira: TListaRestricao;
  possuiPermissaoParaAlterarPrevenda: Boolean;
begin
  if (intemIndexRgOpcoesOLD <> RgOpcoes.ItemIndex) and
    (UpperCase(vEmpresa) = 'TREVO') then
  begin
    cbxUsuario.Text := '';
    EdtUsuario.Text := '';
    edtLogin.Text := '';
  end;
  if (vMudaPreco = 'N') and (EdtPreco.Enabled) then
  begin
    EdtPreco.Enabled := false;
    EdtPreco.Color := clInfoBk;
    EdtDescUnit.Enabled := false;
    EdtDescUnit.Color := clInfoBk;
    EdtConsulta.Setfocus;
  end;
  if (intemIndexRgOpcoesOLD = 1) and
    (intemIndexRgOpcoesOLD <> RgOpcoes.ItemIndex) then
    if prevenda <> nil then
      DesbloqueiaAlteracaoPreVenda(prevenda.numeroPrevenda);
  if (intemIndexRgOpcoesOLD = 2) and
    (intemIndexRgOpcoesOLD <> RgOpcoes.ItemIndex) and (vEstqNegativo <> 'S') and
    (StrToFloatDef(EdtSubTotal.Text, 0) > 0) and (RgOpcoes.ItemIndex = 0) then
  begin // alterou o itemIndex de orçamento para prevenda
    Application.OnMessage := NaoProcessaMsg;
    MessageDlg
      ('Por conta da diretiva de segurança definada no sistema, a grade com os ítens vai ser apagada para obedecer validações de pre-venda!',
      mtWarning, [mbOK], 0);
    Application.OnMessage := ProcessaMsg;
    LimpaGrid(prevenda);
  end;
  if (vOpcoes = '1') and (RgOpcoes.ItemIndex in [0, 2, 4]) then
  // Se estiver fazendo uma pré-venda pode alterar para orçamento sem limpar os produtos
  begin
    CbxCliente.Enabled := True;
    Limpar_Tela;
    // CbxCliente.SetFocus;
    // CbxCliente.SetFocus;
    // CbxCliente.SelectAll;
  end else
  begin
    case RgOpcoes.ItemIndex of
      1:
      begin
        // não precisa fazer a pergunta já q vai subir a tela de senha
//          if MessageDlg('Deseja alterar uma Pré-Venda/Orçamento?',
//            mtConfirmation, [mbYes, mbNo], 0) = mrNo then
//          begin
//            RgOpcoes.ItemIndex := intemIndexRgOpcoesOLD;
//            exit;
//          end;
        if (UpperCase(vEmpresa) = 'TREVO') and (edtLogin.Text = '') then
        begin
          EdtLancto.Enabled := True;
          if Solicitar_Login('S') = false then
          begin
            RgOpcoes.ItemIndex := 0;
            exit;
          end;
        end;
        // if (vSenha_Alteracao = 'X') then
        // begin
        // // vTexto := InputBox('Liberação para alteração', 'Digite senha que permite alterar as pré-vendas', '#');
        // CbxCliente.Enabled := False;
        // vFlag := '1';
        // LiberaVanda;
        // LimpaGrid;
        // end
        // else
        // begin

        { A PEDIDO DA MEGA O TRECHO ABAIXO QUE SOLICITAVA PERMISSAO PARA ALTERAR ORCAMENTO FOI COMENTADO }
        if FrmCancelamentoVenda.Possui_Permissao('820','A',cbxUsuario.Text,EdtUsuario.Text) then
           possuiPermissaoParaAlterarPrevenda := True
        else begin
          try
            if FrmCancelamentoVenda <> nil then
              FreeAndNil(FrmCancelamentoVenda);
            FrmCancelamentoVenda := TFrmCancelamentoVenda.Create(Self, '820', 'A', possuiPermissaoParaAlterarPrevenda);
            FrmCancelamentoVenda.Copyright.Caption :=  '<<<<   Alteração de pré-venda    >>>>';
            FrmCancelamentoVenda.showmodal;
            FreeAndNil(FrmCancelamentoVenda);
          except
            FreeAndNil(FrmCancelamentoVenda);
          end;
        end;

        { if FrmCancelamentoVenda.Possui_Permissao('831', 'V', cbxUsuario.Text,
          EdtUsuario.Text) then
          possuiPermissaoParaTransformarOrcamento := True
        else
        begin
          FrmCancelamentoVenda := TFrmCancelamentoVenda.Create(self, '831',
            'V', possuiPermissaoParaTransformarOrcamento);
          FrmCancelamentoVenda.Copyright.caption :=
            '<<<<   Transformar orçamento em pré-venda    >>>>';
          FrmCancelamentoVenda.ShowModal;
        end;
        if (not possuiPermissaoParaTransformarOrcamento) then
        begin
          Application.OnMessage := NaoProcessaMsg;
          Application.MessageBox
            ('Necessário permissão para executar esta ação.', 'Atenção',
            mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
          EdtLancto.Clear;
          EdtLancto.Setfocus;
          EdtLancto.SelectAll;
          Application.OnMessage := ProcessaMsg;
          exit;
        end;}
        if not possuiPermissaoParaAlterarPrevenda and (UpperCase(vEmpresa) <> 'SANTANA') then
        begin
          RgOpcoes.ItemIndex := 0;
        end else
        begin
          EdtCdNome.Text     := '';
          CbxNome.ItemIndex  := -1;
          CbxNome.Text       := '';
          //EdtCdCliente.Text  := '';
          //CbxCliente.ItemIndex := -1;
          //CbxCliente.Text    := '';
          CbxCliente.Enabled := false;
          LimpaGrid(prevenda);
          EdtSubTotal.Text   := '0,00';
          EdtDesconto.Text   := LimpaEdtDesconto;
          EdtTotal.Text      := '0,00';
          edtValorBruto.Text := '0,00';
          edtQtdItens.Text   := '0';
          EdtLancto.Enabled  := True;
          EdtLancto.Color    := clWindow;
          EdtLancto.Text     := '';
          EdtLancto.ReadOnly := false;
          EdtLancto.Setfocus;
        end;
      end;
      0, 2, 4:
      begin
        // EdtConsulta.SetFocus;
        CbxCliente.Enabled := True;
        if (RgOpcoes.ItemIndex = 0) and (clienteComRestricaoFinanceira(restrincaoFinanceira, EdtSubTotal.Text)) then
          CbxCliente.Setfocus
        else
          CbxCliente.Setfocus;
        CbxCliente.SelectAll;
        // if UpperCase( vEmpresa ) = 'DISCABOS' then
        // Limpar_Tela;
        // LimpaGrid(prevenda);
      end;
      3:
      begin
        if (UpperCase(vEmpresa) = 'AMBIENTAR') OR (UpperCase(vEmpresa) = 'PBFARMA') then
        begin
          if FrmCancelamentoVenda.Possui_Permissao('820', 'A',
            cbxUsuario.Text, EdtUsuario.Text) then
            possuiPermissaoParaAlterarPrevenda := True
          else
          begin
            try
              if FrmCancelamentoVenda <> nil then
                FreeAndNil(FrmCancelamentoVenda);
              FrmCancelamentoVenda := TFrmCancelamentoVenda.Create(self, '820',
                'A', possuiPermissaoParaAlterarPrevenda);
              FrmCancelamentoVenda.Copyright.caption :=
                '<<<<   Alteração de pré-venda    >>>>';
              FrmCancelamentoVenda.ShowModal;
              FreeAndNil(FrmCancelamentoVenda);
            except
              FreeAndNil(FrmCancelamentoVenda);
            end;
          end;
          if (possuiPermissaoParaAlterarPrevenda) then
          // if (vSenha_Alteracao = 'X') then
          begin
            // vTexto := InputBox('Liberação para alteração', 'Digite senha que permite alterar as pré-vendas', '#');
            FrmPrincipalPreVenda.Enabled := True;
            FrmPrincipalPreVenda.vUltimo_USUARIO := cbxUsuario.Text;
            FrmPrincipalPreVenda.Enabled := True;
            FrmPrincipalPreVenda.EdtLancto.Enabled := True;
            FrmPrincipalPreVenda.EdtLancto.Color := clBtnHighlight;
            FrmPrincipalPreVenda.EdtLancto.Text := '';
            FrmPrincipalPreVenda.EdtLancto.ReadOnly := false;
            FrmPrincipalPreVenda.EdtLancto.Setfocus;
            FrmPrincipalPreVenda.EdtCdNome.Text := '';
            FrmPrincipalPreVenda.CbxNome.ItemIndex := -1;
            FrmPrincipalPreVenda.EdtCdCliente.Text := '';
            FrmPrincipalPreVenda.CbxCliente.ItemIndex := -1;
          end else
          begin
            EdtLancto.Enabled := True;
            EdtLancto.Color := clWindow;
            EdtLancto.Text := '';
            EdtLancto.ReadOnly := false;
            EdtLancto.Setfocus;
            EdtCdNome.Text := '';
            CbxNome.ItemIndex := -1;
            EdtCdCliente.Text := '';
            CbxCliente.ItemIndex := -1;
            CbxCliente.Text := '';
            CbxCliente.Enabled := false;
          end;
        end else
        begin
          if vMatrizFilial = 'MATRIZ' then
            CbxCliente.Text := 'Proauto Auto Peças (FILIAL) | 4427'
          else
            CbxCliente.Text := 'Proauto Auto Peças (MATRIZ) | 4427';
          EdtCdCliente.Text := '4427';
          CbxCliente.Enabled := false;
          EdtUsuario.SelectAll;
          CbxCliente.Setfocus;
          // CbxCliente.Enabled := True;
          // CbxCliente.SetFocus;
          // CbxCliente.SelectAll;
        end;
      end;
    end;
  end;
  intemIndexRgOpcoesOLD := RgOpcoes.ItemIndex;
  if RgOpcoes.ItemIndex in [0, 4] then // incica q é uma pre-venda
    vOrcamento := 'N'
  else if RgOpcoes.ItemIndex = 2 then // incica q é um orcamento
    vOrcamento := 'O';
  vOpcoes := intToStr(RgOpcoes.ItemIndex);
  auxiLiberacao := false;
  // Solicitar_Login;
end;

procedure TFrmPrincipalPreVenda.ro1Click(Sender: TObject);
begin
  Cancelar;
  Solicitar_Login;
end;

procedure TFrmPrincipalPreVenda.BloqueiaAlteracaoPreVenda(nrOrcamento: Integer);
var
  qry: TADOQuery;
begin
  if (vBloqueioPreVenda = True) or (vConferencia = True) then
  begin
    qry := TADOQuery.Create(nil);
    qry.Connection := DModulo.Conexao;
    with qry do
    begin
      try
        DModulo.Conexao.BeginTrans;
        sql.Text :=
          'update orcamento set dsEmUso = ''S'' where nrOrcamento = :nrOrcamento';
        // 'update orcamento set dsImpresso = ''S'' where nrOrcamento = :nrOrcamento ';
        Parameters.ParamByName('nrOrcamento').Value := nrOrcamento;
        ExecSQL;
        DModulo.Conexao.CommitTrans;
      except
        DModulo.Conexao.RollbackTrans;
      end;
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.DesbloqueiaAlteracaoPreVenda
  (nrOrcamento: Integer);
var
  qry: TADOQuery;
begin
  if (vBloqueioPreVenda = True) or (vConferencia = True) then
  begin
    qry := TADOQuery.Create(nil);
    qry.Connection := DModulo.Conexao;
    with qry do
    begin
      try
        DModulo.Conexao.BeginTrans;
        sql.Text :=
          'update orcamento set dsEmUso = ''N'' where nrOrcamento = :nrOrcamento ';
        Parameters.ParamByName('nrOrcamento').Value := nrOrcamento;
        ExecSQL;
        DModulo.Conexao.CommitTrans;
      except
        DModulo.Conexao.RollbackTrans;
      end;
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.EdtLanctoEnter(Sender: TObject);
begin
  if (RgOpcoes.ItemIndex = 1) then
    if prevenda <> nil then
      DesbloqueiaAlteracaoPreVenda(prevenda.numeroPrevenda);
end;

procedure TFrmPrincipalPreVenda.Ds(Sender: TObject);
var
  i: Integer;
  verificarDispEmEstoque, possuiPermissaoParaTransformarOrcamento,
    possuiPermissaoParaAlterarPrevenda: Boolean;
  tipoCompos: TTipoComposicaoProduto;
  qtdDisponivel: Real;
begin
  if (EdtLancto.Text = '') or (EdtLancto.Enabled = false) then
    exit;
  if RgOpcoes.ItemIndex = 1 then
  begin // com orçamento

    try
      prevenda := TNEGPrevenda.getPrevenda(StrToInt(EdtLancto.Text), True);
      prevenda.isAlteracao := True;
    except
      MessageDlg('Pré-Venda/Orçamento não encontrado!', mtInformation,
        [mbOK], 0);
      EdtLancto.Enabled := True;
      EdtLancto.Color := clWindow;
      EdtLancto.Text := '';
      EdtLancto.ReadOnly := false;
      EdtLancto.Setfocus;
      EdtCdNome.Text := '';
      CbxNome.ItemIndex := -1;
      EdtCdCliente.Text := '';
      CbxCliente.ItemIndex := -1;
      exit;
    end;

    if (prevenda.emUso = 'S') and
      ((vConferencia = True) or (vBloqueioPreVenda = True)) then
    begin
      Application.OnMessage := NaoProcessaMsg;
      Application.MessageBox('Pré-Venda/Orçamento já está em uso no caixa!',
        'Atenção', mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
      prevenda := nil;
      EdtLancto.Setfocus;
      EdtLancto.SelectAll;
      Application.OnMessage := ProcessaMsg;
      exit;
    end;

    if (prevenda.conferida) then
    begin
      Application.OnMessage := NaoProcessaMsg;
      Application.MessageBox
        ('A conferência desta Pré-Venda/Orçamento será cancelada automaticamente ao salvar a alteração!',
        'Atenção', mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
      // EdtLancto.SetFocus;
      // EdtLancto.SelectAll;
      Application.OnMessage := ProcessaMsg;
      // Exit;
    end;

    HabilitaDesabilitaDesconto;
    if (vBloqueioPreVenda = True) or (vConferencia = True) then
      BloqueiaAlteracaoPreVenda(StrToInt(EdtLancto.Text));
    vOrcamento := prevenda.dsImpresso;
    if (vOrcamento <> 'O') then // (vSenha_Alteracao = 'X')and
    begin
      LimpaGrid;
    end;
    vObs := prevenda.observacao;
    if UpperCase(intToStr(prevenda.vendedor.codigo)) <> trim(EdtCdNome.Text) then
    begin
      EdtCdNome.Text := intToStr(prevenda.vendedor.codigo);
      CbxNome.Text := prevenda.vendedor.nome;
    end;
    if prevenda.isOrcamento then
      vOrcamento := 'O'
    else
      vOrcamento := 'N';
    CbxNome.Enabled := false;
    // Pega o cliente
    EdtCdCliente.Text := intToStr(prevenda.Cliente.codigo);
    edtReferencia.Text := prevenda.dsReferencia;
    ADOQryCliente.open;
    ADOQryCliente.Locate('cdPessoa', EdtCdCliente.Text, []);
    CbxCliente.ItemIndex := CbxCliente.Items.IndexOf
      (ADOQryCliente.FieldByName('nmPessoa').AsString + ' | ' +
      ADOQryCliente.FieldByName('cdPessoa').AsString);
    PegaClienteAtacadoVarejo;
    vUF_Cliente := ADOQryCliente.FieldByName('dsUF').AsString;
    // pega o número de itens
    edtQtdItens.Text := intToStr(prevenda.itens.Count);
    // Montar a grid dos produtos
    // ADOQryProcura.Prior;
    if vCasasPreco > vLimiteCasasPreco then
      EdtDesconto.Text := FormatFloat('0.00000', prevenda.descontoPercentual)
    else
      EdtDesconto.Text := FormatFloat('0.00', prevenda.descontoPercentual);
    EdtTotal.Text := '0,00';
    edtValorBruto.Text := '0,00';
    EdtSubTotal.Text := '0,00';
    // SgDados.RowCount       := ADOQryProcura.RecordCount + 1;  // adiciona linhas a string
    AtualizaCombProduto; // pega o nome do produto
    verificarDispEmEstoque := false;
    transformarOrcamentoPrevenda := false;

    if (vOrcamento = 'O') then
    begin // se for orcamento preguntar se ele vai transormar em pre-venda
      Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
      if MessageDlg('Este orçamento será transformado em Pre Venda?',
        mtConfirmation, [mbYes, mbNo], 0) = mrYes then
      begin
        { A PEDIDO DA MEGA O TRECHO ABAIXO QUE SOLICITAVA PERMISSAO PARA ALTERAR ORCAMENTO FOI COMENTADO }
{          if FrmCancelamentoVenda.Possui_Permissao('831', 'V', cbxUsuario.Text,
            EdtUsuario.Text) then
            possuiPermissaoParaTransformarOrcamento := True
          else
          begin
            FrmCancelamentoVenda := TFrmCancelamentoVenda.Create(self, '820', 'V', possuiPermissaoParaTransformarOrcamento);
            FrmCancelamentoVenda.Copyright.caption :=
              '<<<<   Transformar orçamento em pré-venda    >>>>';
            FrmCancelamentoVenda.ShowModal;
          end;
          if (not possuiPermissaoParaTransformarOrcamento) then
          begin
            Application.OnMessage := NaoProcessaMsg;
            Application.MessageBox
              ('Necessário permissão para executar esta ação.', 'Atenção',
              mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
            EdtLancto.Clear;
            EdtLancto.Setfocus;
            EdtLancto.SelectAll;
            Application.OnMessage := ProcessaMsg;
            exit;
          end;}
          // CbxClienteExit(Self);

        vOrcamento := 'N';
        transformarOrcamentoPrevenda := True;
        if (vEstqNegativo <> 'S') then
          verificarDispEmEstoque := True;
      end else
      begin
        LimpaGrid;
        if (vOrcamento = 'N') and (vEstqNegativo <> 'S') then
          verificarDispEmEstoque := True;
      end;
      Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
    end else if (vOrcamento = 'N') then
    begin
{      if FrmCancelamentoVenda.Possui_Permissao('820', 'A', cbxUsuario.Text, EdtUsuario.Text) then
        possuiPermissaoParaAlterarPrevenda := True
      else
      begin
//       esses comentados abaixo é porq estava pedindo a senha de liberação duas vezes
        FrmCancelamentoVenda := TFrmCancelamentoVenda.Create(self, '820', 'A',
          possuiPermissaoParaAlterarPrevenda);
        FrmCancelamentoVenda.Copyright.caption := '<<<<   Alteração de pré-venda    >>>>';
        FrmCancelamentoVenda.ShowModal;
        if FrmCancelamentoVenda <> nil then
          FreeAndNil(FrmCancelamentoVenda);
      end;
      if not possuiPermissaoParaAlterarPrevenda then
      begin
        if (UpperCase(vEmpresa) = 'SANTANA') then
          RgOpcoes.ItemIndex := 2
        else
          RgOpcoes.ItemIndex := 1;
        exit;
      end;}
      if (vEstqNegativo <> 'S') then
        verificarDispEmEstoque := True;
    end;
    i := 0;
    while i <= prevenda.itens.Count - 1 do
    begin
      if not DisponivelNoEstoque(prevenda.itens[i].quantidade,
        prevenda.itens[i].cdProduto, false, tipoCompos, qtdDisponivel) = True
      then
      // ADOQryProduto.Locate('cdproduto',ADOQryProcura.FieldByName('cdProduto').AsInteger,[]);
      // if (prevenda.itens[I].quantidade > prevenda.itens[I].nrQtdReal) and (vEstqNegativo <> 'S') and (verificarDispEmEstoque) then //and (vOrcamento<>'O')
      begin
        Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
        if (FrmPrincipalPreVenda.RgOpcoes.ItemIndex = 1) then
        begin // (vOrcamento = 'N') and
          MessageDlg('O Produto de código ' + prevenda.itens[i].descricao +
            ' está com a quantidade ' + FormatFloat('0.00', qtdDisponivel) +
            // prevenda.itens[I].nrQtdReal) +
            ' disponível em estoque.' + #13 + #13 +
            'Portanto, será excluído desta pre-venda!', mtWarning, [mbOK], 0);
          edtQtdItens.Text :=
            FormatFloat('0', StrToFloat(edtQtdItens.Text) - 1);
        end;
        Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
        prevenda.itens.Delete(i);
        i := i - 1;
      end;
      // else begin

      // AuxiliarLancto(i);
      // SgDados.RowCount := SgDados.RowCount + 1;
      // end;
      // ADOQryProcura.Next;
      i := i + 1;
    end;
    CarregarItensGrid(prevenda);
    // tiraLinhasVazias(SgDados);
    // EdtDescontoExit(Self);
    CbxCliente.Enabled := True;
    CbxCliente.Setfocus;
    if not liberaDigitacaoLancamento then
      EdtLancto.ReadOnly := True;
    CbxClienteExit(self);
  end else if RgOpcoes.ItemIndex = 3 then // AMBIENTAR NOTA DE ENTRADA
  begin
    With ADOQryProcura do
    begin
      sql.Text :=
        'SELECT L.CDCOMISSAO,L.CDPESSOA,L.DSLANCAMENTO,I.CDPRODUTO,L.DTEMISSAO,I.NRQTD,I.VLUNITARIO_DESC,I.NRVALORDESCONTO,L.VLDESCONTO,P.NRQTDREAL FROM ITELCTO I WITH (NOLOCK) INNER JOIN LANCTO L WITH (NOLOCK) '
        + 'ON L.DSLANCAMENTO = I.DSLANCAMENTO AND L.CDPESSOA = I.CDPESSOA AND L.DSSTATUS = I.DSSTATUS INNER JOIN PRODUTO P WITH (NOLOCK) ON P.CDPRODUTO = I.CDPRODUTO WHERE L.DSLANCAMENTO = :LANCTO '
        + 'AND L.CDPESSOA = :CDPESSOA AND L.DSSTATUS = ''C'' ';
      Parameters.ParamByName('LANCTO').Value := EdtLancto.Text;
      Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
      Parameters.ParamByName('CDPESSOA').Value :=
        StrToIntDef(ChamaInputBox('Seleção de fornecedor',
        'Escolha o fornecedor na lista abaixo:'), 0);
      Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
      open;
      if RecordCount = 0 then // caso o lancamento não seja encontrado
      begin
        Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
        MessageDlg('Lançamento não encontrado!', mtInformation, [mbOK], 0);
        Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
        EdtLancto.Enabled := True;
        EdtLancto.Color := clWindow;
        EdtLancto.Text := '';
        vLancamento := '';
        EdtLancto.ReadOnly := false;
        EdtLancto.Setfocus;
        EdtCdNome.Text := '';
        CbxNome.ItemIndex := -1;
        EdtCdCliente.Text := '';
        CbxCliente.ItemIndex := -1;
        exit;
      end;
      vLancamento := EdtLancto.Text;
      CbxNome.Text := '';
      EdtCdNome.Clear;
      CbxCliente.ItemIndex := 0;
      EdtCdCliente.Text := '1';
      edtQtdItens.Text := intToStr(RecordCount);
      // Montar a grid dos produtos
      ADOQryProcura.Prior;
      if vCasasPreco > vLimiteCasasPreco then
        EdtDesconto.Text := FormatFloat('0.00000',
          (ADOQryProcura.FieldByName('NRVALORDESCONTO').AsFloat))
      else
        EdtDesconto.Text := FormatFloat('0.00',
          (ADOQryProcura.FieldByName('NRVALORDESCONTO').AsFloat));
      EdtTotal.Text := '0,00';
      EdtSubTotal.Text := '0,00';
      edtValorBruto.Text := '0,00';
      AtualizaCombProduto; // pega o nome do produto
      AdoQrySimilar.sql.Text :=
        'Select vlpreco from produto WITH (NOLOCK) where cdproduto = :CDPRODUTO';
      AdoQrySimilar.Parameters.ParamByName('CDPRODUTO').Value :=
        ADOQryProcura.FieldByName('cdProduto').AsString;
      AdoQrySimilar.open;
      if AdoQrySimilar.FieldByName('vlPreco').AsFloat >
        ADOQryProcura.FieldByName('VLUNITARIO_DESC').AsFloat then
        BtnAprazo.Enabled := false;
      verificarDispEmEstoque := false;
      transformarOrcamentoPrevenda := false;
      for i := 1 to ADOQryProcura.RecordCount do
      begin
        ADOQryProduto.Locate('cdproduto', ADOQryProcura.FieldByName('cdProduto')
          .AsFloat, []);
        if (ADOQryProcura.FieldByName('nrQtd').AsFloat >
          ADOQryProduto.FieldByName('nrqtdreal').AsFloat) and
          (vEstqNegativo <> 'S') and (verificarDispEmEstoque) then
        // and (vOrcamento<>'O')
        begin
          Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
          if (FrmPrincipalPreVenda.RgOpcoes.ItemIndex = 1) then
          begin // (vOrcamento = 'N') and
            MessageDlg('O Produto de código ' + ADOQryProduto.FieldByName
              ('cdProduto').AsString + ' está com a quantidade ' +
              FormatFloat('0.00', ADOQryProduto.FieldByName('nrqtdreal')
              .AsFloat) + ' disponível em estoque.' + #13 + #13 +
              'Portanto, será excluído desta pre-venda!', mtWarning, [mbOK], 0);
            edtQtdItens.Text :=
              FormatFloat('0', StrToFloat(edtQtdItens.Text) - 1);
          end;
          Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
        end else
        begin
          AuxiliarLanctoNFe(i);
          SgDados.RowCount := SgDados.RowCount + 1;
        end;
        ADOQryProcura.Next;
      end;
      tiraLinhasVazias(SgDados);
      EdtDescontoExit(self);
      CbxCliente.Enabled := True;
      CbxCliente.Setfocus;
      if not liberaDigitacaoLancamento then
        EdtLancto.ReadOnly := True;
      UltimoLancamento;
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.tiraLinhasVazias(Grid: TStringGrid);
var
  i, j: Integer;
  achou: Boolean;
begin
  // while Grid.Cells[0,j] = '' do begin
  for j := 1 to Grid.RowCount do
  begin
    if Grid.Cells[0, j] = '' then
    begin
      for i := 1 to Grid.RowCount do
      begin
        if Grid.Cells[0, i] = '' then
        begin
          Grid.Cells[0, i] := Grid.Cells[0, i + 1];
          Grid.Cells[1, i] := Grid.Cells[1, i + 1];
          Grid.Cells[2, i] := Grid.Cells[2, i + 1];
          Grid.Cells[3, i] := Grid.Cells[3, i + 1];
          Grid.Cells[4, i] := Grid.Cells[4, i + 1];
          Grid.Cells[6, i] := Grid.Cells[6, i + 1];
          Grid.Cells[7, i] := Grid.Cells[7, i + 1];
          Grid.Cells[8, i] := Grid.Cells[8, i + 1];
          Grid.Cells[9, i] := Grid.Cells[9, i + 1];

          Grid.Cells[0, i + 1] := '';
          Grid.Cells[1, i + 1] := '';
          Grid.Cells[2, i + 1] := '';
          Grid.Cells[3, i + 1] := '';
          Grid.Cells[4, i + 1] := '';
          Grid.Cells[6, i + 1] := '';
          Grid.Cells[7, i + 1] := '';
          Grid.Cells[8, i + 1] := '';
          Grid.Cells[9, i + 1] := '';
        end;
      end;
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.EdtLanctoKeyPress(Sender: TObject;
  var Key: Char);
begin
  if (Key = Char(42)) then
  begin // *  --> prevenda
    Consulta_prevenca := TConsulta_prevenca.Create(Application);
    try
      FrmPrincipalPreVenda.Enabled := false;
      Consulta_prevenca.Show;
    except
      Consulta_prevenca.Free;
      FrmPrincipalPreVenda.Enabled := True;
    end;
  end else if (Key = Char(27)) then
    BtnCancelar.Click
  else
    ValidarInteiro(Key);
end;

procedure TFrmPrincipalPreVenda.ConsultaEspecificacao1Click(Sender: TObject);
var
  i: Integer;
begin
  if ADOSPConsulta.FieldByName('Código').AsString = '' then
  begin
    ShowMessage('Selecione um produto antes de realizar esta consulta.');
    EdtConsulta.Setfocus;
    exit;
  end;
  Application.OnMessage := FormPrincipal.NaoProcessaMsg;
  FrmEspecificacao := TFrmEspecificacao.Create(Application);
  if (UpperCase(vEmpresa) = 'NACIONAL') then
    FrmEspecificacao.Color := clMoneyGreen;
  // pegar os códigos adicionais
  With ADOQryEspecificacao do
  begin
    sql.Text := 'Select * from CodAdicional WITH (NOLOCK) where cdproduto = ' +
      ADOSPConsulta.FieldByName('Código').AsString;
    open;
    for i := 0 to RecordCount - 1 do
    begin
      FrmEspecificacao.SgCodigos.Cells[i, 1] :=
        FieldByName('cdAdicional').AsString;
      Next;
    end;
    sql.Text :=
      'Select P.dsEspecificacao, P.dscaminho,P.nrCustofinal_v,P.vlPreco, P.vlAtacado, P.dsMercosul, '
      + 'C.dsClassificacao, P.vlCustoAvulso, P.nrQtdContab  '
      + 'From Produto P WITH (NOLOCK) left join clfiscal C WITH (NOLOCK) on P.dsMercosul = C.cdClassificacao '
      + 'Where P.cdProduto = :CDPRODUTO                                                                     ';
    Parameters.ParamByName('CDPRODUTO').Value :=
      ADOSPConsulta.FieldByName('Código').AsString;
    open;
  end;
  FrmEspecificacao.Memo1.Text := ADOQryEspecificacao.FieldByName
    ('dsEspecificacao').AsString;
  FrmEspecificacao.lblAquisicao.caption :=
    FormatFloat('0.00', ADOQryEspecificacao.FieldByName
    ('vlCustoAvulso').AsFloat);
  FrmEspecificacao.LblProduto.caption := ADOSPConsulta.FieldByName
    ('Descrição').AsString;
  FrmEspecificacao.LblcdBarras.caption := ADOSPConsulta.FieldByName
    ('Código_Barras').AsString;
  FrmEspecificacao.LblFab.caption := ADOSPConsulta.FieldByName
    ('Fabricante').AsString;
  FrmEspecificacao.LblRefer.caption := ADOSPConsulta.FieldByName
    ('Referência').AsString;
  FrmEspecificacao.Lblcod.caption := ADOSPConsulta.FieldByName
    ('Código').AsString;
  FrmEspecificacao.LblRefInterna.caption := ADOSPConsulta.FieldByName
    ('CDCODIGODIC').AsString;
  FrmEspecificacao.LblVarejo.caption :=
    FormatFloat('0.00', ADOQryEspecificacao.FieldByName('vlPreco').AsFloat);
  FrmEspecificacao.lblQtdFiscal.caption :=
    FormatFloat('0.00', ADOQryEspecificacao.FieldByName('nrQtdContab').AsFloat);
  if (vAtacadoVarejo = 'V') and (UpperCase(vEmpresa) = 'NACIONAL') then
  // caso o cliente seja de varejo n mostra o preço de atacado
  begin
    FrmEspecificacao.LblAtacado.caption := '0';
  end
  else
  begin
    FrmEspecificacao.LblAtacado.caption :=
      FormatFloat('0.00', ADOQryEspecificacao.FieldByName('vlAtacado').AsFloat);
  end;
  FrmEspecificacao.LblClFiscal.caption := ADOQryEspecificacao.FieldByName
    ('dsMercosul').AsString + ' - ' + ADOQryEspecificacao.FieldByName
    ('dsClassificacao').AsString;;
//  try
//    FrmEspecificacao.Image1.Picture.LoadFromFile
//      (ADOQryEspecificacao.FieldByName('dsCaminho').AsString);
//  except
//    // MessageDlg('Erro ao buscar a foto!',mtInformation,[mbOK],0);  tirei a mensagem - kenneth (Atendimento 26582)
//  end;
  try
    FrmEspecificacao.Image1.Picture := nil;
    if Pos('http',ADOQryEspecificacao.fieldbyname('dscaminho').AsString) > 0 then
      CarregarImagemURL(FrmEspecificacao.Image1, ADOQryEspecificacao.fieldbyname('dscaminho').AsString)
    else
      FrmEspecificacao.Image1.Picture.LoadFromFile(ADOQryEspecificacao.fieldbyname('dscaminho').AsString);
  except
    //MessageDlg('Erro ao buscar a foto!',mtInformation,[mbOK],0);
  end;
  FrmEspecificacao.Position := poMainFormCenter;
  Ativa := 'N';
  FrmEspecificacao.ShowModal;
  EdtConsulta.Setfocus;
end;

procedure TFrmPrincipalPreVenda.CriarIniSQL;
var
  Arquivo: TIniFile;
  Path: String;
  ConstBd: String;
begin
  { Procedimento para criar ou carregar configurações do BD }
  try { try finnaly }
    try
      Path := ExtractFilePath(Application.ExeName);
      ConstBd := '';
      if not FileExists(Path + 'ConfSQL.ini') then
      begin
        ShowMessage('Configure a Conexão com o Banco SQL Server');
        Arquivo := TIniFile.Create(Path + 'ConfSQL.ini');
        DModulo.Conexao.ConnectionString := PromptDataSource(self.handle,
          'Provider=SQLOLEDB.1;Password=;' + 'Persist Security Info=True;' +
          'User ID=;Initial Catalog=;Data Source=');
        ConstBd := Cryptografia('C', DModulo.Conexao.ConnectionString);
        Arquivo.WriteString('BD', 'Path', ConstBd);
      end
      else
      begin
        Arquivo := TIniFile.Create(Path + 'ConfSQL.ini');
        ConstBd := Arquivo.ReadString('BD', 'Path', '');
      end;
    except
      ShowMessage('Erro ao carregar o arquivo de Inicialização. ' + #13 +
        'Entre em contato com o Suporte do Sistema!');
    end;
  finally
    if Arquivo <> nil then
      Arquivo.Free;
  end;
  try
    with DModulo.Conexao do
    begin
      Connected := false;
      ConnectionString := Cryptografia('D', ConstBd);
      Connected := True;
    end;
  except
    ShowMessage('Não foi possível conectar com o banco de dados.' + #13 +
      '   Entre em contato com o suporte do sistema');
    Application.Terminate; // TESTE
    FrmPrincipalPreVenda.Close;
    FrmPrincipalPreVenda := nil;
    FrmPrincipalPreVenda.Free;
    exit;
  end;
end;

function TFrmPrincipalPreVenda.GetValorIPILiquido(prevenda: TPrevenda): Real;
var
  item: TItemPrevenda;
  totalIPI, temp: Currency;
begin
  totalIPI := 0;
  if UpperCase(vEmpresa) = 'MOTOPECAS_OLD' then
    for item in prevenda.itens do
    begin
      if item.aliquotaIPI = nil then
        continue;
      temp := ((item.aliquotaIPI.vlvalor / 100) *
        (item.quantidade * item.precoVenda));
      temp := SimpleRoundTo(temp, -2);
      totalIPI := totalIPI + temp;
    end;
  result := totalIPI;
end;

function TFrmPrincipalPreVenda.getValorVendaProduto: Real;
begin
  if (vAtacarejo = True) and (ADOSPConsulta.FieldByName('nrQtdAtacarejo')
    .AsFloat > 0) and (vAtacadoVarejo = 'V') and
    (StrToFloat(EdtQtd.Text) >= ADOSPConsulta.FieldByName('nrQtdAtacarejo')
    .AsFloat) then
  begin
    result := TNEGProduto.getValorAtacadoPreVenda
      (ADOSPConsulta.FieldByName('CÓDIGO').AsInteger);
  end
  else
    result := ADOSPConsulta.FieldByName('Valor').AsFloat;
end;

function TFrmPrincipalPreVenda.GetValorIPIBruto(prevenda: TPrevenda): Real;
var
  item: TItemPrevenda;
  totalIPI, temp: Currency;
begin
  totalIPI := 0;
  if UpperCase(vEmpresa) = 'MOTOPECAS_OLD' then
    for item in prevenda.itens do
    begin
      if item.aliquotaIPI = nil then
        continue;
      temp := ((item.aliquotaIPI.vlvalor / 100) *
        (item.quantidade * item.precoBruto));
      temp := SimpleRoundTo(temp, -2);
      totalIPI := totalIPI + temp;
    end;
  result := totalIPI;
end;

procedure TFrmPrincipalPreVenda.Limpar_Tela;
var
  i, j: Integer;
begin
  limparArrayBoolean(ArraylinhasDestacadas, 0, 299, false);
  for i := 1 to 900 do
    for j := 1 to 7 do
      vVetor[i, j] := '';
  EdtConsulta.Clear;
  // EdtSubTotal.Text := '0,00';
  // EdtDesconto.Text := LimpaEdtDesconto;
  // EdtTotal.Text    := '0,00';
  // edtValorBruto.text := '0,00';
  vObs := '';
  if vEmpresa = 'VAREJAO' then
  begin

  end
  else
  begin
    CbxCliente.ItemIndex := 0;
    CbxCliente.Text := CbxCliente.Items[0];
    CbxClienteChange(self);
  end;
  if EdtLancto.Text <> '' then
    DesbloqueiaAlteracaoPreVenda(StrToInt(EdtLancto.Text));
  UltimoLancamento;
  LimpaGrid(prevenda);
  if (vMudaPreco = 'N') and (EdtPreco.Enabled) then
  begin
    EdtPreco.Enabled := false;
    EdtPreco.Color := clInfoBk;
    EdtDescUnit.Enabled := false;
    EdtDescUnit.Color := clInfoBk;
    EdtConsulta.Setfocus;
  end;
  chkbxOrcamentoExterno.Checked := false;
  if  (dsCGC = '32879272000108') or (dsCGC = '32879272000361') then begin
    chkbxBaixarEstoque.Checked := false;
  end
  else begin
    chkbxBaixarEstoque.Checked := false;
  end;
  vBloqueiaDesconto := false;
  ListBox1.Clear;
  ListBox1.Visible := false;
  UltimoLancamento;
  if not liberaDigitacaoLancamento then
  begin
    EdtLancto.Color := clInfoBk;
    EdtLancto.Enabled := false;
    EdtLancto.ReadOnly := True;
  end;
  if (UpperCase(vEmpresa) = 'AMBIENTAR') OR (UpperCase(vEmpresa) = 'PBFARMA')
  then
    Monta_Combo;
  if vEmpresa = 'VAREJAO' then
  begin

  end
  else
  begin
    CbxNome.Text := vnmVendedor;
    EdtCdNome.Text := vcdVendedor;
    // edtusuario.Clear;
  end;
  edtcdLista.Text := '';
  Cancelar;
end;

function TFrmPrincipalPreVenda.ProdutoJaReservado: Boolean;
var
  i: Integer;
  resultado: Boolean;
begin
  resultado := false;
  if (vDestacarItensOcupados) and
    ((RgOpcoes.ItemIndex = 0) or ((transformarOrcamentoPrevenda = True) and
    (RgOpcoes.ItemIndex = 1))) then
  begin
    for i := 0 to prevenda.itens.Count - 1 do
    begin
      if (vEstqNegativo <> 'S') and
        (((qtdInsuficienteParaPrevend(prevenda.itens[i].cdProduto,
        prevenda.itens[i].quantidade) > 0) and (prevenda.itens[i].tipoComposicao
        <> composto)) or ((prevenda.itens[i].tipoComposicao = composto) and
        (TNEGProduto.getEstoquePossivelProdutoComposto(prevenda.itens[i]
        .cdProduto, 1) <= 0))) then
      begin
        MessageDlg
          ('Os produtos em amarelo já estão reservados por outra(s) prevenda(s), '
          + #13#10 + 'clique sobre o produto para saber mais detalhes.',
          mtWarning, [mbOK], 0);
        resultado := True;
        Break;
      end;
    end;
  end;
  result := resultado;
end;

procedure TFrmPrincipalPreVenda.Produtossimilares1Click(Sender: TObject);
var
  cod: string[20];
begin
  DBGrid1.Color := clWindow;
  With ADOSPConsulta do
  begin
    cod := ADOSPConsulta.FieldByName('código').AsString;
    Close;
    Parameters.ParamByName('@DSATIVO').Value := 'S';
    if CheckBox1.Checked = false then
      Parameters.ParamByName('@DSATIVO').Value := Null;
    Parameters.ParamByName('@ATACADOVAREJO').Value := vAtacadoVarejo;
    Parameters.ParamByName('@CDTABELAPRECO').Value := cdTabelaPreco;
    Parameters.ParamByName('@PESQUISA').Value := cod;
    Parameters.ParamByName('@OPCAO').Value := '6';
    open;
    ADOSPConsultaPESO.Visible := false;
    ADOSPConsultaESTOQUE.DisplayFormat := '#' + getFormato(vCasasQtd);
    EdtPreco.Text := FormatFloatQ(vCasasPreco,
      ADOSPConsulta.FieldByName('Valor').AsFloat);
    if UpperCase(vEmpresa) = 'ODONTO' then
      Label15.Text := FormatFloat('0.00',
        PegaValorAtacado(ADOSPConsulta.FieldByName('código').AsInteger));
    LblListados.caption := 'Listados--> ' + intToStr(RecordCount);
  end;
end;

procedure TFrmPrincipalPreVenda.LiberaVanda;
var
  x,y : currency;
begin
  x := (vlTotalAnterior);
  y := StrtoFloat(EdtSubTotal.Text);
  if vFlag <> '6' then
  begin
    try
      FrmPrincipalPreVenda.Enabled := false;
      if FrmCancelamentoVenda = nil then
        FrmCancelamentoVenda := TFrmCancelamentoVenda.Create(Application);
      // Cria o formulário
      if vFlag = '2' then
        FrmCancelamentoVenda.Position := poDefaULTPosOnly;
      FrmCancelamentoVenda.ShowModal;
      FreeAndNil(FrmCancelamentoVenda);
      EdtDescontoExit(Self);
    except
      FreeAndNil(FrmCancelamentoVenda);
    end;
  end else if ((prevenda.descontoPercentual < StrToFloat(EdtDesconto.Text)) or (y < x)) and (liberouVenda = false) then
  begin // se o valor total atual for menor que o anterior então tem que liberar o desconto
    FrmPrincipalPreVenda.Enabled := false;
    try
      if FrmCancelamentoVenda = nil then
        FrmCancelamentoVenda := TFrmCancelamentoVenda.Create(Application);
      // Cria o formulário
      FrmCancelamentoVenda.ShowModal;
      FreeAndNil(FrmCancelamentoVenda);
      vlTotalAnterior := StrToFloat(FormatFloat('0.00', StrToFloatDef(EdtSubTotal.Text, 0)));
      EdtDescontoExit(Self);
      EdtSubTotal.ReadOnly := false;
    except
      FreeAndNil(FrmCancelamentoVenda);
    end;
  end;
  liberouVenda := false;
  vFlag := '';
end;

procedure TFrmPrincipalPreVenda.EdtDescUnitExit(Sender: TObject);
begin
  if EdtDescUnit.Text = '' then
    EdtDescUnit.Text := '0,00'
  else if (StrToFloatDef(EdtDescUnit.Text, 0) > 0) and (vAtacadoVarejo = 'A') then // (UpperCase(vEmpresa) = 'CAMARATUBA')OR
  begin
    if vBloquearDescontoAtacado = True then
    begin
      Application.OnMessage := NaoProcessaMsg;
      MessageDlg('Desconto para clientes atacado está bloqueado.', mtWarning,
        [mbOK], 0);
      EdtPreco.Text := FormatFloatQ(vCasasPreco, getValorVendaProduto);
      // ADOSPConsulta.FieldByName('Valor').AsFloat);
      EdtDescUnit.Text := '0,00';
      EdtPreco.SelectAll;
      EdtPreco.Setfocus;
      Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
      exit;
    end
  end else // claudio: comentei de acordo com o atend 33920
    if (StrToFloatDef(EdtDescUnit.Text, 0) > 0) and
      ((UpperCase(vEmpresa) = 'CARDOSOACESSORIOS')) then
    // (UpperCase(vEmpresa) = 'CAMARATUBA')OR
    begin
      if TNEGCliente.isCliente_Crediario(EdtCdCliente.Text) then
      begin
        EdtDescUnit.Text := '0,00';
        Application.OnMessage := NaoProcessaMsg;
        MessageDlg('Desconto já é automático para clientes de crediário.',
          mtWarning, [mbOK], 0);
        Application.OnMessage := ProcessaMsg;
        EdtDescUnit.Setfocus;
      end
    end
    else if (StrToFloatDef(EdtDescUnit.Text, 0) > 0) and
      (vDescontoClienteAuto = True) and
      (TNEGCliente.getPercentualDoPrecoComDescontoDecimal
      (StrToIntDef(EdtCdCliente.Text, 0)) < 1) then
    // (UpperCase(vEmpresa) = 'CAMARATUBA')OR
    begin
      EdtDescUnit.Text := '0,00';
      Application.OnMessage := NaoProcessaMsg;
      MessageDlg('Desconto já é automático para este cliente.', mtWarning,
        [mbOK], 0);
      Application.OnMessage := ProcessaMsg;
      EdtDescUnit.Setfocus;
    end;
  if vLimitarDescontoFornecedor then
  begin
    if StrToFloatDef(EdtDescUnit.Text, 0) > GetLimiteDescontoFornecedor
      (StrToInt(EdtCdCliente.Text), ADOSPConsulta.FieldByName('Código')
      .AsInteger) then
    begin
      EdtDescUnit.Text := '0,00';
      Application.OnMessage := NaoProcessaMsg;
      MessageDlg('Desconto Máx definido pelo fornecedor é de ' +
        FormatFloat('0.00', GetLimiteDescontoFornecedor
        (StrToInt(EdtCdCliente.Text), ADOSPConsulta.FieldByName('Código')
        .AsInteger)) + '%', mtWarning, [mbOK], 0);
      Application.OnMessage := ProcessaMsg;
      EdtDescUnit.Setfocus;
    end;
  end;
  // EdtDescUnit.Text := FormatFloat('0.00',StrToFloat(EdtDescUnit.Text));
  // EdtPreco.Text    := FormatFloat('0.000',StrToFloat(EdtPreco.Text) - (StrToFloat(EdtPreco.Text) * StrToFloat(EdtDescUnit.Text)/100));
  { if UPPERCASE(vEmpresa) = 'PROAUTO' then begin
    if StrToFloat(EdtDescUnit.Text) > vlDescontoVendedor then begin //vPorcDesconto
    vFlag := '0';
    LiberaVanda;
    end;
    end else begin
    if StrToFloat(EdtDescUnit.Text) > vPorcDesconto then begin
    vFlag := '0';
    LiberaVanda;
    end;
    end; }
end;

procedure TFrmPrincipalPreVenda.EdtDescUnitKeyPress(Sender: TObject;
  var Key: Char);
begin
  if (EdtDescUnit.Text = EdtDescUnit.SelText) then
    ValidarNumero(Key, '')
  else
    ValidarNumero(Key, TEdit(Sender).Text);
end;

procedure TFrmPrincipalPreVenda.DBGrid1DrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
  // Para mudar a cor da linha no DbGrid
  if (TAuxDBGrid(DBGrid1).DataLink.ActiveRecord + 1 = TAuxDBGrid(DBGrid1).Row)
    or (gdSelected in State) then
  begin
    DBGrid1.Canvas.Brush.Color := $00DDDDDD; // $00B79A00;//clSkyBlue;
    DBGrid1.Canvas.Font.Style := DBGrid1.Canvas.Font.Style + [fsBold];
  end;
  DBGrid1.Canvas.FillRect(Rect);
  if (DataCol < 4) or (DataCol > 5) then
    DBGrid1.Canvas.TextOut(Rect.Left + 2, Rect.Top, Column.Field.AsString)
  else
  begin
    if (Column.Field.fieldName = 'Valor') then
      DBGrid1.Canvas.TextOut(Rect.Left + 2, Rect.Top,
        FormatFloat('#0.00', Column.Field.AsFloat));
    { if (Column.Field.FieldName = 'Preco') then                                                   // ADD POR CLAUDIO
      dbgrid1.Canvas.TextOut(Rect.Left + 2,Rect.Top,FormatFloat('#0.00',Column.Field.AsFloat));  // ADD POR CLAUDIO }
  end;
  if (Column.Field.fieldName = 'Valor') then
  begin
    DBGrid1.Canvas.Brush.Color := clMoneyGreen;
    DBGrid1.Canvas.Font.Color := clBlack;
    DBGrid1.Canvas.FillRect(Rect);
    DBGrid1.DefaultDrawColumnCell(Rect, DataCol, Column, State);
  end;
  if (Column.Field.fieldName = 'Estoque') then
  begin
    DBGrid1.Canvas.Brush.Color := clSilver;
    DBGrid1.Canvas.Font.Color := clBlack;
    DBGrid1.Canvas.FillRect(Rect);
    DBGrid1.DefaultDrawColumnCell(Rect, DataCol, Column, State);
  end;
  if ADOSPConsultaVALOR.AsFloat <> ADOSPConsultaPRECO.AsFloat then
  begin // ADD POR CLAUDIO
    // DBGrid1.Canvas.Brush.Color := clMoneyGreen;
    if (Column.Field.fieldName = 'VALOR') then
      DBGrid1.Canvas.Brush.Color := clMoneyGreen;
    DBGrid1.Canvas.Font.Color := clBlack;
    DBGrid1.Canvas.FillRect(Rect);
    DBGrid1.DefaultDrawColumnCell(Rect, DataCol, Column, State);
  end;
  if (ADOSPConsultaESTOQUE.AsFloat <= 0) or
    (ADOSPConsultadsAtivo.AsString <> 'S') then
  begin
    DBGrid1.Canvas.Font.Color := clRed;
    DBGrid1.Canvas.FillRect(Rect);
    DBGrid1.DefaultDrawColumnCell(Rect, DataCol, Column, State);
  end
  else
  begin
    DBGrid1.Canvas.Font.Color := clBlack;
    DBGrid1.Canvas.FillRect(Rect);
    DBGrid1.DefaultDrawColumnCell(Rect, DataCol, Column, State);
  end;
end;

Function TFrmPrincipalPreVenda.SystemDateTime(tDate: TDateTime;
  tTime: TDateTime): Boolean;
var
  tSetDate: TDateTime;
  vDateBias: Variant;
  tSetTime: TDateTime;
  vTimeBias: Variant;
  tTZI: TTimeZoneInformation;
  tST: TSystemTime;
begin
  GetTimeZoneInformation(tTZI);
  vDateBias := tTZI.Bias / 1440;
  tSetDate := tDate + vDateBias;
  vTimeBias := tTZI.Bias / 1440;
  tSetTime := tTime + vTimeBias;
  with tST do
  begin
    wYear := StrToInt(FormatDateTime('yyyy', tSetDate));
    wMonth := StrToInt(FormatDateTime('mm', tSetDate));
    wDay := StrToInt(FormatDateTime('dd', tSetDate));
    wHour := StrToInt(FormatDateTime('hh', tSetTime));
    wMinute := StrToInt(FormatDateTime('nn', tSetTime));
    wSecond := StrToInt(FormatDateTime('ss', tSetTime));
    wMilliseconds := 0;
  end;
  SystemDateTime := SetSystemTime(tST);
end;

Procedure TFrmPrincipalPreVenda.EdtConsultaKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
  if Key = VK_Down then
    BtnMdProximoClick(self);
  if Key = VK_Up then
    BtnMdAnteriorClick(self);
end;

procedure TFrmPrincipalPreVenda.SpeedButton1Click(Sender: TObject);
var
  clienteSelecionado: TCliente;
begin
  // frmBuscaCliente:= TfrmBuscaCliente.Create(self);
  // frmBuscaCliente.ShowModal;
  clienteSelecionado := TBuscaObjeto.BuscaCliente(false);
  if clienteSelecionado <> nil then
  begin
    EdtCdCliente.Text := intToStr(clienteSelecionado.codigo);
    CbxCliente.ItemIndex := CbxCliente.Items.IndexOf(clienteSelecionado.nome +
      ' | ' + intToStr(clienteSelecionado.codigo));
    CbxClienteChange(CbxCliente);
    CbxClienteExit(CbxCliente);
    EdtConsulta.Setfocus;
  end else
  begin
    CbxCliente.Setfocus;
    CbxCliente.Setfocus;
  end;
end;

procedure TFrmPrincipalPreVenda.SpeedButton2Click(Sender: TObject);
var
  P1, P2: TPoint;
begin
  P1.X := SpeedButton2.Left;
  P1.Y := SpeedButton2.Top + SpeedButton2.Height;
  P2 := ClientToScreen(P1);
  PopupMenu1.PopUp(P2.X, P2.Y);
end;

procedure TFrmPrincipalPreVenda.Cadastrodeclientes1Click(Sender: TObject);
begin
  if PERMISSAO('11', 'V') = 'N' then
    exit;
  vFlag := '';
  // FrmPrincipalPreVenda.Enabled := False;
  FrmCdCliente := TFrmCdCliente.Create(self);
  FrmCdCliente.ShowModal;
  Monta_Combo;
end;

function TFrmPrincipalPreVenda.ClienteValido: Boolean;
begin
  result := True;
  if (trim(EdtCdCliente.Text) = '') then
  begin
    Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
    ShowMessage('O nome do cliente está digitado errado!!');
    CbxCliente.Setfocus;
    Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
    BtnConfirmar.Enabled := True;
    Alteraquantidade1.Enabled := True;
    result := false;
  end;
end;

procedure TFrmPrincipalPreVenda.ColResize(Sender: TObject);
begin
  salvarPosicaoColunasDbGrid1;
end;

procedure TFrmPrincipalPreVenda.Conferncia1Click(Sender: TObject);
begin
  frmConferencia := TfrmConferencia.Create(self);
  frmConferencia.ShowModal;
end;

procedure TFrmPrincipalPreVenda.ConsultaClientepeloCPFouCNPJ1Click
  (Sender: TObject);
begin
  SpeedButton1.Click;
end;

procedure TFrmPrincipalPreVenda.Registraperdadevemdaporestoqueinsuficiente1Click
  (Sender: TObject);
var
  vTexto: String[14];
begin
  if (ADOSPConsulta.RecordCount = 0) or (Length(EdtCdNome.Text) = 0) then
    exit;
  FrmLancaVendaPerdida := TFrmLancaVendaPerdida.Create(Application,
    ADOSPConsulta.FieldByName('Código').AsString,
    ADOSPConsulta.FieldByName('DESCRIÇÃO').AsString);
  FrmLancaVendaPerdida.ShowModal;
  EdtConsulta.Setfocus;

  // if ( ADOSPConsulta.RecordCount = 0 ) or ( Length(EdtCdNome.Text) = 0) then exit;
  // Application.OnMessage := NaoProcessaMsg;
  // vtexto := InputBox('Registro de venda perdida',
  // 'Entre com a quantidade que o cliente solicitou do produto?', '');
  // Application.OnMessage := ProcessaMsg;
  // vtexto := RemoveChar(vtexto);
  // if Length(vTexto) = 0 then exit;
  // vtexto := VirgPonto(vTexto);
  // With ADOQrySalvar do begin
  // Try
  // DModulo.Conexao.BeginTrans;
  // Sql.Text := 'Insert Into VendasPerdidas (cdProduto,nrQtd,data,cdPessoa) '+
  // 'Values (:CODIGO,:QUANTD,:DATA,:CDPESSOA)                   ';
  // Parameters.ParamByName('CODIGO').Value   :=  ADOSPConsulta.FieldByName('Código').AsInteger;
  // Parameters.ParamByName('QUANTD').Value   :=  vTexto;
  // Parameters.ParamByName('DATA').Value     :=  vdata_banco;
  // Parameters.ParamByName('CDPESSOA').Value :=  EdtCdNome.Text;
  // ExecSQL;
  // DModulo.Conexao.CommitTrans;
  // Except
  // on ER: EDBEngineError do begin
  // DModulo.Conexao.RollbackTrans;
  // Salvar_erro(vData_Banco + ' | ' + pegaHoraBanco, 'PREVENDA', 'TFrmPrincipalPreVenda.Registraperdadevemdaporestoqueinsuficiente1Click', ER.Message,EdtLancto.Text);
  // Messagedlg('Não foi possível salvar!', mterror, [mbOk], 0);
  // end;
  // on E: Exception do begin
  // DModulo.Conexao.RollbackTrans;
  // Salvar_erro(vData_Banco + ' | ' + pegaHoraBanco, 'PREVENDA', 'TFrmPrincipalPreVenda.Registraperdadevemdaporestoqueinsuficiente1Click', e.Message,EdtLancto.Text);
  // Messagedlg('Não foi possível salvar!', mterror, [mbOk], 0);
  // end;
  // end;  // except
  // end;
end;

procedure TFrmPrincipalPreVenda.Consultadecrditodocliente1Click
  (Sender: TObject);
begin
  vFlag := '5';
  LiberaVanda;
end;

procedure TFrmPrincipalPreVenda.AjustarAposConsultaProduto;
begin
  if (SoNumeros(dsCGC) = '11411925000141') then
  // lojão acricola do joao alves
  begin
    ADOSPConsultavlComissao.Visible := True;
    DBGrid1.Columns[IndexOfDbGrid(DBGrid1, 'vlComissao')].width := 70;
    DBGrid1.Columns[IndexOfDbGrid(DBGrid1, 'vlComissao')].Visible := True;
    ADOSPConsultavlComissao.DisplayFormat := '#0.00';
  end
  else
  begin
    ADOSPConsultavlComissao.Visible := false;
    DBGrid1.Columns[IndexOfDbGrid(DBGrid1, 'vlComissao')].Visible := false;
  end;
  if (UpperCase(vEmpresa) <> 'MOTOBOX') then
  begin
    DBGrid1.Columns[IndexOfDbGrid(DBGrid1, 'GRUPO')].Visible := false;
  end;
  if (ADOSPConsulta.RecordCount > 0) and (RadioGroup1.ItemIndex = 4) and
    (Copy(EdtConsulta.Text, 1, 1) = '2') then // codigo barras balança
  begin
    if vTipoCodigoBalanca = 1 then // calcula pelo preço
      EdtQtd.Text := FormatFloat('0.000',
        (StrToFloat(Copy(EdtConsulta.Text, 8, 2) + ',' +
        Copy(EdtConsulta.Text, 10, 3)) / ADOSPConsulta.FieldByName('Valor').AsFloat) * 10)
    else // calcula pelo peso
      EdtQtd.Text := FormatFloat('0.000',
        StrToFloat(Copy(EdtConsulta.Text, 8, 2) + ',' +
        Copy(EdtConsulta.Text, 10, 3)));
  end;
  LblListados.caption := 'Listados--> ' + intToStr(ADOSPConsulta.RecordCount);
  EdtPreco.Text := FormatFloatQ(vCasasPreco, ADOSPConsulta.FieldByName('Valor').AsFloat);
  if EdtCFOP.Visible = True then
    EdtCFOP.Text := SugereCFOP;
  Label11.Text := '0,00';
  Label13.Text := '__/__/____';
end;

procedure TFrmPrincipalPreVenda.Alteraquantidade1Click(Sender: TObject);
begin
  if EdtSubTotal.Focused and (not EdtSubTotal.ReadOnly) then
    EdtSubTotalExit(EdtSubTotal)
  else if EdtDesconto.Focused and (not EdtDesconto.ReadOnly) then
    EdtDescontoExit(EdtDesconto)
  else if CbxCliente.Focused and
    (codigoClienteAtual <> copy_campo(CbxCliente.Text, '|', 2)) then
    CbxClienteExit(CbxCliente);
  if BtnConfirmar.Enabled then
    BtnConfirmarClick(self);
end;

function TFrmPrincipalPreVenda.isDescontoValido(prevenda: TPrevenda): Boolean;
var
  item: TItemPrevenda;
  resultado: Boolean;
begin
  resultado := false;
  for item in prevenda.itens do
  begin
    if item.Promocao_desconto_Item = false then
    begin
      resultado := True;
      Break;
    end;
  end;
  result := resultado;
end;

function TFrmPrincipalPreVenda.item_cancelado(linha: Integer): Boolean;
begin
  result := Copy(SgDados.Cells[1, linha], 1, 6) = '<CANC>';
end;

procedure TFrmPrincipalPreVenda.cancelar_item(linha: Integer);
begin
  SgDados.Cells[1, linha] := '<CANC>' + SgDados.Cells[1, linha];
end;

procedure TFrmPrincipalPreVenda.CarregarItensGrid(prevenda: TPrevenda;
  ponteiro: string = '');
var
  i: Integer;
  temp, tempBruto: Currency;
  acrescimoCartao : Boolean;
begin
  EdtSubTotal.Text   := '0,00';
  edtValorBruto.Text := '0,00';
  EdtTotal.Text      := '0,00';
  LimpaGrid;
  edtQtdItens.Text := intToStr(prevenda.itens.Count);
  for i := 0 to prevenda.itens.Count - 1 do
  begin
    with SgDados do
    begin
      Cells[0, i + 1] := intToStr(prevenda.itens[i].cdProduto); // codigo
      Cells[1, i + 1] := prevenda.itens[i].descricao;
      Cells[10, i + 1] := prevenda.itens[i].unidade.unidade; // unidade
      Cells[12, i + 1] := FloatToStr(prevenda.itens[i].fatorConversao);
      Cells[13, i + 1] := prevenda.itens[i].lote;
      Cells[16, i + 1] := intToStr(prevenda.itens[i].cdFabricanteLote);
      Cells[2, i + 1] := FormatFloatQ(vCasasQtd,
        SimpleRoundTo(prevenda.itens[i].quantidade, vCasasQtd * -1));
      Cells[3, i + 1] := FormatFloatQ(vCasasPreco,
        SimpleRoundTo(prevenda.itens[i].precoVenda, vCasasPreco * -1));
      prevenda.itens[i].precoVenda := StrToFloat(Cells[3, i + 1]);
      Cells[4, i + 1] := FormatFloatQ(2,
        SimpleRoundTo(prevenda.itens[i].SubTotal, -2)); // total
      Cells[5, i + 1] := prevenda.itens[i].prateleira;
      Cells[6, i + 1] := prevenda.itens[i].codigoBarras;
      Cells[7, i + 1] := prevenda.itens[i].referenciaFabrica;
      Cells[8, i + 1] := FormatFloatQ(vCasasQtd,
        SimpleRoundTo(prevenda.itens[i].nrQtdReal, vCasasQtd * -1));
      Cells[16, i + 1] := prevenda.itens[i].tipoForro;
      Cells[11, i + 1] := prevenda.itens[i].cfop; // cfop por item thiago
      Cells[9, i + 1] := FormatFloatQ(vCasasPreco,
        SimpleRoundTo(prevenda.itens[i].precoBruto, vCasasPreco * -1));
      prevenda.itens[i].precoBruto := StrToFloat(Cells[9, i + 1]);
      if prevenda.itens[i].ambiente <> nil then
      begin
        Cells[14, i + 1] := intToStr(prevenda.itens[i].ambiente.codigo);
        Cells[15, i + 1] := prevenda.itens[i].ambiente.descricao;
      end;
      if prevenda.itens[i].Promocao_desconto_Item then
        Cells[17, i + 1] := '1'
      else
        Cells[17, i + 1] := '0'; // produto em promoção
      if (UpperCase(vEmpresa) = 'MOTOBOX') then
        Cells[18, i + 1] := TNEGProduto.buscarProduto
          (prevenda.itens[i].cdProduto).Grupo.nome;
      // ArraylinhasDestacadas[I+1] := prevenda.itens[I].itemLinhaDestacada;
      if chkbxEtiqueta.Checked = false then
      begin
        if ((RgOpcoes.ItemIndex = 0) or ((transformarOrcamentoPrevenda = True) and
          (RgOpcoes.ItemIndex = 1))) then
          if ((vEstqNegativo <> 'S') and
            (qtdInsuficienteParaPrevend(StrToInt(SgDados.Cells[0, i + 1]),
            StrToFloatDef(SgDados.Cells[2, i + 1], 0)) > 0) and
            (TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, i + 1]))
            .tipoComposicao <> composto)) or
            ((TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, i + 1]))
            .tipoComposicao = composto) and
            (TNEGProduto.getEstoquePossivelProdutoComposto(StrToInt(SgDados.Cells
            [0, i + 1]), 1) <= 0)) then
            ArraylinhasDestacadas[i + 1] := True
          else
            ArraylinhasDestacadas[i + 1] := false;
      end;
    end;

    temp := (prevenda.itens[i].precoBruto * prevenda.itens[i].quantidade);
    temp := SimpleRoundTo(temp, -2);
    tempBruto := temp;
    edtValorBruto.Text := FloatToStr(StrToFloat(edtValorBruto.Text) + temp);
    EdtTotal.Text := edtValorBruto.Text;
    temp := (prevenda.itens[i].precoVenda * prevenda.itens[i].quantidade);
    temp := SimpleRoundTo(temp, -2);
    if (temp > tempBruto) and ((UpperCase(vEmpresa) = 'NACIONAL') or (dsCGC = '03821965000133') or (dsCGC = '17111138000160')) then
      acrescimoCartao := True
    else
      EdtSubTotal.Text := FloatToStr(StrToFloat(EdtSubTotal.Text) + temp);
    // edtValorBruto.Text := FloatToStr(StrtoFloat(edtValorBruto.Text) + (prevenda.itens[I].precoBruto * prevenda.itens[I].quantidade));
    // EdtTotal.Text := FloatToStr(StrtoFloat(EdtTotal.Text) + (prevenda.itens[I].precoBruto * prevenda.itens[I].quantidade));
    // edtValorBruto.Text := FloatToStr(SimpleRoundTo(StrtoFloat(edtValorBruto.Text),-2));
    // EdtTotal.Text := FloatToStr(SimpleRoundTo(StrtoFloat(EdtTotal.Text),-2));
  end;
  if acrescimoCartao then
    EdtSubTotal.Text := edtValorBruto.Text;
  EdtSubTotalExit(self);
  if (prevenda.itens.Count + 1) = 1 then
    SgDados.RowCount := 2
  else
    SgDados.RowCount := prevenda.itens.Count + 1;
  if (ponteiro = '') or ((StrToInt(ponteiro) > prevenda.itens.Count) and
    (prevenda.itens.Count > 0)) then
    SgDados.Row := prevenda.itens.Count
  else if (StrToInt(ponteiro) = 1) and (prevenda.itens.Count = 0) then
    SgDados.Row := 1
  else
    SgDados.Row := StrToInt(ponteiro);
end;

procedure TFrmPrincipalPreVenda.SgDadosExit(Sender: TObject);
var
  i: Integer;
  cansel: Boolean;
begin
  if indexGridAux > 0 then
  begin
    if (StrToFloatDef(SgDados.Cells[2, indexGridAux], 0) <= 0) then
    begin
      MessageDlg('Quantidade inválida no produto [' + SgDados.Cells[1,
        indexGridAux] + '].', mtWarning, [mbOK], 0);
      SgDados.Row := indexGridAux;
      SgDados.Col := 2;
      SgDadosSelectCell(self, indexGridAux, 2, cansel);
      SgDados.Setfocus;
      exit;
    end;
    indexGridAux := 0; // reinicializa o ponteiro
  end;
  ocultarExclamacao;
  { A Discabos libera p alterar a quantidade do produto direto na grid, por isso tem que atualizar os totais. }
  if (UpperCase(vEmpresa) = 'DISCABOS') OR (UpperCase(vEmpresa) = 'SANTANA')
  then
  begin
    EdtSubTotal.Text := '0,00';
    EdtTotal.Text := '0,00';
    edtValorBruto.Text := '0,00';
    EdtDesconto.Text := LimpaEdtDesconto;
    if Label15.Visible = True then
      Label15.Text := '0,00';
    for i := 1 to SgDados.RowCount - 1 do
    begin
      if (SgDados.Cells[1, i] = '') then
        Break;
      if vEstqNegativo <> 'S' then
      begin
        if (vDestacarItensOcupados) and
          ((RgOpcoes.ItemIndex = 0) or ((transformarOrcamentoPrevenda = True)
          and (RgOpcoes.ItemIndex = 1))) then
          if ((vEstqNegativo <> 'S') and
            (qtdInsuficienteParaPrevend(StrToInt(SgDados.Cells[0, i]),
            StrToFloatDef(SgDados.Cells[2, i], 0)) > 0) and
            (TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, i]))
            .tipoComposicao <> composto)) or
            ((TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, i]))
            .tipoComposicao = composto) and
            (TNEGProduto.getEstoquePossivelProdutoComposto
            (StrToInt(SgDados.Cells[0, i]), 1) <= 0)) then
            ArraylinhasDestacadas[i] := True
          else
            ArraylinhasDestacadas[i] := false;

        if (ArraylinhasDestacadas[i]) or
          (StrToFloatDef(SgDados.Cells[2, i], 0) >
          StrToFloatDef(SgDados.Cells[8, i], 0)) then
        begin
          Application.MessageBox(PWideChar('O produto ' + SgDados.Cells[1,
            i] + ' não possui estoque suficiente!'), 'Atenção',
            mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
        end;
      end;
      SgDados.Cells[2, i] := FormatFloatQ(vCasasQtd,
        StrToFloatDef(SgDados.Cells[2, i], 0)); // quantidade
      SgDados.Cells[3, i] := FormatFloatQ(vCasasPreco,
        StrToFloat(SgDados.Cells[3, i])); // preco de venda
      SgDados.Cells[4, i] := FormatFloatQ(vCasasPreco,
        StrToFloat(SgDados.Cells[2, i]) * StrToFloat(SgDados.Cells[3, i]));
      // total
      if not item_cancelado(i) then
      begin // atualiza o valor total da venda
        EdtTotal.Text := FormatFloat('0.00', StrToFloat(EdtTotal.Text) +
          (StrToFloat(SgDados.Cells[9, i]) * StrToFloat(SgDados.Cells[2, i])));
        edtValorBruto.Text := FormatFloat('0.00', StrToFloat(edtValorBruto.Text)
          + (StrToFloat(SgDados.Cells[9, i]) * StrToFloat(SgDados.Cells
          [2, i])));
        // EdtSubTotal.Text := EdtTotal.Text;
      end;
    end;
    SgDados.Refresh;
    EdtDescontoExit(self);
    Application.OnMessage := NaoProcessaMsg;
    EdtConsulta.Setfocus;
    Application.OnMessage := ProcessaMsg;
  end;

  // if (UpperCase(vEmpresa) = 'DISCABOS') OR (UpperCase(vEmpresa) = 'SANTANA') then
  // begin
  // EdtSubTotal.Text:= '0,00';
  // EdtTotal.Text:= '0,00';
  // edtValorBruto.text:= '0,00';
  // EdtDesconto.Text:= LimpaEdtDesconto;
  // if Label15.Visible= true then
  // label15.Text:= '0,00';
  // for I := 1 to SgDados.RowCount - 1 do begin
  // if (SgDados.Cells[1,I] = '') then Break;
  // SgDados.Cells[2,i]:= FormatFloatQ(vCasasQtd, StrToFloat(SgDados.Cells[2,i])); // quantidade
  // SgDados.Cells[3,i]:= FormatFloatQ(vCasasPreco, StrToFloat(SgDados.Cells[3,i])); // preco de venda
  // SgDados.Cells[4,i]:= FormatFloatQ(vCasasPreco,StrToFloat(SgDados.Cells[2,i]) * StrToFloat(SgDados.Cells[3,i]));  // total
  // if not item_cancelado(i) then
  // begin       // atualiza o valor total da venda
  // EdtTotal.Text:= FormatFloat('0.00',StrtoFloat(EdtTotal.Text) +  StrToFloat(SgDados.Cells[4,i]));
  // edtValorBruto.Text := FormatFloat('0.00',StrtoFloat(edtValorBruto.Text) + (StrToFloat(SgDados.Cells[9,i])*StrToFloat(SgDados.Cells[2,i])));
  // EdtSubTotal.Text := EdtTotal.Text;
  // end;
  // end;
  // SgDados.Refresh;
  // Application.OnMessage:= NaoProcessaMsg;
  // EdtConsulta.SetFocus;
  // Application.OnMessage:= ProcessaMsg;
  // end;
end;

procedure TFrmPrincipalPreVenda.SgDadosGetEditText(Sender: TObject;
  ACol, ARow: Integer; var Value: string);
begin
  if (SgDados.Cells[0, SgDados.Row] <> '') and (SgDados.Col = 2) then
    qtdAnteriorNaGrid := StrToFloat(Value);
end;

procedure TFrmPrincipalPreVenda.SgDadosSelectCell(Sender: TObject;
  ACol, ARow: Integer; var CanSelect: Boolean);
begin
  if ACol >= 3 then
    EdtConsulta.Setfocus;
end;

procedure TFrmPrincipalPreVenda.SgDadosSetEditText(Sender: TObject;
  ACol, ARow: Integer; const Value: string);
var
  cdProduto: Integer;
  quantidade: Real;
begin
  // if (Value <> '') and (SgDados.Cells[0, sgdados.Row] <> '') then
  // begin
  //
  // { se a quantidade insertada na grid for positiva, recalculo. Senão, coloco o valor anterior }
  // if QuantidadeGridMaiorQueZero then
  // begin
  // quantidade:= StrToFloatDef(Value, 0);
  // cdproduto:= StrToInt(SgDados.Cells[0, sgdados.Row]);
  // atualizarQuantidadeNaGrid(cdproduto, quantidade, qtdAnteriorNaGrid);
  // end
  // else
  // begin
  // SgDados.Cells[2, SgDados.Row]:= FormatFloatQ(vCasasQtd, qtdAnteriorNaGrid);
  // sgDados.Repaint;
  // end;
  // end;
end;

procedure TFrmPrincipalPreVenda.atualizarQuantidadeNaGrid(cdProduto: Integer;
  quantidade: Real; out quantidadeAnterior: Real);
var
  tipoCompos: TTipoComposicaoProduto;
  qtdDisponivel: Real;
begin
  if not DisponivelNoEstoque(quantidade, cdProduto, True, tipoCompos,
    qtdDisponivel) then
  begin
    Application.OnMessage := NaoProcessaMsg;
    // if tipoCompos <> composto then
    MessageDlg('Quantidade disponível no estoque --> ' + FormatFloat('0.00',
      qtdDisponivel) + ' ', mtWarning, [mbOK], 0);
    // else
    // MessageDlg('Quantidade disponível no estoque --> ' + FormatFloat('0.00', TNEGProduto.getEstoquePossivelProdutoComposto(cdProduto)-vQtd) + ' ', mtWarning,[mbOk],0);
    EdtConsulta.Setfocus;
    EdtConsulta.Clear;
    if (UpperCase(vEmpresa) <> 'DELUC') then
      EdtQtd.Text := '0,000';
    EdtDescUnit.Text := '0,00';
    setLabel23(0);
    CbLote.ItemIndex := -1;
    Application.OnMessage := ProcessaMsg;
    SgDados.Cells[2, SgDados.Row] := FormatFloatQ(vCasasQtd,
      quantidadeAnterior);
    quantidade := quantidadeAnterior;
  end;
  // begin
  if Frac(quantidade) <> 0 then
  begin // a quantidade está fracionada, logo, termos que testar se o produto esta definido como fracionado
    if not validarQuantidadeItemFracionado(SgDados.Cells[10, SgDados.Row]) then
    begin
      Application.OnMessage := NaoProcessaMsg;
      ShowMessage
        ('Incompatibilidade na quantidade digitada.  Este ítem não pode ser vendido fracionado!');
      SgDados.Cells[2, SgDados.Row] := FormatFloatQ(vCasasQtd,
        qtdAnteriorNaGrid);
      Application.OnMessage := ProcessaMsg;
      exit;
    end;
  end;
  With SgDados do
  begin
    prevenda.itens[SgDados.Row - 1].quantidade :=
      StrToFloat(SgDados.Cells[2, SgDados.Row]);
    prevenda.itens[SgDados.Row - 1].SubTotal := prevenda.itens[SgDados.Row - 1]
      .quantidade * prevenda.itens[SgDados.Row - 1].precoVenda;
    { INDICO NO ARRAY SE ESSA LINHA FICARÁ DESTACADA OU NÃO }
    if ((RgOpcoes.ItemIndex = 0) or ((transformarOrcamentoPrevenda = True) and
      (RgOpcoes.ItemIndex = 1))) then
      if ((vEstqNegativo <> 'S') and
        (qtdInsuficienteParaPrevend(StrToInt(Cells[0, Row]),
        StrToFloatDef(Cells[2, Row], 0)) > 0) and
        (TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, Row]))
        .tipoComposicao <> composto)) or
        ((TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, Row]))
        .tipoComposicao = composto) and
        (TNEGProduto.getEstoquePossivelProdutoComposto(StrToInt(SgDados.Cells[0,
        Row]), 1) <= 0)) then
        ArraylinhasDestacadas[Row] := True
      else
        ArraylinhasDestacadas[Row] := false;
    // prevenda.itens[Row-1].quantidade:= StrToFloat(Cells[2,Row]);

    { Abato o valor bruto anterior do item alterado e adiciono o novo valor bruto }
    edtValorBruto.Text := FormatFloat('0.00', StrToFloat(edtValorBruto.Text) -
      (StrToFloat(Cells[9, Row]) * quantidadeAnterior));
    edtValorBruto.Text := FormatFloat('0.00', StrToFloat(edtValorBruto.Text) +
      (StrToFloat(Cells[9, Row]) * quantidade));

    { abato o valor líquido anterior do item alterado }
    EdtTotal.Text := FormatFloat('0.00', StrToFloat(EdtTotal.Text) -
      (StrToFloat(Cells[9, Row]) * StrToFloat(Cells[2, Row])));

    { corrijo o valor líquido do item }
    Cells[4, Row] := FormatFloatQ(vCasasPreco, StrToFloat(Cells[2, Row]) *
      StrToFloat(Cells[3, Row]));

    { adiciono o novo valor líquido }
    EdtTotal.Text := FormatFloat('0.00', StrToFloat(EdtTotal.Text) +
      (StrToFloat(Cells[9, Row]) * StrToFloat(Cells[2, Row])));
    Refresh;
    // EdtSubTotal.Text := EdtTotal.Text;
    EdtDescontoExit(self);
  end;
  quantidadeAnterior := quantidade;
  atualizaEditQtdItens;
  // end
  // else
  // SgDados.Cells[2, SgDados.Row]:= FormatFloatQ(vCasasQtd, qtdAnteriorNaGrid);
end;

procedure TFrmPrincipalPreVenda.chkbxEtiquetaClick(Sender: TObject);
begin
  Cancelar;
end;

procedure TFrmPrincipalPreVenda.chkOcultarProdutosSemEstoqueClick
  (Sender: TObject);
begin
  persistirFormulario;
  AtualizaQryConsulta;
end;

function TFrmPrincipalPreVenda.clienteComRestricaoFinanceira
  (var restricao: TListaRestricao; VendaAtual: string): Boolean;
var
  vEmAberto, vCheques, vChDevolvido, vAtraso, vteste1, vLimite: Real;
  vAuxi: Char;
  resultado: Boolean;
begin
  restricao := [];
  if (vOrcamento = 'N') or (RgOpcoes.ItemIndex = 0) then
  begin
    // if TestaRestricao then exit;
    // Vou testar a situação financeira do cliente
    if (trim(UpperCase(copy_campo(CbxCliente.Text, '|', 1))) <>
      'VENDA A CONSUMIDOR') and (vTeste_do_Financeiro = '1') then
    begin // testo somente se não for venda a consumidor
      resultado := false;
      // vauxi:= 'N';
      vteste1 := 0;
      vLimite := 0;
      vChDevolvido := 0;
      vAtraso := 0;
      With ADOSPLiberacao1 do // pega o limite de crédito do cliente
      begin
        Close;
        Parameters.ParamByName('@Codigo_Cliente').Value :=
          copy_campo(CbxCliente.Text, '|', 2);
        open;
        vLimite := FieldByName('dsLimCredito').AsFloat;
      end;
      if vCliDevedor = 'S' then // Cliente em atraso
      begin
        With ADOSPLiberacao2 do
        begin
          // pega todas as contas abertas e as duplicatas em atraso
          Close;
          Parameters.ParamByName('@CODIGO_CLIENTE').Value :=
            copy_campo(CbxCliente.Text, '|', 2);
          Parameters.ParamByName('@DATA').Value :=
            DateToStr(strtodate(vData_Banco) - vdtBloqueio);
          open;
          vAtraso := FieldByName('Saldo').AsFloat;
          if vAtraso > 0 then
          begin
            restricao := [ATRASO];
            resultado := True;
            // vauxi := 'S';
          end;
          Next;
          vteste1 := FieldByName('Saldo').AsFloat;
        end;
      end;
      With ADOSPLiberacao2 do // pega todas as contas abertas
      begin
        Close;
        Parameters.ParamByName('@CODIGO_CLIENTE').Value :=
          copy_campo(CbxCliente.Text, '|', 2);
        Parameters.ParamByName('@DATA').Value :=
          DateToStr(strtodate(vData_Banco) + 5000);
        open;
        vEmAberto := FieldByName('Saldo').AsFloat;
        Next;
        vteste1 := FieldByName('Saldo').AsFloat;
      end;
      if vLimCredito = 'S' then // Limite de crédito
      begin
        With ADOSPLiberacao3 do
        begin
          Close;
          vEmAberto := vteste1; // valor de todas as duplicatas em aberto
          Parameters.ParamByName('@CODIGO').Value :=
            copy_campo(CbxCliente.Text, '|', 2);
          open;
          vCheques := FieldByName('Saldo2').AsFloat;
          vteste1 := vteste1 + vCheques + StrToFloat(VendaAtual);
          // valorLimiteDisponivel := vLimite - vEmAberto;
          valorLimiteDisponivel := vLimite;
          if (vteste1 > valorLimiteDisponivel) then
          // verifica o limite de crédito
          begin
            restricao := restricao + [LIMITE];
            resultado := True;
            // vauxi := 'S';
          end;
        end;
      end;
      if vCheqDev = 'S' then // Cheque devolvido
      begin
        With ADOSPLiberacao4 do
        begin
          Close;
          Parameters.ParamByName('@CODIGO').Value :=
            copy_campo(CbxCliente.Text, '|', 2);
          open;
          vChDevolvido := FieldByName('Saldo').AsFloat;
          if vChDevolvido > 0 then
          begin
            // vauxi := 'S';
            restricao := restricao + [CHEQUE];
            resultado := True;
          end;
          Close;
        end;
      end;
    end
    else
    begin
      // vauxi := 'N'; // venda a consumidor
      resultado := false;
    end;
  end
  else
  begin
    // vAuxi := 'N';
    resultado := false;
  end;
  // if vauxi = 'S' then // Se passou por alguma das opções acima então chama a tela de liberação
  // begin
  // Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
  // vFlag := '7';
  // FrmPrincipalPreVenda.LiberaVanda;
  // Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
  // end;
  result := resultado;
end;

{
  Verifica se, ao mudar o cliente na prevenda, o DESCONTO do cliente(cadastro cliente) também é diferente
}
function TFrmPrincipalPreVenda.mudouDescontoCadastroCliente: Boolean;
var
  descontoClienteAtual: Real;
begin
  if (codigoClienteAtual <> '') then
  begin
    descontoClienteAtual := TNEGCliente.getDescontoPercentual
      (StrToIntDef(codigoClienteAtual, -1));
    result := (descontoClienteAtual <> TNEGCliente.getDescontoPercentual
      (StrToIntDef(copy_campo(CbxCliente.Text, '|', 2), -1)));
  end
  else
    result := false;
end;

function TFrmPrincipalPreVenda.mudouClienteAlterandoPrevenda: Boolean;
begin
  result := ((RgOpcoes.ItemIndex = 1) and
    (codigoClienteAtual <> trim(copy_campo(CbxCliente.Text, '|', 2))));
end;

{
  Verifica se, ao mudar o cliente na prevenda, o tipo do cliente também é diferente
  (verifica se mudou de um cliente atacado -> varejo ou varejo -> atacado)
}
function TFrmPrincipalPreVenda.mudouTipoClienteAtacadoVarejo: Boolean;
var
  eAtacado: Boolean;
  stringConexao: string;
  cliente : TCliente;
begin
  if (codigoClienteAtual <> '') then
  begin
//    if UpperCase(vEmpresa) = 'GIRORAPIDO' then
//    begin
//      eAtacado := (tipoClienteAtual = 'A');
//      result := (eAtacado <> (vAtacadoVarejo = 'A'));
//    end
//    else
//    begin
      stringConexao := DModulo.Conexao.ConnectionString;
      eAtacado := TNEGCliente.clienteAtacado(stringConexao,
        StrToIntDef(codigoClienteAtual, -1));
      result := (eAtacado <> TNEGCliente.clienteAtacado(stringConexao,
        StrToIntDef(copy_campo(CbxCliente.Text, '|', 2), -1)))
//    end;
  end
  else
    result := false;
end;

function TFrmPrincipalPreVenda.mudouTabelaCliente: Boolean;
var
  cliente : TCliente;
begin
  if (codigoClienteAtual <> '') then
  begin
    result := TNEGCliente.getCliente(StrToInt(codigoClienteAtual)).cdTabelaPreco <>
      TNEGCliente.getCliente(StrToIntDef(copy_campo(CbxCliente.Text, '|', 2), -1)).cdTabelaPreco;
  end
  else
    result := false;
end;

function TFrmPrincipalPreVenda.mudouTipoClienteCrediario: Boolean;
var
  eCrediario: Boolean;
  stringConexao: string;

begin
  if (codigoClienteAtual <> '') then
  begin
    if ((UpperCase(vEmpresa) <> 'CAMARATUBA') OR
      (UpperCase(vEmpresa) = 'CARDOSOACESSORIOS')) then
      result := false
    else
    begin
      stringConexao := DModulo.Conexao.ConnectionString;
      eCrediario := TNEGCliente.isCliente_Crediario(codigoClienteAtual);
      result := (eCrediario <> TNEGCliente.isCliente_Crediario
        (copy_campo(CbxCliente.Text, '|', 2)))
    end;
  end
  else
    result := false;
end;

procedure TFrmPrincipalPreVenda.CbxClienteEnter(Sender: TObject);
begin
  indiceClienteAtual := CbxCliente.ItemIndex;
  codigoClienteAtual := copy_campo(CbxCliente.Text, '|', 2);
  if (Label30.caption = 'Cliente -> Atacado') then
    tipoClienteAtual := 'A'
  else
    tipoClienteAtual := 'V';
end;

procedure TFrmPrincipalPreVenda.SetarClienteNaCombo(cdCliente: string);
var
  i: Integer;
begin
  for i := 0 to (CbxCliente.Items.Count - 1) do
    if (copy_campo(CbxCliente.Items[i], '|', 2) = cdCliente) then
    begin
      CbxCliente.ItemIndex := i;
      CbxCliente.Text := CbxCliente.Items[i];
      PreencherCamposDoClienteSetadoNaCombo;
      Break;
    end;
end;

procedure TFrmPrincipalPreVenda.CbxClienteExit(Sender: TObject);
var
  vEmAberto, vCheques, vChDevolvido, vAtraso, vteste1, vLimite: Real;
  vAuxi: Char;
var
  i, j, pontos: Integer;
  premio: TPremio;
  Cliente: TCliente;
  totalPontos: Integer;
  existeItemLancadoNaGrid, possuiPermissaoParaAlterarCliente: Boolean;
  codigoClienteNovo: string;
begin

  // so testa a restrição se estiver incluindo ou alterando uma prevenda
  // vauxi := 'N';

  if ADOQryCliente.Active then
    CbxCliente.ItemIndex := CbxCliente.Items.IndexOf
      (ADOQryCliente.FieldByName('nmPessoa').AsString + ' | ' +
      ADOQryCliente.FieldByName('cdPessoa').AsString);
  if EdtCdCliente.Text = '' then
  begin
    MessageDlg('Selecione um cliente válido na lista de clientes.', mtWarning,
      [mbOK], 0);
    CbxCliente.Setfocus;
    exit;
  end;
  existeItemLancadoNaGrid := (SgDados.Cells[0, 1] <> '');
  codigoClienteNovo := copy_campo(CbxCliente.Text, '|', 2);
  if (codigoClienteAtual <> codigoClienteNovo) then
    auxiLiberacao := false;

  if (UpperCase(vEmpresa) = 'AQUARIUM') then
  begin
    Cliente := TNEGCliente.getCliente(StrToInt(EdtCdCliente.Text));
    pontos := TNEGCliente.GetTotalPontosClienteFidelidade(Cliente);
    if (pontos > 0) and (codigoClienteAtual <> codigoClienteNovo) then
    begin
      if Cliente <> nil then
      begin
        if TNEGCliente.isClienteFidelizado(Cliente) = false then
        begin
          Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
          Application.MessageBox('Cliente não fidelizado!', 'Atenção',
            mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
          Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
          exit;
        end
        else
        begin
          if TNegPremio.getPremiosAtivos.Count = 0 then
          begin
            Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
            Application.MessageBox
              (Pchar('Todos os prêmios estão com data de validade vencidas!' +
              #13#10 + 'Verifique no cadastro de prêmios.'), 'Atenção',
              mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
            Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
          end;
          // else
          // if TNegPremio.VerificaSeClienteFoiContempladoFidelidade(cliente) = false then
          // Application.MessageBox('Com essa pontuação o cliente ainda não tem direito a prêmios!','Atenção', MB_OK + MB_ICONWARNING + MB_APPLMODAL);
        end;
      end;
      premio := TBuscaObjeto.BuscaPremios(Cliente);
    end;
  end;

//  if UpperCase(vEmpresa) = 'GIRORAPIDO' then
//  begin
//    Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
//    if MessageDlgDef2('Qual o tipo deste Cliente?', 'Confirmação',
//      mtConfirmation, [mbYes, mbOK], mrYes, 0) = mrYes then
//    begin // Yes - varejo, Ok - atacado
//      vAtacadoVarejo := 'V';
//      Label30.caption := 'Cliente -> Varejo';
//    end
//    else
//    begin
//      vAtacadoVarejo := 'A';
//      Label30.caption := 'Cliente -> Atacado';
//    end;
//    Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
//  end;
  if mudouClienteAlterandoPrevenda and (PERMISSAO('821', 'V', false) = 'N') then
  begin
    if FrmCancelamentoVenda.Possui_Permissao('821', 'V', cbxUsuario.Text,
      EdtUsuario.Text) then
      possuiPermissaoParaAlterarCliente := True
    else
    begin
      try
        if FrmCancelamentoVenda <> nil then
          FreeAndNil(FrmCancelamentoVenda);
        FrmCancelamentoVenda := TFrmCancelamentoVenda.Create(self, '821', 'V',
          possuiPermissaoParaAlterarCliente);
        FrmCancelamentoVenda.Copyright.caption :=
          '<<<<   Alteração de Cliente    >>>>';
        FrmCancelamentoVenda.ShowModal;
        FreeAndNil(FrmCancelamentoVenda);
      except
        FreeAndNil(FrmCancelamentoVenda);
      end;
    end;
    if (not possuiPermissaoParaAlterarCliente) then
    begin

      // VOLTA PARA O CLIENTE ORIGINAL DA PRÉ-VENDA
      SetarClienteNaCombo(codigoClienteAtual);
//      if UpperCase(vEmpresa) = 'GIRORAPIDO' then
//        if (tipoClienteAtual = 'A') then
//        begin // Yes - varejo, Ok - atacado
//          vAtacadoVarejo := 'A';
//          Label30.caption := 'Cliente -> Atacado';
//        end
//        else
//        begin
//          vAtacadoVarejo := 'V';
//          Label30.caption := 'Cliente -> Varejo';
//        end;
    end;
  end;
  if (existeItemLancadoNaGrid) and (mudouTipoClienteAtacadoVarejo or
    mudouTipoClienteCrediario or mudouDescontoCadastroCliente or
    mudouTabelaCliente or
    Desconto_Fornecedor or (codigoClienteNovo = '')) then
  begin
    if Application.MessageBox
      (PWideChar
      ('Ao mudar para um cliente de tipo diferente(tabela de preço, atacado, varejo, desconto do cadastro diferente ou crediário) ou informar um cliente inexistente no cadastro, os produtos lançados serão excluídos da prevenda. Deseja continuar?'),
      'Confirmação', mb_IconExclamation + Mb_YesNo) = IdYes then
    begin
      LimpaGrid(prevenda, True);
      EdtTotal.Text := '0,00';
      edtValorBruto.Text := '0,00';
      EdtSubTotal.Text := '0,00';
      edtQtdItens.Text := '0';
      EdtDesconto.Text := LimpaEdtDesconto;
      codigoClienteAtual := copy_campo(CbxCliente.Text, '|', 2);
      BtnAprazo.Enabled := True;
//      if UpperCase(vEmpresa) = 'GIRORAPIDO' then
//        tipoClienteAtual := vAtacadoVarejo;
      EdtConsulta.Setfocus;
    end
    else
    begin
      SetarClienteNaCombo(codigoClienteAtual);
//      if UpperCase(vEmpresa) = 'GIRORAPIDO' then
//        if (tipoClienteAtual = 'A') then
//        begin // Yes - varejo, Ok - atacado
//          vAtacadoVarejo := 'A';
//          Label30.caption := 'Cliente -> Atacado';
//        end
//        else
//        begin
//          vAtacadoVarejo := 'V';
//          Label30.caption := 'Cliente -> Varejo';
//        end;
    end;
  end
  else
  begin
    codigoClienteAtual := copy_campo(CbxCliente.Text, '|', 2);
//    if UpperCase(vEmpresa) = 'GIRORAPIDO' then
//      tipoClienteAtual := vAtacadoVarejo;
  end;
  if TestaRestricao then { 6T9Q-QBN8-6JAH }
    exit;
  if clienteComRestricaoFinanceira(restricaoFinanceira, EdtSubTotal.Text) then
  begin // restricaoFinanceira in [ATRASO,CHEQUE]
    if ((ATRASO in restricaoFinanceira) or (CHEQUE in restricaoFinanceira)) and TestaFinanceiroNaConfirmacao
    then
    begin
      Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
      if Application.MessageBox
        (PWideChar('Restrição: ' + getMensagemRestricao(restricaoFinanceira) +
        #13#10 + #13#10 +
        'Pode ser necessária liberação por senha na confirmação, deseja continuar a prevenda?'),
        'Confirmação', mb_IconExclamation + Mb_YesNo) = IdNo then
      begin
        CbxCliente.Setfocus;
        Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
        exit;
      end
      else
      begin
        EdtConsulta.SelectAll;
        EdtConsulta.Setfocus;
        Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
      end;
    end
    else if (((ATRASO in restricaoFinanceira) or (CHEQUE in restricaoFinanceira)
      ) and (auxiLiberacao = false)) then
    begin
      Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
      vFlag := '7';
      FrmPrincipalPreVenda.LiberaVanda;
      Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
      CbxCliente.Setfocus;
    end
  end;
  begin
    codigoClienteAtual := copy_campo(CbxCliente.Text, '|', 2);
//    if UpperCase(vEmpresa) = 'GIRORAPIDO' then
//      tipoClienteAtual := vAtacadoVarejo;
  end;
  if UpperCase(vEmpresa) = 'PROAUTO' then
    ProautoPreencherVDescontoCliente(EdtCdCliente.Text);
//  if UpperCase(vEmpresa) <> 'GIRORAPIDO' then
    preencherVariaveisCliente(EdtCdCliente.Text);
  AtualizaQryConsulta;
  if UpperCase(vEmpresa) = 'GIRORAPIDO' then
    EdtConsulta.Setfocus;
  // prevenda.Cliente:= TNEGCliente.getCliente(StrToIntDef(codigoClienteAtual, -1));
end;

{ Preenche a variável vDescontoCliente, que só é usada para o cliente PROAUTO }
procedure TFrmPrincipalPreVenda.ProautoPreencherVDescontoCliente
  (codCliente: string);
var
  query: TADOQuery;
begin
  query := TADOQuery.Create(self);
  query.Connection := DModulo.Conexao;
  with query do
  begin
    sql.Text :=
      'Select dsmotivo from cliente WITH (NOLOCK) where cdPessoa = :CDCLIENTE';
    if Length(codCliente) <> 0 then
      Parameters.ParamByName('CDCLIENTE').Value := codCliente
    else // caso n tenha nehum cliente selecionado vou forçar o codigo 1 p n dar mensagem de erro p o usuário
      Parameters.ParamByName('CDCLIENTE').Value := 1;
    open;
    if FieldByName('dsMotivo').AsString <> '' then
    begin
      try
        vDescontoCliente :=
          StrToFloat(FormatFloat('0.00', FieldByName('dsMotivo').AsFloat));
      except
        vDescontoCliente := 0;
        ShowMessage
          ('O desconto do cliente está definido incorretamente. Verifique no cadastro do cliente!');
      end;
    end
    else
      vDescontoCliente := 0;
  end;
end;

{ preenche variáveis de acordo com o cliente selecionado }
procedure TFrmPrincipalPreVenda.preencherVariaveisCliente(codCliente: string);
var
  query: TADOQuery;
begin
  query := TADOQuery.Create(self);
  query.Connection := DModulo.Conexao;
  with query do
  begin
    sql.Text :=
      'Select ISNULL(cdTabelaPreco,0) cdTabelaPreco, dsAtacado from cliente WITH (NOLOCK) where cdPessoa = :CDCLIENTE';
    if Length(codCliente) <> 0 then
      Parameters.ParamByName('CDCLIENTE').Value := codCliente
    else // caso n tenha nehum cliente selecionado vou forçar o codigo 1 p n dar mensagem de erro p o usuário
      Parameters.ParamByName('CDCLIENTE').Value := 1;
    open;
    cdTabelaPreco := FieldByName('cdTabelaPreco').AsInteger;
    if UpperCase(FieldByName('dsAtacado').AsString) = 'S' then
    begin
      vAtacadoVarejo := 'A';
      Label30.caption := 'Cliente -> Atacado';
    end
    else
    begin
      vAtacadoVarejo := 'V';
      Label30.caption := 'Cliente -> Varejo';
    end;
  end;
end;

function TFrmPrincipalPreVenda.TestaRestricao: Boolean;
begin
  TestaRestricao := false;
  with AdoQryLocaliza do
  begin
    sql.Text :=
      'Select dsrestricao, dsMotivo from cliente WITH (NOLOCK) where cdPessoa = :CDCLIENTE';
    if Length(EdtCdCliente.Text) <> 0 then
      Parameters.ParamByName('CDCLIENTE').Value := EdtCdCliente.Text
    else // caso n tenha nehum cliente selecionado vou forçar o codigo 1 p n dar mensagem de erro p o usuário
      Parameters.ParamByName('CDCLIENTE').Value := 1;
    open;
    if UpperCase(vEmpresa) = 'PROAUTO' then
      ProautoPreencherVDescontoCliente(EdtCdCliente.Text);
    if UpperCase(FieldByName('dsrestricao').AsString) = 'S' then
    begin
      Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
      ShowMessage('Restrição para pré-venda: ' + FieldByName('dsMotivo')
        .AsString);
      TestaRestricao := True;
      if (RgOpcoes.ItemIndex = 0) or (RgOpcoes.ItemIndex = 2) then
        CbxCliente.Setfocus
      else
        EdtLancto.Setfocus;
      Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
      exit;
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.Timer2Timer(Sender: TObject);
begin
  if lblMensagem.Left = Panel1.width then
    lblMensagem.Left := -(lblMensagem.width)
  else
    lblMensagem.Left := lblMensagem.Left + 1;
end;

procedure TFrmPrincipalPreVenda.Consultapedidodecompra1Click(Sender: TObject);
begin
  // if (UpperCase(vEmpresa) = 'LAMARAO') or (UpperCase(vEmpresa) = 'AUTOCAR')or(UpperCase(vEmpresa) = 'TOPLINE') or (UpperCase(vEmpresa) = 'TREVO')  then  // nao fazer p autocar
  if (TNEGLoja.getExibirQuantidadesReservadasPreVenda) and
    (UpperCase(vEmpresa) = 'PTINTAS_') then
    exit;
  { With ADOSP_PEDIDO_GARANTIA do begin
    Close;
    Parameters.ParamByName('@OPCAO').Value  := 'P';
    Parameters.ParamByName('@CODIGO').Value := ADOSPConsulta.FieldByName('Código').AsInteger;
    Open;
    Label13.Caption := FieldByName('dtEmissao').AsString;
    Label11.Text := FormatFloat('#,##0.00',ADOSP_PEDIDO_GARANTIA.FieldByName('NrQtd').AsFloat);
    end; }
  with AdoQrySimilar do
  begin
    sql.Text :=
      'Select P.cdPessoa,P.dtEmissao,P.dtChegada,P.dsFormaPgto,                                    '
      + 'P.cdPessoa_1,P.ds_Frete,P.cdTransp,P.nrDesconto,P.dsObs, isnull(P.dsFlag,''N'') as dsFlag,  '
      + 'I.cdProduto,I.NrQtd,I.vlUnitario,I.nrIcms,I.nrFrete,                                        '
      + 'I.nrIpi,I.dsReferForn,isnull(nrQtdChegada,0) as nrQtdChegada,W.nmProduto                    '
      + 'From PedidoCompra P WITH (NOLOCK), ItePedComp I WITH                                        '
      + '(NOLOCK), Produto W WITH (NOLOCK)                                                           '
      + 'Where  I.cdProduto = :CDPRODUTO and isnull(P.dsFlag,''N'') <> ''S'' and                     '
      + 'P.nrLancto = I.nrLancto and I.cdProduto = W.cdProduto                                       '
      + 'and P.nrLancto = I.nrLancto and I.nrqtd > isnull(I.nrqtdchegada,0) Order by P.dtChegada asc ';
    Parameters.ParamByName('CDPRODUTO').Value :=
      ADOSPConsulta.FieldByName('Código').AsInteger;
    open;
    if (FieldByName('dtChegada').AsDateTime <> 0) then
      Label13.Text := DateToStr(DateOf(FieldByName('dtChegada').AsDateTime))
    else
      Label13.Text := '__/__/____';
    Label11.Text := FormatFloat('#,##0.00', FieldByName('NrQtd').AsFloat -
      FieldByName('NrQtdChegada').AsFloat);
    Label11.Refresh;
    Label13.Refresh;
  end;
end;

procedure TFrmPrincipalPreVenda.ConsultaGarantia;
begin
  { With ADOSP_PEDIDO_GARANTIA do begin
    Close;
    Parameters.ParamByName('@OPCAO').Value  := 'G';
    Parameters.ParamByName('@CODIGO').Value := ADOSPConsulta.FieldByName('Código').AsInteger;
    Open;
    label15.Text := FormatFloat('#,##0.00',ADOSP_PEDIDO_GARANTIA.FieldByName('NQtd').AsFloat);
    end; }
  with ADOQuery1 do
  begin
    sql.Text :=
      'Select SUM(I.nrQtd) as Qtd,I.cdProduto                            ' +
      'FROM ((Lancto L WITH (NOLOCK) INNER JOIN Pessoa C WITH (NOLOCK) ON L.cdPessoa = C.cdPessoa) '
      + 'INNER JOIN IteLcto I WITH (NOLOCK) ON (L.dsstatus = I.dsstatus) AND ' +
      '(L.cdPessoa = I.cdPessoa) AND (L.dslancamento = I.dslancamento))  ' +
      'INNER JOIN Produto P WITH (NOLOCK) ON I.cdProduto = P.cdProduto   ' +
      'Where L.dtEmissao >= GETDATE() - 90 and L.dtEmissao <= GETDATE()  ' +
      'and I.cdProduto = :CODIGO and I.dsstatus in (''Q'') and           ' +
      'L.dsCancelado is null and I.cdProduto = P.cdProduto               ' +
      'group by I.nrqtd,I.cdProduto                                      ';
    Parameters.ParamByName('CODIGO').Value :=
      ADOSPConsulta.FieldByName('Código').AsInteger;
    open;
    Label15.Text := FormatFloat('#,##0.00',
      ADOQuery1.FieldByName('Qtd').AsFloat);
  end;
  { TODO -oclaudioo -c : corrigir o o lançaProdutos, o segundo lote lançado automaticamente está ficando com o código do produto errado 08/05/2013 11:52:49 }
end;

procedure TFrmPrincipalPreVenda.preencheArrayLinhasDestacadas;
var
  i: Integer;
  Produto: TDOMProduto;
begin
  limparArrayBoolean(ArraylinhasDestacadas, 0, 299, false);
  for i := 1 to SgDados.RowCount - 1 do
  begin
    if (trim(SgDados.Cells[0, i]) <> '') and (vDestacarItensOcupados) and
      ((RgOpcoes.ItemIndex = 0) or ((transformarOrcamentoPrevenda = True) and
      (RgOpcoes.ItemIndex = 1))) then
    begin
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, i]));
      if (vEstqNegativo <> 'S') and
        (((qtdInsuficienteParaPrevend(StrToInt(SgDados.Cells[0, i]),
        StrToFloatDef(SgDados.Cells[2, i], 0)) > 0) and
        (Produto.tipoComposicao <> composto)) or
        ((Produto.tipoComposicao = composto) and
        (TNEGProduto.getEstoquePossivelProdutoComposto(Produto.cdProduto,
        1) <= 0))) then
        ArraylinhasDestacadas[i] := True
      else
        ArraylinhasDestacadas[i] := false
    end
    else
      Break;
  end;
end;

procedure TFrmPrincipalPreVenda.Excluiritens1Click(Sender: TObject);
var
  L, C, Lauxi: Integer;
begin
  if SgDados.Focused then
  begin
    if MessageDlg('Deseja excluir esta linha?', mtConfirmation, [mbYes, mbNo],
      0) <> mrYes then
    begin
      Application.OnMessage := NaoProcessaMsg;
      EdtConsulta.Setfocus;
      Application.OnMessage := ProcessaMsg;
      exit;
    end;
    EdtTotal.Text := FormatFloat('0.00', StrToFloat(EdtTotal.Text) -
      (StrToFloat(SgDados.Cells[9, SgDados.Row]) * StrToFloat(SgDados.Cells[2,
      SgDados.Row])));
    edtValorBruto.Text := FormatFloat('0.00', StrToFloat(edtValorBruto.Text) -
      (StrToFloatDef(SgDados.Cells[9, SgDados.Row], 0) *
      StrToFloatDef(SgDados.Cells[2, SgDados.Row], 0)));
    EdtDescontoExit(self);
    with SgDados do
    begin
      if Row = RowCount - 1 then
      begin // limpa quando a grid tem só uma linha
        for C := 0 to ColCount do
          Cells[C, Row] := '';
      end
      else
      begin
        for C := 1 to ColCount do
          Cells[C, Row] := '';
        Lauxi := Row;
        for L := Lauxi to RowCount - 1 do
        begin
          for C := 0 to ColCount do
            Cells[C, Row] := Cells[C, Row + 1];
          if Row < RowCount - 1 then
            Row := Row + 1;
        end;
      end;
      Row := 1;
      for L := Row to RowCount - 1 do
      begin
        if Cells[0, L] = '' then
        begin
          Row := L;
          Break;
        end;
      end;
    end;
    SgDados.Refresh;
    preencheArrayLinhasDestacadas;
    SgDados.Repaint;
    Application.OnMessage := NaoProcessaMsg;
    cbxUsuario.Setfocus;
    Application.OnMessage := ProcessaMsg;
    setLabel23(QuantidadeDispEmLotes(ADOSPConsulta.FieldByName('Código')
      .AsInteger));
  end;
end;

procedure TFrmPrincipalPreVenda.Desconto1Click(Sender: TObject);
begin
  if BtnAprazo.Enabled = True then
    BtnAprazoClick(self);
end;

{ Varro a grid e verifico se o produto tem o limite de desconto setado por Fornecedor para evitar
  a mudanca de cliente na combo somente se realmente houver um desconto dado }
function TFrmPrincipalPreVenda.Desconto_Fornecedor: Boolean;
var
  x: Integer;
begin
  if (vLimitarDescontoFornecedor = True) and (codigoClienteAtual <> '') then
  begin
    for x := 1 to SgDados.RowCount do
    begin
      if SgDados.Cells[9, x] = '' then
        Break;
      if (GetLimiteDescontoFornecedor(StrToInt(codigoClienteAtual),
        StrToInt(SgDados.Cells[0, x])) > 0) and
        (TNEGCliente.getTipoPessoa(StrToInt(codigoClienteAtual)) <>
        TNEGCliente.getTipoPessoa(StrToIntDef(copy_campo(CbxCliente.Text, '|',
        2), -1))) then
        if (StrToFloat(SgDados.Cells[3, x]) < StrToFloat(SgDados.Cells[9, x]))
        // Desconto por item
          or (StrToFloat(EdtDesconto.Text) > 0) then
        begin // Desconto no total
          result := True;
          exit;
        end;
    end;
  end;
  result := false;
end;

procedure TFrmPrincipalPreVenda.CbxClienteKeyPress(Sender: TObject;
  var Key: Char);
begin
  if (Key = Char(27)) then
    BtnCancelar.Click;
end;

procedure TFrmPrincipalPreVenda.CbxNomeKeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = Char(27)) then
    BtnCancelar.Click;
end;

procedure TFrmPrincipalPreVenda.cbxUsuarioChange(Sender: TObject);
begin
  limparDadosDoUsuario;
end;

procedure TFrmPrincipalPreVenda.cbxUsuarioExit(Sender: TObject);
begin
  if (cbxUsuario.ItemIndex < 0) and (cbxUsuario.Text <> '') then
  begin
    cbxUsuario.Text := '';
    cbxUsuario.Setfocus;
  end;
end;

procedure TFrmPrincipalPreVenda.BtnAprazoKeyPress(Sender: TObject;
  var Key: Char);
begin
  if (Key = Char(27)) then
    BtnCancelar.Click;
end;

procedure TFrmPrincipalPreVenda.BtnConfirmarKeyPress(Sender: TObject;
  var Key: Char);
begin
  if (Key = Char(27)) then
    BtnCancelar.Click;
end;

procedure TFrmPrincipalPreVenda.BtnCancelarKeyPress(Sender: TObject;
  var Key: Char);
begin
  if (Key = Char(27)) then
    BtnCancelar.Click;
end;

procedure TFrmPrincipalPreVenda.BtnSairKeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = Char(27)) then
    BtnCancelar.Click;
end;

procedure TFrmPrincipalPreVenda.SgDadosKeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = Char(27)) then
    BtnCancelar.Click
  else if (SgDados.Col <> 2) or (SgDados.Cells[0, SgDados.Row] = '') then
    Key := #0
  else
    ValidarNumero(Key);
  // quantidade := StrToFloatDef(SgDados.Cells[2, sgdados.Row],0);
end;

procedure TFrmPrincipalPreVenda.SgDadosKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  cdProduto: Integer;
begin
  if (SgDados.Col = 2) and (SgDados.Cells[0, SgDados.Row] <> '') then
  begin
    // quantidade:= StrToFloatDef(SgDados.Cells[2, sgdados.Row],0);
    cdProduto := StrToInt(SgDados.Cells[0, SgDados.Row]);
    if (StrToFloatDef(SgDados.Cells[2, SgDados.Row], 0) > 0) then
    begin
      // quantidade:= StrToFloatDef(SgDados.Cells[2, sgdados.Row], 0);
      atualizarQuantidadeNaGrid(cdProduto,
        StrToFloatDef(SgDados.Cells[2, SgDados.Row], 0), quantidade);
    end
    else
    begin
      indexGridAux := SgDados.Row;
      // SgDados.Cells[2, SgDados.Row]:= FormatFloatQ(vCasasQtd, quantidade);
      // atualizarQuantidadeNaGrid(cdproduto, StrToFloatDef(SgDados.Cells[2, sgdados.Row],0), quantidade);
      // sgDados.Repaint;
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.DBGrid1KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = Char(27)) then
    BtnCancelar.Click;
  ConsultaReserva;
  if usarLoteValidade = True then
  begin
    montaComboLote;
    setLabel23(QuantidadeDispEmLotes(ADOSPConsulta.FieldByName('Código')
      .AsInteger));
  end;
  Consultapedidodecompra1Click(Sender);
end;

procedure TFrmPrincipalPreVenda.Alterar1Click(Sender: TObject);
begin
  RgOpcoes.ItemIndex := 1;
end;

procedure TFrmPrincipalPreVenda.Oramento1Click(Sender: TObject);
begin
  RgOpcoes.ItemIndex := 2;
end;

procedure TFrmPrincipalPreVenda.ConsultaPreVendas;
var
  query: TADOQuery;
  qtdPrevendas, qtdDeposito: Integer;
begin
  query := TADOQuery.Create(self);
  query.Connection := DModulo.Conexao;
  Label15.Text := '0';
  if ADOSPConsulta.RecordCount > 0 then
  begin
    with query do // Vou pegar o q está reservado  ( OU SEJA NAS OS )
    begin
      sql.Text :=
        'SELECT Sum(I.nrQtd) as Qtd FROM Orcamento O WITH (NOLOCK) INNER JOIN IteOrcamento '
        + 'I WITH (NOLOCK) ON O.nrOrcamento = I.nrOrcamento Where I.cdproduto = :CDPRODUTO '
        + 'and I.dsSituacao <> ''C'' and O.dsImpresso = ''N'' AND o.nrobjeto = 0';
      Parameters.ParamByName('CDPRODUTO').Value :=
        ADOSPConsulta.FieldByName('Código').AsString;
      open;
      if query.FieldByName('Qtd').AsString = '' then
        Label15.Text := '0,00'
      else // if (UpperCase(vEmpresa) <> 'AUTOCAR') then
        Label15.Text := FormatFloat('0.00', FieldByName('Qtd').AsFloat)
    end;
  end
  else
    Label15.Text := '0,00';
  FreeAndNil(query);
  Label15.Refresh;
  Label11.Refresh;
end;

procedure TFrmPrincipalPreVenda.ConsultaReserva;
var
  query: TADOQuery;
  qtdPrevendas, qtdDeposito: Integer;
begin
  query := TADOQuery.Create(self);
  query.Connection := DModulo.Conexao;
  if NOT(UpperCase(vEmpresa) = 'PTINTAS') then
    LblReserva.Text := '0';
  if ADOSPConsulta.RecordCount > 0 then
  begin
    with ADOQuery1 do // Vou pegar o q está reservado  ( OU SEJA NAS OS )
    begin
      // if (UpperCase(vEmpresa) = 'NACIONAL')
      // or (UpperCase(vEmpresa) = 'REIDOFIAT')
      // or (UpperCase(vEmpresa) = 'AUTOCAR')
      // or (UpperCase(vEmpresa) = 'TOPLINE')
      // or (UpperCase(vEmpresa) = 'TREVO')
      // or (UpperCase(vEmpresa) = 'MECATTRON')
      // or (UpperCase(vEmpresa) = 'LAMARAO')
      // then
      if ((TNEGLoja.getExibirQuantidadesReservadasPreVenda) OR
        (UpperCase(vEmpresa) = 'NACIONAL') OR (UpperCase(vEmpresa) = 'RURALPET'))
      then
      begin
        sql.Text :=
          'SELECT Sum(I.nrQtd) as Qtd FROM Orcamento O WITH (NOLOCK) INNER JOIN IteOrcamento I '
          + 'WITH (NOLOCK) ON O.nrOrcamento = I.nrOrcamento Where I.cdproduto = :CDPRODUTO '
          + 'and I.dsSituacao <> ''C'' and O.dsImpresso <> ''S'' and O.nrObjeto <> 0 ';
      end
      else
      begin
        sql.Text :=
          'SELECT Sum(I.nrQtd) as Qtd FROM Orcamento O WITH (NOLOCK) INNER JOIN IteOrcamento '
          + 'I WITH (NOLOCK) ON O.nrOrcamento = I.nrOrcamento Where I.cdproduto = :CDPRODUTO '
          + 'and I.dsSituacao <> ''C'' and O.dsImpresso = ''N'' ';
      end;
      Parameters.ParamByName('CDPRODUTO').Value :=
        ADOSPConsulta.FieldByName('Código').AsString;
      open;
      if NOT(UpperCase(vEmpresa) = 'PTINTAS') then
      begin
        if ADOQuery1.FieldByName('Qtd').AsString = '' then
          LblReserva.Text := '0,00'
        else // if (UpperCase(vEmpresa) <> 'AUTOCAR') then
          LblReserva.Text := FormatFloat('0.00', FieldByName('Qtd').AsFloat);
      end;
    end;
    // if (UpperCase(vEmpresa) = 'AUTOCAR') or (UpperCase(vEmpresa) = 'TOPLINE') or
    // (UpperCase(vEmpresa) = 'TREVO') or (UpperCase(vEmpresa) = 'MECATTRON') or (UpperCase(vEmpresa) = 'LAMARAO')
    if (TNEGLoja.getExibirQuantidadesReservadasPreVenda) and
      (UpperCase(vEmpresa) = 'PTINTAS_') then
    begin
      ConsultaPreVendas;
      Label11.Text := FormatFloat('0.00', ADOSPConsulta.FieldByName('estoque')
        .AsFloat - ADOQuery1.FieldByName('Qtd').AsFloat -
        StrToFloatDef(Label15.Text, 0));
    end
    else if (TNEGLoja.getExibirQuantidadesReservadasPreVenda) then
    begin
      ConsultaPreVendas;
      edtDisponivel.Text := FormatFloat('0.00',
        ADOSPConsulta.FieldByName('estoque').AsFloat - ADOQuery1.FieldByName
        ('Qtd').AsFloat - StrToFloatDef(Label15.Text, 0));
    end;
  end
  else
  begin
    if NOT(UpperCase(vEmpresa) = 'PTINTAS') then
      LblReserva.Text := '0,00';
  end;
end;

procedure TFrmPrincipalPreVenda.EdtCdNomeChange(Sender: TObject);
begin
  // vcdVendedor := EdtCdNome.Text;
end;

procedure TFrmPrincipalPreVenda.EdtCdNomeExit(Sender: TObject);
begin

  // claudio 10-09-2015
  // if (Length(EdtCdNome.Text) > 0) then begin
  // ADOQryNome.Open;
  // if (ADOQryNome.Locate('cdPessoa',EdtCdNome.Text,[])) then begin
  // CbxNome.Text := ADOQryNome.FieldByName('nmPessoa').AsString;
  // vlDescontoVendedor := ADOQryNome.FieldByName('vlDesconto').AsFloat;
  // end else begin
  // CbxNome.ItemIndex := -1;
  // CbxNome.Text := '';
  // ADOQryNome.Close;
  // end;
  // end else begin
  // CbxNome.ItemIndex := -1;
  // CbxNome.Text := '';
  // end;
end;

procedure TFrmPrincipalPreVenda.Cancelar;
begin
  DtLancto.Date := Date;
  EdtConsulta.Clear;
  vProdutoPromocao := '';
  vLancamento := '';
  verificaLucro(0,true);
  edtReferencia.Clear;
  EdtSubTotal.Text := '0,00';
  EdtDesconto.Text := LimpaEdtDesconto; // atribui '0' formatado ao edit
  EdtTotal.Text := '0,00';
  edtValorBruto.Text := '0,00';
  edtTotalIPI.Text := '0,00';
  CbxCliente.ItemIndex := 0;
  // edtLogin.Clear;
  CbxCliente.Enabled := True;
  CbxClienteChange(self);
  if EdtLancto.Text <> '' then
    DesbloqueiaAlteracaoPreVenda(StrToInt(EdtLancto.Text));
  UltimoLancamento;
  LimpaGrid(prevenda);
  if listaLiberacoes <> nil then
    FreeAndNil(listaLiberacoes);
  if (vMudaPreco = 'N') and (EdtPreco.Enabled) then
  begin
    EdtPreco.Enabled := false;
    EdtPreco.Color := clInfoBk;
    EdtDescUnit.Enabled := false;
    EdtDescUnit.Color := clInfoBk;
    EdtConsulta.Setfocus;
  end;
  if not liberaDigitacaoLancamento then
  begin
    EdtLancto.Color := clInfoBk;
    EdtLancto.Enabled := false;
    EdtLancto.ReadOnly := True;
  end;
  EdtCFOP.Clear;
  // CbxCLiente.SetFocus;
  // if RgOpcoes.ItemIndex = 1 then
  // RgOpcoes.ItemIndex := 0;
  if UpperCase(vEmpresa) <> 'TREVO' then
  begin
    if UpperCase(vEmpresa) = 'SANTANA' then
      RgOpcoes.ItemIndex := 2
    else
      RgOpcoes.ItemIndex := 0;
  end
  else
  begin
    if RgOpcoes.ItemIndex = 1 then
    begin
      RgOpcoes.ItemIndex := 0;
      exit;
    end;
  end;
  CbxNome.Text := '';
  EdtCdNome.Text := '';
  // edtusuario.Text := '';
  edtcdLista.Text := '';
  BtnAprazo.Enabled := True;
  vlTotalAnterior := 0;
  ListBox1.Clear;
  ListBox1.Visible := false;
  EdtUsuarioExit(self);
  // FrmPedeSenha.editUsuario.SetFocus;
  // FrmPedeSenha.editUsuario.SelectAll;
end;

procedure TFrmPrincipalPreVenda.Cancelaraprvenda1Click(Sender: TObject);
begin
  FrmRelSaida := TFrmRelSaida.Create(Application);
  try
    FrmPrincipalPreVenda.Enabled := false;
    FrmRelSaida.Position := poMainFormCenter;
    FrmRelSaida.ShowModal;
  finally
    FrmPrincipalPreVenda.Enabled := True;
  end;

  // FrmRelSaida := TFrmRelSaida.Create(Application);
  // try
  // FrmPrincipalPreVenda.Enabled := False;
  // FrmRelSaida.Position := poMainFormCenter;
  // FrmRelSaida.Show;
  // except
  // FrmRelSaida.Free;
  // FrmPrincipalPreVenda.Enabled := True;
  // end;
end;

procedure TFrmPrincipalPreVenda.CdigoAdicional1Click(Sender: TObject);
begin
  RadioGroup1.ItemIndex := 4;
end;

procedure TFrmPrincipalPreVenda.EdtConsultaKeyPress(Sender: TObject;
  var Key: Char);
begin
  if RadioGroup1.ItemIndex = 0 then // CODIGO
    ValidarNumero(Key);
  if (Key = Char(13)) and (RadioGroup1.ItemIndex = 4) then
  begin
    AtualizaQryConsulta;
    if ADOSPConsulta.RecordCount > 0 then
    begin
      ConsultaReserva;
      if usarLoteValidade = True then
        montaComboLote;
    end;
    // With AdoSPConsulta do begin
    // Close;
    // if CheckBox1.Checked = false then
    // Parameters.ParamByName('@DSATIVO').Value := Null
    // else
    // Parameters.ParamByName('@DSATIVO').Value := 'S';
    // Parameters.ParamByName('@ATACADOVAREJO').Value := vAtacadoVarejo;
    // if (Copy(EdtConsulta.Text,1,1) = '2') then  // codigo da balança
    // Parameters.ParamByName('@PESQUISA').Value := Copy(EdtConsulta.Text,1,7)
    // else
    // Parameters.ParamByName('@PESQUISA').Value      := EdtConsulta.Text;
    // Parameters.ParamByName('@OPCAO').Value        := '7'; // pesqisa CODIGO DE BARRAS
    // ADOSPConsultaValor.DisplayFormat   := '#0.00';
    // ADOSPConsultaEstoque.DisplayFormat := '#0.00';
    // ADOSPConsultaPedido.DisplayFormat  := '#0.00';
    // Open; // mostra os dados no dbgrid
    // EdtPreco.Text := FormatFloat('0.000',FieldByName('Valor').AsFloat);
    // montaComboLote;
    // setLabel23(QuantidadeDispEmLotes(ADOSPConsulta.FieldByName('Código').AsInteger));
    // if UpperCase(vEmpresa) = 'ODONTO' then
    // label15.Text     := FormatFloat('0.00',PegaValorAtacado(AdoSpConsulta.FieldByName('código').asInteger));
    // LblListados.Caption := 'Listados --> ' + IntToStr(RecordCount);
    // end;
  end;
  if (Key = Char(27)) then
    BtnCancelar.Click;
end;

procedure TFrmPrincipalPreVenda.ImprimeComprovante(valor: Integer);
var
  Arq: TextFile;
  vcampo_1, vcampo_2, vcampo_3, vcampo_4, vcampo_5, vcampo_6,
    vcampo_7: String[50];
  vTotal, vTotalD, VdescontoReal, vDescontoPorc: Real;
  vtitulo, vformapag, vvencimento: String;
  i: Integer;
  vnumero_invertido: string[10];
  // usado p inverter o numero da prevenda na impressão da via do estoquista
  impressoraSelecionada: Boolean;
  numeroLancamento: Integer;
  isPrevendaOuOrcamento, isReimpressao: Boolean;
  szTexto : AnsiString;
begin
  Editor.Clear;
  if ((UpperCase(vEmpresa) = 'CAMARATUBA') or (UpperCase(vEmpresa) = 'CARIOCA')
    OR (UpperCase(vEmpresa) = 'CARDOSOACESSORIOS')) and (vImpressao_40 = 'S') then
  begin

  end else if (UpperCase(vEmpresa) = 'TREVO') and (vImpressao_80 = 'S') and
    (vOrcamento = 'O') then
  begin
    ImprimeOrcamento(valor);
  end else if (UpperCase(vEmpresa) = 'CICLOMOTOS') and (vOrcamento = 'O') then
  begin
    ImprimeOrcamento(valor);
    exit;
  end else if (UpperCase(vEmpresa) = 'TREVO') and (vOrcamento = 'O') then
  begin
    ImprimeOrcamento(valor);
    exit;
  end;
  if ((vImpressao_40 = 'S') and (vOrcamento <> 'O')) or
    ((vImpressao_40 = 'S') and (UpperCase(vEmpresa) <> 'TREVO')) then
  begin // antes if (vOrcamento <> 'O') and (vImpressao_40 = 'S') then begin
    if (UpperCase(vEmpresa) = 'SODUCATO') then
    begin
      if MessageDlg('Deseja imprimir o Comprovante Pequeno da Pré-Venda \ Orçamento de nº '
        + EdtLancto.Text + ' ?', mtConfirmation, [mbYes, mbNo], 0) = mrNo then
        exit;
    end;
    if not FileExists('Print.bat') then // Caso não encontre o arquivo tenta criar
      ShowMessage('Arquivo Print.bat não foi encontrado!');
    if FileExists('Print.bat') then
    begin // and (vOrcamento <> 'O') // FileExists('Texto.txt') and
      if (UpperCase(vEmpresa) = 'LLPARAFUSOS') then
      begin
        ImprimeLL(valor);
        exit;
      end;
      if (UpperCase(vEmpresa) = 'LLPARAFUSOS') then
        vPergunta_Apos_Comprovante := '2';
      // não pergunta se quer imprimir a pre-venda
      case StrToInt(prevenda.codigoFormaPagamento) of
        0 : vformapag := 'Forma Pgto: A vista';
        1 : vformapag := 'Forma Pgto: A prazo';
        2 : vformapag := 'Forma Pgto: Cartao a Vista';
        3 : vformapag := 'Forma Pgto: Cartao Parcelado';
        4 : vformapag := 'Forma Pgto: Cheque Pre';
        5 : vformapag := 'Forma Pgto: Entrada + Prazo';
        6 : vformapag := 'Forma Pgto: Entrada + Cartao';
        7 : vformapag := 'Forma Pgto: Entrada + Cheque Pre';
        12 : vformapag := 'Forma Pgto: Cheque a Vista';
        13 : vformapag := 'Forma Pgto: Cartao Debito';
        14 : vformapag := 'Forma Pgto: Deposito/Transferencia/Pix';
        15 : vformapag := 'Forma Pgto: Boleto Bancário';
      end;
      vvencimento := '';
      if (RgOpcoes.ItemIndex = 0) or ((vOrcamento = 'N') and (RgOpcoes.ItemIndex = 1)) then
        vtitulo := 'PRE-VENDA'
      else if RgOpcoes.ItemIndex = 2 then
        vtitulo := 'ORCAMENTO';
      // esta primeira impressão referente ao bloco abaixo é somente p a ELETRONICAf NACIONAL
      if (FileExists('Texto.txt') and FileExists('Print.bat') and
        ((UpperCase(vEmpresa) = 'NACIONAL') or (UpperCase(vEmpresa) = 'CICLOMOTOS')
        or (dsCGC = '03821965000133') or (dsCGC = '17111138000160')) // eletronica Campos
        and (RgOpcoes.ItemIndex <> 2) and (vOrcamento <> 'O')) then
      begin
        Editor.Lines.Add('############################################');
        Editor.Lines.Add('Orcamento N. ' + EdtLancto.Text);
        Editor.Lines.Add('Cliente:     ' + copy_campo(CbxCliente.Text, '|', 1));
        Editor.Lines.Add('Vendedor:    ' + CbxNome.Text);
        Editor.Lines.Add('Data:        ' + DateToStr(Date) + '  ' +
          TimeToStr(Time));
        Editor.Lines.Add('Valor:       ' + EdtSubTotal.Text);
        if (StrToInt(prevenda.codigoFormaPagamento) in [3,6]) and
           ((dsCGC = '03821965000133') or (dsCGC = '17111138000160')) then
          Editor.Lines.Add(vformapag + ' ' + FrmFormaPag.edtParcelas.Text )
        else if (UpperCase(vEmpresa) <> 'NACIONAL') then
          Editor.Lines.Add(vformapag);
        if (vMemo <> nil) then
          for i := 0 to vMemo.Lines.Count - 1 do
            Editor.Lines.Add(vMemo.Lines[i]);
        Editor.Lines.Add('############################################');
        if (modeloImpressora <> 'ELGINI9') then
        begin
          Editor.Lines.Add('');
          Editor.Lines.Add('');
          Editor.Lines.Add('');
          Editor.Lines.Add('');
          Editor.Lines.Add('');
          Editor.Lines.Add('');
          Editor.Lines.Add('');
          Editor.Lines.Add('');
          Editor.Lines.Add('');
        end;
        if ((dsCGC = '03821965000133') or (dsCGC = '17111138000160')) and (modeloImpressora = 'ELGINI9') then  // eletronica Campos
        begin
//          szTexto := TNEGPrevenda.retornarCabecalhoEmitente +#10;
          for i := 0 to editor.Lines.Count -1 do
          begin
            szTexto := Concat(szTexto, Editor.Lines[i] +#10);
          end;
          szTexto := szTexto +#10+#10+#10+#10;
          szTexto := Concat(szTexto, '</corte_parcial>');
          szTexto := Concat(szTexto, '</zera>');
          TNEGACBrPosPrint.abrirPorta(FrmPrincipalPreVenda.ACBrPosPrinter);
          FrmPrincipalPreVenda.ACBrPosPrinter.Buffer.Text := PAnsiChar(szTexto);
          FrmPrincipalPreVenda.ACBrPosPrinter.Imprimir;
          Editor.Clear;
          TNEGACBrPosPrint.fecharPorta(FrmPrincipalPreVenda.ACBrPosPrinter);
        end;
        // Ciclomotos e Trevo não imprimirão em um arquivo só
        if (UpperCase(vEmpresa) = 'CICLOMOTOS') or (UpperCase(vEmpresa) = 'TREVO') then
        begin
          try
            AssignFile(Arq, 'Texto.txt');
            Erase(Arq);
            Rewrite(Arq);
            Writeln(Arq, Editor.Text);
          finally
            CloseFile(Arq);
          end; // try
          if (modeloImpressora = 'ELGINI9') then
          begin
            szTexto := TNEGPrevenda.retornarCabecalhoEmitente +#10;
            for i := 3 to editor.Lines.Count -1 do
            begin
              szTexto := Concat(szTexto, Editor.Lines[i] +#10);
            end;
            szTexto := szTexto +#10+#10+#10+#10;
            szTexto := Concat(szTexto, '</corte_parcial>');
            szTexto := Concat(szTexto, '</zera>');
            TNEGACBrPosPrint.abrirPorta(FrmPrincipalPreVenda.ACBrPosPrinter);
            FrmPrincipalPreVenda.ACBrPosPrinter.Buffer.Text := PAnsiChar(szTexto);
            FrmPrincipalPreVenda.ACBrPosPrinter.Imprimir;
            TNEGACBrPosPrint.fecharPorta(FrmPrincipalPreVenda.ACBrPosPrinter);
          end else
          begin
            WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) + 'print.bat')), sw_ShowNormal);
            Sleep(6000);
            if not FileExists('Print.bat') then
              ShowMessage('Não foi encontrado o arquivo Print.bat');
          end;
        end;
      end;
      if (UpperCase(vEmpresa) = 'CICLOMOTOS') then
      // ciclomotos n imprime os ítens
        exit;
      if (UpperCase(vEmpresa) = 'TREVO') or (UpperCase(vEmpresa) = 'LOCMAQ') then
      begin
        if MessageDlg('Imprimir na impressora do estoque?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
          impressoraSelecionada := True // imprime no estoque ( padrao )
        else
          impressoraSelecionada := false; // imprime na outra impressora
      end;
      numeroLancamento := StrToInt(EdtLancto.Text);
      isPrevendaOuOrcamento := (RgOpcoes.ItemIndex <> 3);
      isReimpressao := false;
      if imprimeImpressora40Windows = 'S' then
      // rural pet imprime direto na impressora não fiscal
        FrmPrincipalPreVenda.ImprimeOrcamento2(StrToInt(prevenda.codigoFormaPagamento))
      else
      begin
        if (modeloImpressora = 'ELGINI9') then
        begin
          Editor.Lines.AddStrings(TNEGPrevenda.getComprovantePrevenda
            (numeroLancamento, isReimpressao, isPrevendaOuOrcamento, modeloImpressora));
        end else
          Editor.Lines.AddStrings(TNEGPrevenda.getComprovantePrevenda
            (numeroLancamento, isReimpressao, isPrevendaOuOrcamento));
        try
          if (TNEGLoja.CortarPapel40ColunasPreVenda) and (modeloImpressora <> 'ELGINI9') then
            Editor.Lines.Add(CHR(27) + 'm');
          AssignFile(Arq, 'Texto.txt');
          Rewrite(Arq);
          Writeln(Arq, Editor.Text);
        Finally
          CloseFile(Arq);
        end; // try
        if ((UpperCase(vEmpresa) = 'TREVO') OR (UpperCase(vEmpresa) = 'LOCMAQ'))
          and (impressoraSelecionada) then
        begin
          WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) + 'print1.bat')), sw_ShowNormal)
        end else
        begin
          if (modeloImpressora = 'ELGINI9') then
          begin
            szTexto := TNEGPrevenda.retornarCabecalhoEmitente;
            szTexto := Concat(szTexto,'</ce><inter>'+formatFloat('0000000000',prevenda.numeroPrevenda)+'</inter></zera>'+#10);
            for i := 0 to editor.Lines.Count -1 do
            begin
              szTexto := Concat(szTexto, Editor.Lines[i] +#10);
            end;
            szTexto := szTexto +#10+#10+#10+#10;
            szTexto := Concat(szTexto, '</corte_parcial>');
            szTexto := Concat(szTexto, '</zera>');
            TNEGACBrPosPrint.abrirPorta(FrmPrincipalPreVenda.ACBrPosPrinter);
            FrmPrincipalPreVenda.ACBrPosPrinter.Buffer.Text := PAnsiChar(szTexto);
            FrmPrincipalPreVenda.ACBrPosPrinter.Imprimir;
            TNEGACBrPosPrint.fecharPorta(FrmPrincipalPreVenda.ACBrPosPrinter);
          end else
          begin
            if (UpperCase(vEmpresa) = 'CAMARATUBA') and ((RgOpcoes.ItemIndex = 2) or (prevenda.codigoFormaPagamento <> '1'))  then  // orçamento, e prevenda diferente de A PRAZO (Kamarada), manda para outra impressora 40 colunas
            begin
              if not FileExists('Print2.bat') then
                ShowMessage('Não foi encontrado o arquivo Print2.bat');
              WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) + 'print2.bat')), sw_ShowNormal)
            end else
              WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) + 'print.bat')), sw_ShowNormal);
          end;
        end;
        Sleep(3000);
        if not FileExists('Print.bat') then
          ShowMessage('Não foi encontrado o arquivo Print.bat');
      end;
      if (FileExists('Texto3.txt')) or (FileExists('Print3.bat')) or (FileExists('Print4.bat')) then
      begin // Caso encontre o arquivo manda p impressora and (RgOpcoes.ItemIndex <> 2) and (vtitulo <> 'ORCAMENTO')
        vnumero_invertido :=
          Copy(FormatFloat('000000', StrToFloat(EdtLancto.Text)), 1, 4);
        vnumero_invertido :=
          Copy(FormatFloat('000000', StrToFloat(EdtLancto.Text)), 5, 2) +
          vnumero_invertido;
        Editor.Clear;
        Editor.Lines.Add('----------------ESTOQUISTA----------------');
        Editor.Lines.Add(nmEmpresa);
        Editor.Lines.Add('------------------------------------------');
        if RgOpcoes.ItemIndex = 1 then // quando esta alterando
          Editor.Lines.Add('Reimpressao');
        Editor.Lines.Add('Sequencia: ' + vnumero_invertido + '  Emissao: ' +
          FormatDateTime('dd/mm/yy HH:MM', Now));
        Editor.Lines.Add('------------------------------------------');
        Editor.Lines.Add('Codigo Prat Referencia       Quant   UND');
        With AdoQryLocaliza do
        begin
          sql.Text :=
            'Select P.nmPessoa,T.nmProduto,T.dsReferencia,T.cdFabricante,O.cdPessoa,O.nrOrcamento,' +
          // monta a query para a impressao do orcamento
            'I.cdProduto,O.dtEmissao,I.NrQtd,I.vlPreco,O.nrDesconto,O.dsImpresso,O.dtEmissao,     '
            + 'O.cdCliente,T.dsUnidade,T.dsPrateleira,T.dsProdutoNota                               '
            + 'From Orcamento O WITH (NOLOCK),Pessoa P WITH (NOLOCK),Produto T WITH (NOLOCK),       '
            + 'IteOrcamento I WITH (NOLOCK) Where P.cdPessoa = O.cdPessoa and T.cdProduto = I.cdProduto '
            + 'and I.dsSituacao not in (''C'',''T'') and O.nrOrcamento = I.nrOrcamento and O.nrOrcamento = :NRORCAMENTO '
            + 'Order by T.dsPrateleira,T.nmProduto ';
          Parameters.ParamByName('NRORCAMENTO').Value := EdtLancto.Text;
          open;
        end;
        AdoQryLocaliza.first;
        for i := 1 to AdoQryLocaliza.RecordCount do
        begin
          vcampo_1 := AdoQryLocaliza.FieldByName('cdProduto').AsString;
          while Length(vcampo_1) < 5 do
            vcampo_1 := vcampo_1 + ' ';
          vcampo_2 := TrimRight(Copy(AdoQryLocaliza.FieldByName('dsProdutoNota')
            .AsString, 1, 40));
          while Length(vcampo_2) < 38 do
            vcampo_2 := vcampo_2 + ' ';
          vcampo_3 := FormatFloat('0.00',
            AdoQryLocaliza.FieldByName('nrqtd').AsFloat);
          while Length(vcampo_3) < 4 do
            vcampo_3 := vcampo_3 + ' ';
          vcampo_4 := AdoQryLocaliza.FieldByName('dsUnidade').AsString;
          vcampo_5 := TrimRight(AdoQryLocaliza.FieldByName('dsReferencia')
            .AsString);
          // remove os espaços a direita da referecia p dar  + espaço p a descriçao do produto
          while Length(vcampo_5) < 16 do
            vcampo_5 := vcampo_5 + ' ';
          // VOU COLOCAR PELO - 16 ESPAÇOS P GARANTIR COMEÇAR A DESCRIÇAO BEM ABAIXO
          vcampo_6 := TrimRight(AdoQryLocaliza.FieldByName('dsPrateleira')
            .AsString);
          while Length(vcampo_6) < 4 do
            vcampo_6 := vcampo_6 + ' ';
          // VOU COLOCAR PELO - 10 ESPAÇOS P GARANTIR COMEÇAR A DESCRIÇAO BEM ABAIXO
          Editor.Lines.Add(vcampo_1 + ' ' + vcampo_6 + '  ' + vcampo_5 + ' ' +
            vcampo_3 + '    ' + vcampo_4);
          AdoQryLocaliza.Next;
        end;
        Editor.Lines.Add('------------------------------------------');
        Editor.Lines.Add('Qtd itens: ' + intToStr(AdoQryLocaliza.RecordCount));
        // Total:  '+ FormatFloat('0.00',vTotal)+'');
        if (vMemo <> nil) then
          for i := 0 to vMemo.Lines.Count - 1 do
            Editor.Lines.Add(vMemo.Lines[i]);
        Editor.Lines.Add(' ');
        Editor.Lines.Add('_______________________________________');
        Editor.Lines.Add('              Estoquista');
        Editor.Lines.Add(' ');
        Editor.Lines.Add(' ');
        Editor.Lines.Add(' ');
        Editor.Lines.Add(' ');
        if (TNEGLoja.CortarPapel40ColunasPreVenda) then
          Editor.Lines.Add(Chr(27) + 'm');
        try
          AssignFile(Arq, 'Texto3.txt');
          Rewrite(Arq);
          Writeln(Arq, Editor.Text);
        Finally
          CloseFile(Arq);
        end; // try
        if ((UpperCase(vEmpresa) = 'TREVO') OR (UpperCase(vEmpresa) = 'LOCMAQ'))
          and (impressoraSelecionada) then
        begin
          WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
            'print4.bat')), sw_ShowNormal)
        end
        else
          WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
            'print3.bat')), sw_ShowNormal);
        // a trevo solicitou que imprima também uma cópia dessa mesma impressão do estoquista, mas com algumas modificações
      end;
    end;
  end;
end;

function TFrmPrincipalPreVenda.PegaNomeFabricante(cdProduto: Integer): string;
begin
  with ADOQryProcura do
  begin
    sql.Text :=
      'SELECT nmPessoa FROM Pessoa P with (nolock) INNER JOIN Produto Pr with (nolock) '
      + 'ON P.cdPessoa = Pr.cdPessoa_1 where pr.cdProduto = :CDPRODUTO';
    Parameters.ParamByName('CDPRODUTO').Value := cdProduto;
    open;
    result := FieldByName('nmPessoa').AsString;
  end;
end;

function TFrmPrincipalPreVenda.isProdutoPromocao(cdProduto: Integer): Boolean;
begin
  with ADOQryProcura do
  begin
    sql.Text :=
      'SELECT I.dsPromocao FROM ItePromocao I with (nolock) INNER JOIN Produto P with (nolock) '
      + 'ON I.cdProduto = P.cdProduto where P.cdProduto = :CDPRODUTO';
    Parameters.ParamByName('CDPRODUTO').Value := cdProduto;
    open;
    result := FieldByName('dsPromocao').AsString = 'S';
  end;
end;

function TFrmPrincipalPreVenda.PegaValorAtacado(cdProduto: Integer): Real;
begin
  with ADOQryProcura do
  begin
    sql.Text :=
      'Select vlAtacado from Produto WITH (NOLOCK) where cdproduto = :CD';
    Parameters.ParamByName('CD').Value := cdProduto;
    open;
    result := FieldByName('vlAtacado').AsFloat;
  end;
end;

function TFrmPrincipalPreVenda.PegaValorVarejo(cdProduto: Integer): Real;
begin
  with ADOQryProcura do
  begin
    sql.Text :=
      'Select vlPreco from Produto WITH (NOLOCK) where cdproduto = :CD';
    Parameters.ParamByName('CD').Value := cdProduto;
    open;
    result := FieldByName('vlPreco').AsFloat;
  end;
end;

procedure TFrmPrincipalPreVenda.ImprimeLL(valor: Integer);
var
  Arq: TextFile;
  Imp: TextFile;
  Text, vformapag: string;
begin
  Editor.Clear;
  Editor.Lines.Add('       **S E M  V A L O R  F I S C A L**');
  Editor.Lines.Add(' ');
  Editor.Lines.Add('=============================================');
  Editor.Lines.Add('Cliente: ' + EdtCdCliente.Text + '-' +
    Copy(copy_campo(CbxCliente.Text, '|', 1), 1, 39));
  Editor.Lines.Add('' + EdtEndereco.Text);
  Editor.Lines.Add(' ');
  Editor.Lines.Add('=============================================');
  Editor.Lines.Add('Orcamento ' + EdtLancto.Text + '       Data:   ' +
    DateToStr(Date));
  Editor.Lines.Add('Vendedor: ' + CbxNome.Text);
  Editor.Lines.Add('Desc  R$: ' + FormatFloat('0.00', StrToFloat(EdtTotal.Text)
    - StrToFloat(EdtSubTotal.Text)) + ' SubTotal R$: ' + EdtTotal.Text);
  Editor.Lines.Add('Total R$: ' + EdtSubTotal.Text);
  Editor.Lines.Add('=============================================');
  case valor of
    0:
      vformapag := 'Forma Pgto: A vista';
    1:
      vformapag := 'Forma Pgto: A prazo';
    2:
      vformapag := 'Forma Pgto: Cartao a Vista';
    3:
      vformapag := 'Forma Pgto: Cartao Parcelado';
    4:
      vformapag := 'Forma Pgto: Cheque Pre';
    5:
      vformapag := 'Forma Pgto: Entrada + Prazo';
    6:
      vformapag := 'Forma Pgto: Entrada + Cartao';
    7:
      vformapag := 'Forma Pgto: Entrada + Cheque Pre';
    12:
      vformapag := 'Forma Pgto: Cheque a Vista';
    13:
      vformapag := 'Forma Pgto: Cartao Debito';
    14:
      vformapag := 'Forma Pgto: Deposito/Transferencia/Pix';
  end;
  Editor.Lines.Add(vformapag);
  Editor.Lines.Add(' ');
  Editor.Lines.Add(' ');
  Editor.Lines.Add(' ');
  Editor.Lines.Add(' ');
  Editor.Lines.Add(' ');
  Editor.Lines.Add(' ');
  try
    AssignFile(Arq, 'Texto.txt');
    Erase(Arq);
    Rewrite(Arq);
    Writeln(Arq, Editor.Text);
  Finally
    CloseFile(Arq);
  end; // try
  if vPAFECF = false then
    WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
      'print.bat')), sw_ShowNormal);
  if not FileExists('Print.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  // ShowMessage('Pré-venda realizada com sucesso!');
end;

procedure TFrmPrincipalPreVenda.Panel3Resize(Sender: TObject);
begin
  btnMensagem.Visible := false;
  if Panel3.height < 100 then
    Panel3.height := 100;
end;

procedure TFrmPrincipalPreVenda.PegaClienteAtacadoVarejo;
begin
  with AdoQryLocaliza do
  begin
    sql.Text :=
      'Select dsrestricao,dsmotivo,dsAtacado from cliente WITH (NOLOCK) where cdPessoa = :CDCLIENTE';
    Parameters.ParamByName('CDCLIENTE').Value := EdtCdCliente.Text;
    open;
    if UpperCase(FieldByName('dsAtacado').AsString) = 'S' then
    begin
      vAtacadoVarejo := 'A';
      Label30.caption := 'Cliente -> Atacado';
    end
    else
    begin
      vAtacadoVarejo := 'V';
      Label30.caption := 'Cliente -> Varejo';
    end;
    AtualizaQryConsulta;
  end;
end;

procedure TFrmPrincipalPreVenda.Imprimiretiquetas1Click(Sender: TObject);
var
  escolha: TModalResult;
begin
  if vFlagEtiqueta = '' then
  begin
    MessageDlg('Ausência do flag do cliente no support.ini', mtWarning,
      [mbOK], 0);
    exit;
  end;
//  if UpperCase(vFlagEtiqueta) = 'AMORBEBE' then // ARGOX
//    ImprimeEtiquetaAmorBebe;
  if UpperCase(vFlagEtiqueta) = 'ALICEDINIZ' then // ARGOX
    ImprimeEtiquetaAliceDiniz;
  if UpperCase(vFlagEtiqueta) = 'LISTO' then // ARGOX
    ImprimeEtiquetaListo;
  if UpperCase(vFlagEtiqueta) = 'TECNO' then // ARGOX
    ImprimeEtiquetaTecno;
  if UpperCase(vFlagEtiqueta) = 'ANTONIO' then // ARGOX
    ImprimeEtiquetaSantoAntonio;
  if UpperCase(vFlagEtiqueta) = 'ROSAMENINA' then // ARGOX OS 214 PLUS
    ImprimeEtiquetaRosaMenina;
  if UpperCase(vFlagEtiqueta) = 'DELUC' then // GK
    ImprimeEtiquetasDeluc;
  if UpperCase(vFlagEtiqueta) = 'GENTEPEQUENA' then // TLP 2844
    ImprimeEtiquetasGentePequena;
  if UpperCase(vFlagEtiqueta) = 'VAREJAO' then // TLP 2844
    ImprimeEtiquetasVarejao;
  if UpperCase(vFlagEtiqueta) = 'BIJOUARTSMAIOR' then // ARGOX
    ImprimeEtiquetasBijouArtsMaior;
  if UpperCase(vFlagEtiqueta) = 'LINDASTORE' then // BEMATECH LB-1000
    ImprimeEtiquetasLindaStore;
  if UpperCase(vFlagEtiqueta) = 'BIJOUARTS' then // ELGIN
    ImprimeEtiquetasBijouArts;
  if UpperCase(vFlagEtiqueta) = 'BIJOUARTSTT' then // OS214TT
    ImprimeEtiquetasBijouArtsOS214TT;
  if UpperCase(vFlagEtiqueta) = 'SHOEZ' then // OS214TT
    ImprimeEtiquetasShoez;
  if UpperCase(vFlagEtiqueta) = 'DIJU' then // OS214TT
    ImprimeEtiquetas_Diju_New;
  if UpperCase(vFlagEtiqueta) = 'LAYEVICTOROS214' then // ELGIN
    ImprimeEtiquetaLayeVictorOS214;
  if UpperCase(vFlagEtiqueta) = 'LAYEVICTOR' then
  begin // ELGIN
    if MessageDlgDef('Escolha qual tipo de etiqueta:', 'Impressão',
      mtConfirmation, [mbOK, mbCancel], mrOK, 0) = mrOK then
    // ok - Pequena,Cancel - Grande
      ImprimeEtiquetaLayeVictor
    else
      ImprimeEtiquetaGrandeLayeVictor;
  end;
  if UpperCase(vFlagEtiqueta) = 'LAYELUC' then // ELGIN
    ImprimeEtiquetas_ELGIN_LAYELUC;    //ImprimeEtiquetaLayeLuc;
  if UpperCase(vFlagEtiqueta) = 'MERCATTO' then // ELGIN
    ImprimeEtiquetas_Mercatto;
  if UpperCase(vFlagEtiqueta) = 'DUMBU' then begin// ELGIN
    FrmDuasEtiquetas := TFrmDuasEtiquetas.Create(Application);
    FrmDuasEtiquetas.BitBtn1.Caption := 'Etiqueta pequena';
    FrmDuasEtiquetas.BitBtn3.Caption := 'Etiqueta grande';
    escolha := FrmDuasEtiquetas.ShowModal;
    if escolha = mrCancel then
      ImprimeEtiquetas_DUMBU
    else if escolha = mrOK then
      ImprimeEtiqueta_Dumbu_Gondola_Pequena;
  end;
  if UpperCase(vFlagEtiqueta) = 'MINIMERCADOMAISECONOMIA' then begin// ELGIN
    FrmDuasEtiquetas := TFrmDuasEtiquetas.Create(Application);
    FrmDuasEtiquetas.BitBtn1.Caption := 'Etiqueta Pequena';
    FrmDuasEtiquetas.BitBtn3.Caption := 'Etiqueta Grande';
    escolha := FrmDuasEtiquetas.ShowModal;
    if escolha = mrCancel then
      ImprimeEtiquetas_MiniMercadoMaisEconomia_Gondola
    else if escolha = mrOK then
      ImprimeEtiquetas_MiniMercadoMaisEconomia_Gondola_Mini;
  end;
  if UpperCase(vFlagEtiqueta) = 'NEGROMONTE' then begin// ELGIN
    FrmDuasEtiquetas := TFrmDuasEtiquetas.Create(Application);
    FrmDuasEtiquetas.BitBtn1.Caption := 'Etiqueta três colunas';
    FrmDuasEtiquetas.BitBtn3.Caption := 'Etiqueta pequena';
    escolha := FrmDuasEtiquetas.ShowModal;
    if escolha = mrCancel then
      ImprimeEtiquetas_NegroMonte_Joia
    else if escolha = mrOK then
      ImprimeEtiquetas_NegroMonte_3_Colunas;
  end;
  if UpperCase(vFlagEtiqueta) = 'AMORBEBE' then // ELGIN
    ImprimeEtiquetas_AMORBEBE;
  if UpperCase(vFlagEtiqueta) = 'EMPORIOVERDEBRASIL' then // ELGIN L42 DT
    ImprimeEtiquetas_EmporioVerdeBrasil;
  if UpperCase(vFlagEtiqueta) = 'PANDORO' then // ELGIN
    ImprimeEtiquetas_Pandoro_Pequena;
  if UpperCase(vFlagEtiqueta) = 'AQUIACHA' then // ELGIN
    ImprimeEtiquetas_AquiAcha;
  if UpperCase(vFlagEtiqueta) = 'SAOMARCOS' then // ELGIN
    ImprimeEtiquetas_SAOMARCOS;
  if UpperCase(vFlagEtiqueta) = 'TOKADASGRIFES' then // ZEBRA GC 420t
    ImprimeEtiquetas_TokaDasGrifes;
  if UpperCase(vFlagEtiqueta) = 'CARDOSO' then // ELGIN L42PRO
    ImprimeEtiquetas_Cardoso;
  if UpperCase(vFlagEtiqueta) = 'GIOVANNA' then // ELGIN
    ImprimeEtiquetas_Geovana;
  if UpperCase(vFlagEtiqueta) = 'JMCOMERCIO' then // ELGIN
    ImprimeEtiquetas_JMComercio;
  if UpperCase(vFlagEtiqueta) = 'LORDKIDS' then // ELGIN
    ImprimeEtiquetaLordKids;
  if UpperCase(vFlagEtiqueta) = 'LAYEVICTORARGOXOS214' then // Argox OS 214 A
    ImprimeEtiquetaLayeVictorArgoxOS214;
  if UpperCase(vFlagEtiqueta) = 'SEMPRE' then // ARGOX
    ImprimeEtiquetasTemdeTudoSempre;
  if UpperCase(vFlagEtiqueta) = 'JALVES' then
  begin // ARGOX  OS-214
    FrmTresEtiquetas := TFrmTresEtiquetas.Create(Application);
    escolha := FrmTresEtiquetas.ShowModal;
    if escolha = mrOK then
      ImprimeEtiquetasJALVES_Grande
    else if escolha = mrCancel then
      ImprimeEtiquetasJALVES_Gondola
    else if escolha = mrAbort then
      ImprimeEtiquetasJALVES_Pequena;
  end;
  if UpperCase(vFlagEtiqueta) = 'ANADRI' then
  begin // ARGOX  OS-214
    FrmTresEtiquetas := TFrmTresEtiquetas.Create(Application);
    FrmTresEtiquetas.BitBtn1.Caption := 'Dupla Barras/Código';
    FrmTresEtiquetas.BitBtn2.Caption := 'Dupla contém Barras/Código';
    FrmTresEtiquetas.BitBtn3.Caption := 'Etiqueta Grande';
    escolha := FrmTresEtiquetas.ShowModal;
    if escolha = mrOK then
      ImprimeEtiquetas_Anadri_A
    else if escolha = mrCancel then
      ImprimeEtiquetas_Anadri_B
    else if escolha = mrAbort then
      ImprimeEtiquetas_Anadri_C;
  end;

  if UpperCase(vFlagEtiqueta) = 'CONSTRUFORT' then
  begin // ARGOX  OS-214
    FrmTresEtiquetas := TFrmTresEtiquetas.Create(Application);
    FrmTresEtiquetas.BitBtn1.Caption := 'Gondola';
    FrmTresEtiquetas.BitBtn2.Caption := '3 colunas';
    FrmTresEtiquetas.BitBtn3.Caption := '3 colunas c/ preço';
    escolha := FrmTresEtiquetas.ShowModal;
    if escolha = mrOK then
      ImprimeEtiquetas_ConstruFort_Gondola
    else if escolha = mrCancel then
      ImprimeEtiquetas_ConstruFort_3_Colunas
    else if escolha = mrAbort then
      ImprimeEtiquetas_ConstruFort_3_Colunas_Preco;
  end;

  if UpperCase(vFlagEtiqueta) = 'DIEGOCUNHA' then
  begin // ELGIN L42
    FrmDuasEtiquetas := TFrmDuasEtiquetas.Create(Application);
    escolha := FrmDuasEtiquetas.ShowModal;
    if escolha = mrCancel then
      ImprimeEtiquetasDIEGOCUNHA_3COLUNAS
    else if escolha = mrOK then
      ImprimeEtiquetasDIEGOCUNHA_GONDOLA
  end;

  if UpperCase(vFlagEtiqueta) = 'EVANDRO' then
  begin // ELGIN L42
    ImprimeEtiquetaNutriMix;
  end;

  if UpperCase(vFlagEtiqueta) = 'ANERIFIT' then begin
    ImprimeEtiquetaPR_ELGIN // ok
  end;

  if UpperCase(vFlagEtiqueta) = 'OBARATEIRO' then begin
    ImprimeEtiquetaPR_ELGIN // ok
  end;

  if UpperCase(vFlagEtiqueta) = 'VIVA' then
  begin // ELGIN L42
    FormTresEtiquetasViva := TFormTresEtiquetasViva.Create(Application);
    escolha := FormTresEtiquetasViva.ShowModal;
    if escolha = mrOK then
      ImprimeEtiquetaPR_ELGIN // ok
    else if escolha = mrAbort then
      ImprimeEtiquetasVIVA_GONDOLA_PEQUENA // GONDOLA PEQUENA
    else if escolha = mrCancel then
      ImprimeEtiquetasVIVA_3COLUNAS;
  end;

  if (UpperCase(vFlagEtiqueta) = 'RURALPET') or
    (UpperCase(vFlagEtiqueta) = 'VLSTURISMO') then
  begin // ELGIN L42
    FormTresEtiquetasRural := TFormTresEtiquetasRural.Create(Application);
    escolha := FormTresEtiquetasRural.ShowModal;
    if escolha = mrOK then
      ImprimeEtiquetaGrandeDuploRural // ok
    else if escolha = mrAbort then
      ImprimeEtiquetaGrandeTriploRural // GONDOLA PEQUENA
    else if escolha = mrCancel then
      ImprimeEtiquetaPequenoTriploRural;
  end
  else if (UpperCase(vFlagEtiqueta) = 'IMA') or (UpperCase(vFlagEtiqueta) = 'ZANQUY') or
  (UpperCase(vFlagEtiqueta) = 'YZLU') or (UpperCase(vFlagEtiqueta) = 'YZLUCENTRO') or
  (UpperCase(vFlagEtiqueta) = 'ZANQUYSHOPPING') or (UpperCase(vFlagEtiqueta) = 'EQUILIBRIO') or
  (UpperCase(vFlagEtiqueta) = 'AQUARELA') or (UpperCase(vFlagEtiqueta) = 'DOFF') or
  (UpperCase(vFlagEtiqueta) = 'YZLUPEIXOTO') then // ELGIN L42
    case ChamaInputBoxEtiquetaZanquy('Seleção de modelo',
        'Escolha o modelo de etiqueta na lista abaixo:') of
      0 : ImprimeEtiquetaZANQUY;
      1 : ImprimeEtiquetaYZLU;
      2 : ImprimeEtiquetaYZLUCENTRO;
      3 : ImprimeEtiquetaZANQUY_ELGIN;
      4 : ImprimeEtiquetaEquilibrio_ELGIN;
      5 : ImprimeEtiquetaAQUARELA_ELGIN;
      6 : ImprimeEtiquetaYZLUCALCADOS;//ImprimeEtiquetaIMA;
      7 : ImprimeEtiquetaDOFF;
      8 : ImprimeEtiquetaQUIVER;
      9 : ImprimeEtiquetaYZLUPEIXOTO;
    end
  else if (UpperCase(vFlagEtiqueta) = 'CAMPOS')  then // ELGIN L42
    case ChamaInputBoxEtiquetaCAMPOS('Seleção de modelo',
        'Escolha o modelo de etiqueta na lista abaixo:') of
      0 : ImprimeEtiquetas_CAMPOS_1Col_Varejo;
      1 : ImprimeEtiquetas_CAMPOS_1Col_VarejoAtacado;
      2 : ImprimeEtiquetas_CAMPOS_Menor_Descricao;
      3 : ImprimeEtiquetas_CAMPOS_Maior_Descricao;
      4 : ImprimeEtiquetas_CAMPOS_2Col_1SubGrupo;
      5 : ImprimeEtiquetas_CAMPOS_2Col_2SubGrupo;
      6 : ImprimeEtiquetas_CAMPOS_2Col_3SubGrupo;//ImprimeEtiquetaIMA;
      7 : ImprimeEtiquetas_CAMPOS_2Col_4SubGrupo;
      8 : ImprimeEtiquetas_CAMPOS_2Col_Gaveta;
      9 : ImprimeEtiquetas_CAMPOS_2Col_AtacadoVarejo;
      10: ImprimeEtiquetas_CAMPOS_1Col_Varejo_Logo;
      11: ImprimeEtiquetas_CAMPOS_1Col_VarejoAtacado_Logo;
      12: ImprimeEtiquetas_CAMPOS_Sem_Descricao_Varejo_Logo;
      13: ImprimeEtiquetas_CAMPOS_Sem_Descricao_2Col_Logo;
      14: ImprimeEtiquetas_CAMPOS_Sem_Descricao_VarejoAtacado_Logo;
      15: ImprimeEtiquetas_CAMPOS_Mini_3Col_Logo;
    end
  else if UpperCase(vFlagEtiqueta) = 'GAMBIARRA' then // ELGIN L42
    ImprimeEtiquetaGAMBIARRA
  else if UpperCase(vFlagEtiqueta) = 'COISABOA' then // ELGIN L42
    ImprimeEtiquetasCOISABOA
  else if UpperCase(vFlagEtiqueta) = 'CRUZEIRO' then // ELGIN L42
    ImprimeEtiquetasCruzeiro
  else if UpperCase(vFlagEtiqueta) = 'BEMBARATINHO' then // ELGIN L42
    ImprimeEtiquetasMiniMercadoBemBaratinho
  else if UpperCase(vFlagEtiqueta) = 'SAFIRAZEBRA' then // ZEBRA TLP 2844 then
    ImprimeEtiquetasSafiraZebra
  else if UpperCase(vFlagEtiqueta) = 'SERAFINA' then // ELGIN L42
    ImprimeEtiquetaSerafina
  else if UpperCase(vFlagEtiqueta) = 'SABORESDAVILA' then // ELGIN L42
    ImprimeEtiquetasSaboresDaVila
  else if UpperCase(vFlagEtiqueta) = 'FAROFACHICBIJOUX' then // ELGIN L42
    ImprimeEtiquetasFarofaChicBijoux
  else if UpperCase(vFlagEtiqueta) = 'CASADASPICKUPS' then // ZEBRA
    ImprimeEtiquetasCasaDasPickups
  else if UpperCase(vFlagEtiqueta) = 'LACASADECOR' then // ELGIN L42
    ImprimeEtiquetasLaCasaDecor
  else if UpperCase(vFlagEtiqueta) = 'DESCONTAO' then // ELGIN L42
    ImprimeEtiquetaDescontao
  else if UpperCase(vFlagEtiqueta) = 'RITMOS' then // ELGIN L42 PRO
    ImprimeEtiquetasRITMOS
  else if UpperCase(vFlagEtiqueta) = 'LOSSANTOS' then begin // ARGOX L42 PRO
    FrmDuasEtiquetas := TFrmDuasEtiquetas.Create(Application);
    escolha := FrmDuasEtiquetas.ShowModal;
    if escolha = mrCancel then
      ImprimeEtiquetasLosSantos_3Colunas
    else if escolha = mrOK then
      ImprimeEtiquetasLosSantos
  end
  else if UpperCase(vFlagEtiqueta) = 'ONIX' then begin // ARGOX L42 PRO
    FrmDuasEtiquetas := TFrmDuasEtiquetas.Create(Application);
    FrmDuasEtiquetas.BitBtn1.Caption := 'Ouro';
    FrmDuasEtiquetas.BitBtn3.Caption := 'Folheados';
    escolha := FrmDuasEtiquetas.ShowModal;
    if escolha = mrCancel then
      ImprimeEtiquetasONIX_FOLHEADOS
    else if escolha = mrOK then
      ImprimeEtiquetasONIX_OURO;
  end
  else if UpperCase(vFlagEtiqueta) = 'SAFIRAARGOX' then
    ImprimeEtiquetasSafiraArgox
  else if UpperCase(vFlagEtiqueta) = 'JNUNES' then begin
    if MessageDlg('Escolha SIM para 3 Colunas ou NÃO para Gondola',
      mtConfirmation, [mbYes, mbNo], 0) = mrYes then
        ImprimeEtiquetasJNUNES_3COL
    else
      ImprimeEtiquetasJNUNES_Gondola;
  end
  else if UpperCase(vFlagEtiqueta) = 'BIJOUARTSZEBRA' then // ZEBRA TLP 2844
    ImprimeEtiquetasBijouArtsZebra
  else if UpperCase(vFlagEtiqueta) = 'BIJOUARTSOS214' then // ZEBRA OS214
    ImprimeEtiquetasBijouArtsOS214
  else if (UpperCase(vFlagEtiqueta) = 'PIPELINE') or
    (UpperCase(vFlagEtiqueta) = 'LITORAL655') then
  // ZEBRA TLP 2844 - LITORAL 655(CENTRO) E PIPELINE
    ImprimeEtiquetasPipelaine
  else if (UpperCase(vFlagEtiqueta) = 'LITORALSHOPPING') then
  // ZEBRA TLP 2844 - SHOPPING E RUA GERU
    ImprimeEtiquetasPipelaineShopping
  else if (UpperCase(vFlagEtiqueta) = 'DISCABOS') then
  // ZEBRA TLP 2844 - SHOPPING E RUA GERU
    ImprimeEtiquetasDisCabos
  else if (UpperCase(vFlagEtiqueta) = 'KARIB') then
  begin // ZEBRA TLP 2844 - SHOPPING E RUA GERU
    if MessageDlg('Escolha SIM para folheados ou NÃO para jóias',
      mtConfirmation, [mbYes, mbNo], 0) = mrYes then
      ImprimeEtiquetasCaribe
    else
      ImprimeEtiquetasCaribe2;
  end
  else if (UpperCase(vFlagEtiqueta) = 'SAOJOSE') then
  // ZEBRA TLP 2844 - SHOPPING E RUA GERU
    ImprimeEtiquetasSaoJose
  else if (UpperCase(vFlagEtiqueta) = 'PR') then
  // ZEBRA TLP 2844 - SHOPPING E RUA GERU
    ImprimeEtiquetaPR
  else if (UpperCase(vFlagEtiqueta) = 'PRELGIN') then
  // ZEBRA TLP 2844 - SHOPPING E RUA GERU
    ImprimeEtiquetaPR_ELGIN
  else if (UpperCase(vFlagEtiqueta) = 'JOALHERIAFONTES') then // ARGOX 214
    ImprimeEtiquetasJoalheriaFontes
  else if (UpperCase(vFlagEtiqueta) = 'SAOJOAO') then // GONDOLA ELGIN
    ImprimeEtiquetaSAOJOAO
  else if (UpperCase(vFlagEtiqueta) = 'PRECINHO10') then
    ImprimeEtiquetaPRECINHO10
  else if (UpperCase(vFlagEtiqueta) = 'BRAZNAMODA') then
    ImprimeEtiquetaBRAZNAMODA
  else if (UpperCase(vFlagEtiqueta) = 'SAOJUDASTADEU18') then
  // ZEBRA TLP 2844 - SHOPPING E RUA GERU
    ImprimeEtiquetaMERCADINHOSAOJUDASTADEU18_ELGIN
  else if (UpperCase(vFlagEtiqueta) = 'ECONOMIZE') then
    ImprimeEtiquetaECONOMIZE_ELGIN
  else if (UpperCase(vFlagEtiqueta) = 'ELETROSAT') then
  begin
    FormQuatroEtiquetas := TFormQuatroEtiquetas.Create(Application);
    escolha := FormQuatroEtiquetas.ShowModal;
    if escolha = mrOK then
      ImprimeEtiquetaEletroSatGrande
    else if escolha = mrAbort then
      ImprimeEtiquetaEletroSatDuplaGrande
    else if escolha = mrCancel then
      ImprimeEtiquetaEletroSatTriplaGrande
    else if escolha = mrIgnore then
      ImprimeEtiquetaEletroSatTriplaPequena;
  end
  else if (UpperCase(vFlagEtiqueta) = 'JAKIDS') then
  begin
    FormQuatroEtiquetas := TFormQuatroEtiquetas.Create(Application);
    FormQuatroEtiquetas.btnUnicaGrande.caption := '3 Col c/ Barras';
    FormQuatroEtiquetas.BtnDuplaGrande.caption := '3 Col c/ Descrição';
    FormQuatroEtiquetas.BtnTriplaGrande.caption := 'Gondola Varejo';
    FormQuatroEtiquetas.btnTriplaPequena.caption := 'Gondola Atacarejo';
    escolha := FormQuatroEtiquetas.ShowModal;
    if escolha = mrOK then
      ImprimeEtiquetas_JAKIDS_3Col_CdBarras
    else if escolha = mrAbort then
      ImprimeEtiquetas_JAKIDS_3Col_Desc_Preco
    else if escolha = mrCancel then
      ImprimeEtiquetas_JAKIDS_Gondola_Varejo
    else if escolha = mrIgnore then
      ImprimeEtiquetas_JAKIDS_Gondola_Varejo_Atacado;
  end
  else if (UpperCase(vFlagEtiqueta) = 'DAYA') then
    ImprimeEtiquetaDAYA_ELGIN
  else if UpperCase(vFlagEtiqueta) = 'LEBARRETO' then
  begin // ARGOX  OS-214
    FrmTresEtiquetas := TFrmTresEtiquetas.Create(Application);
    FrmTresEtiquetas.BitBtn1.caption := 'Grande Tripla';
    FrmTresEtiquetas.BitBtn2.caption := 'Pequena Tripla';
    FrmTresEtiquetas.BitBtn3.caption := 'Jóia';
    escolha := FrmTresEtiquetas.ShowModal;
    if escolha = mrOK then
      ImprimeEtiquetaElBarretoTriplaGrande
    else if escolha = mrCancel then
      ImprimeEtiquetaElBarretoTriplaMenor
    else if escolha = mrAbort then
      ImprimeEtiquetaElBarretoJoias;
  end
  else if UpperCase(vFlagEtiqueta) = 'NOVOGARDEN' then
  begin // ARGOX  OS-214
    FrmTresEtiquetas := TFrmTresEtiquetas.Create(Application);
    FrmTresEtiquetas.BitBtn1.caption := '3 Colunas';
    FrmTresEtiquetas.BitBtn2.caption := 'Menor';
    FrmTresEtiquetas.BitBtn3.caption := 'Maior';
    escolha := FrmTresEtiquetas.ShowModal;
    if escolha = mrOK then
      ImprimeEtiquetas_NovoGarden_3Col
    else if escolha = mrCancel then
      ImprimeEtiquetas_NovoGarden_Menor
    else if escolha = mrAbort then
      ImprimeEtiquetas_NovoGarden_Maior;
  end
  else if UpperCase(vFlagEtiqueta) = 'CASADOROSARIO' then
  begin // ELGIN L42
    FrmTresEtiquetas := TFrmTresEtiquetas.Create(Application);
    FrmTresEtiquetas.BitBtn1.caption := '2 Colunas';
    FrmTresEtiquetas.BitBtn2.caption := '3 Colunas';
    escolha := FrmTresEtiquetas.ShowModal;
    if escolha = mrOK then
      ImprimeEtiquetaCASADOROSARIO2COLUNAS
    else if escolha = mrCancel then
      ImprimeEtiquetaCASADOROSARIO3COLUNAS;
  end
  else if (UpperCase(vFlagEtiqueta) = 'DISSEMEDISSE') then
    ImprimeEtiquetaDISSEMEDISSE_ELGIN
  else if (UpperCase(vFlagEtiqueta) = 'CLOSETMARIAFLOR') then
    ImprimeEtiquetaCLOSETMARIAFLOR_ELGIN
  else if (UpperCase(vFlagEtiqueta) = 'FLORDLIS') then
    ImprimeEtiquetaFlorDLis
  else if (UpperCase(vFlagEtiqueta) = 'NUTRIMIX') then
  // ARGOX OS 214 PPLA 300 dpi
    ImprimeEtiquetaNutriMix
  else if (UpperCase(vFlagEtiqueta) = 'JETLASER') then
  // ZEBRA TLP 2844 - SHOPPING E RUA GERU
    ImprimeEtiquetaJetLaser
  else if (UpperCase(vFlagEtiqueta) = 'PS') then // ARGOX OS-214plus A
    ImprimeEtiquetaPS
  else if (UpperCase(vFlagEtiqueta) = 'BRUMAR') then // ARGOX OS-214plus A
    ImprimeEtiquetaBrumar_Nova
  else if (UpperCase(vFlagEtiqueta) = 'CHAVESDEOURO') then // ARGOX OS-214plus A
    ImprimeEtiquetaChavesDeOuro
  else if (UpperCase(vFlagEtiqueta) = 'POLIANA') then // ARGOX OS-214plus A
    ImprimeEtiquetaPoliana
  else if (UpperCase(vFlagEtiqueta) = 'MEGA') then // ARGOX OS-214plus A
    ImprimeEtiquetaMEGA
  else if (UpperCase(vFlagEtiqueta) = 'HIS') then // ARGOX OS-214plus A
    ImprimeEtiquetaHIS
  else if (UpperCase(vFlagEtiqueta) = 'HITZ') then // ARGOX OS-214plus A
    ImprimeEtiquetaHITZ
  else if (UpperCase(vFlagEtiqueta) = 'SABORAMIL') then // ELGIN L-42
    ImprimeEtiquetasSaboramil
  else if (UpperCase(vFlagEtiqueta) = 'PANZONE') then // ELGIN L-42
    ImprimeEtiquetasPazone
  else if (UpperCase(vFlagEtiqueta) = 'COMPLEMENTUS') then //ELGIN L42
    ImprimeEtiquetaComplementusELGIN
    //ImprimeEtiquetasComplemento ARGOX OS214
  else if (UpperCase(vFlagEtiqueta) = 'CHALOC') then // ARGOX OS214
    ImprimeEtiquetaChaloc
  else if (UpperCase(vFlagEtiqueta) = 'CHALOC2') then begin // ARGOX OS214
    FrmTresEtiquetas := TFrmTresEtiquetas.Create(Application);
    FrmTresEtiquetas.BitBtn1.caption := 'Lingerie';
    FrmTresEtiquetas.BitBtn2.caption := 'Tecidos';
    escolha := FrmTresEtiquetas.ShowModal;
    if escolha = mrOK then
      ImprimeEtiquetasCHALOC_Lingerie
    else if escolha = mrCancel then
      ImprimeEtiquetasCHALOC_Tecidos;
  end
  else if (UpperCase(vFlagEtiqueta) = 'MARTTINA') then
  // ZEBRA TLP 2844 - SHOPPING E RUA GERU
    ImprimeEtiquetasMarttina
  else if (UpperCase(vFlagEtiqueta) = 'SANTALUIZA') then
  // ZEBRA TLP 2844 - SHOPPING E RUA GERU
    ImprimeEtiquetaOticaSantaLuiza
  else if (UpperCase(vFlagEtiqueta) = 'EMPORIOJARDINS') then
  // ARGOX OS-214plus A
    ImprimeEtiquetaEmporioJardins
  else if (UpperCase(vFlagEtiqueta) = 'SAOJUDASTADEU') then
  // ARGOX OS-214plus A
    ImprimeEtiquetaMERCADINHOSAOJUDASTADEU18_ELGIN
    // ImprimeEtiquetaSaoJudasTadeus2
  else if (UpperCase(vFlagEtiqueta) = 'SUPERDELLI') then // ELGIN L-42
    ImprimeEtiquetaSuperDelli
  else if (UpperCase(vFlagEtiqueta) = 'SAOMIGUEL') then // ARGOX OS-214plus A
    ImprimeEtiquetaSaoMiguel
  else if (UpperCase(vFlagEtiqueta) = 'SA') then begin// ARGOX OS-214plus A
    if MessageDlg('Escolha SIM para 2 Colunas ou NÃO para Gondola',
      mtConfirmation, [mbYes, mbNo], 0) = mrYes then
        ImprimeEtiquetasSA
    else
      ImprimeEtiquetasSA_Gondola;
  end
  else if (UpperCase(vFlagEtiqueta) = 'SUAQUITANDA') then // ARGOX OS-2140
    ImprimeEtiquetasSUAQUITANDA
  else if (UpperCase(vFlagEtiqueta) = 'JABUTIANA') then // ARGOX OS-2140
    ImprimeEtiquetasJABUTIANA
  else if (UpperCase(vFlagEtiqueta) = 'MIXTUDO') then // ARGOX OS-2140
    ImprimeEtiquetasMIXTUDO
  else if (UpperCase(vFlagEtiqueta) = 'BOXXE') then // ARGOX OS-2140
    ImprimeEtiquetasBOXXE
  else if (UpperCase(vFlagEtiqueta) = 'PRECOBOM') then // ARGOX OS-214plus A
    ImprimeEtiquetaPrecoBom
  else if (UpperCase(vFlagEtiqueta) = 'DONASANTA') then // ARGOX OS-214plus A
    ImprimeEtiquetasDONA_SANTA
  else if (UpperCase(vFlagEtiqueta) = 'ASABRANCA') then begin // ARGOX OS-214plus A
    FrmDuasEtiquetas := TFrmDuasEtiquetas.Create(Application);
    FrmDuasEtiquetas.BitBtn1.Caption := 'Atacado e Varejo';
    FrmDuasEtiquetas.BitBtn3.Caption := 'Varejo';
    escolha := FrmDuasEtiquetas.ShowModal;
    if escolha = mrCancel then
      ImprimeEtiquetasAsaBranca_Gondola_Varejo
    else if escolha = mrOK then
      ImprimeEtiquetasAsaBranca_Gondola;
  end
  else if (UpperCase(vFlagEtiqueta) = 'SANTAGLEIDE') then begin // ARGOX OS-214plus A
    FrmDuasEtiquetas := TFrmDuasEtiquetas.Create(Application);
    FrmDuasEtiquetas.BitBtn1.Caption := 'Atacado e Varejo';
    FrmDuasEtiquetas.BitBtn3.Caption := 'Varejo';
    escolha := FrmDuasEtiquetas.ShowModal;
    if escolha = mrCancel then
      ImprimeEtiquetas_AsaBranca_StGreide_Varejo
    else if escolha = mrOK then
      ImprimeEtiquetas_AsaBranca_StGreide;
  end
  else if (UpperCase(vFlagEtiqueta) = 'ASABRANCASANTAMARIA') then // ARGOX OS-214plus A
    ImprimeEtiquetas_AsaBranca_Gondola_ARGOX
  else if (UpperCase(vFlagEtiqueta) = 'MAISECONOMIA') then // ARGOX OS-214plus A
    ImprimeEtiquetaMaisEconomia
  else if (UpperCase(vFlagEtiqueta) = 'EMPORIOJARDINSPEQUENO') then
  // ARGOX OS-214plus A
    ImprimeEtiquetaEmporioJardins_Pequeno
  else if (UpperCase(vFlagEtiqueta) = 'PARPERFEITO') then // ARGOX OS-214plus A
    ImprimeEtiquetaParPerfeito
  else if (UpperCase(vFlagEtiqueta) = 'DALBOSCO') then // ELGIN
    ImprimeEtiquetasDalBosco
  else if (UpperCase(vFlagEtiqueta) = 'COMERCIALGRACA') then // ELGIN
    ImprimeEtiquetasComercialGraca
  else if (UpperCase(vFlagEtiqueta) = 'DULALAR') then // ARGOX OS-214 PPLA
    ImprimeEtiquetasDulalar
  else if (UpperCase(vFlagEtiqueta) = 'FRUTARIA') then // ARGOX OS-214 PPLA
    ImprimeEtiquetasFRUTARIA
  else if (UpperCase(vFlagEtiqueta) = 'AQUARIUM') then // ARGOX OS-214 PPLA
    ImprimeEtiquetasAquarium
  else if (UpperCase(vFlagEtiqueta) = 'S&A') then // ARGOX OS-214 PPLA
    ImprimeEtiquetasSA
  else if (UpperCase(vFlagEtiqueta) = 'PONTODASTINTAS') then
  // ARGOX OS-214 PPLA
    ImprimeEtiquetasPontoDasTintas
  else if (UpperCase(vFlagEtiqueta) = 'ECOLLIMP') then // zebra
    ImprimeEtiquetaECOLLIMP
  else if (UpperCase(vFlagEtiqueta) = 'ZEROGRAU') then // ARGOX OS-214plus A
    ImprimeEtiquetas_ZeroGrauDepositoMercearia
  else if UpperCase(vFlagEtiqueta) = 'MAISRACOES' then // ELGIN
    ImprimeEtiquetas_MaisRacoes
  else if UpperCase(vFlagEtiqueta) = 'DANDAN' then // ELGIN L42 Pro
    ImprimeEtiquetas_MerceariaDandan
  else if UpperCase(vFlagEtiqueta) = 'ELDORADO' then // ARGOX OS 214 Plus
    ImprimeEtiquetas_EldoradoCasaDaArte;
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasBijouArtsMaior;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0415');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');

    Editor.Lines.Add('121100000700008' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('121100000580008' + trim(Copy(SgDados.Cells[1, L],
      21, 20)));
    Editor.Lines.Add('121100000700145' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('121100000580145' + trim(Copy(SgDados.Cells[1, L],
      21, 20)));
    Editor.Lines.Add('121100000700280' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('121100000580280' + trim(Copy(SgDados.Cells[1, L],
      21, 20)));

    Editor.Lines.Add('1a6203400210147' + trim(SgDados.Cells[0, L]));
    // Cod. Barra
    Editor.Lines.Add('1a6203400210281' + trim(SgDados.Cells[0, L]));
    // Cod. Barra
    Editor.Lines.Add('1a6203400210012' + trim(SgDados.Cells[0, L]));
    // Cod. Barra

    Editor.Lines.Add('121100000070037' + trim(SgDados.Cells[0, L]));
    // Cod. Barra
    Editor.Lines.Add('121100000070171' + trim(SgDados.Cells[0, L]));
    // Cod. Barra
    Editor.Lines.Add('121100000070305' + trim(SgDados.Cells[0, L]));
    // Cod. Barra

    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('^' + FormatFloat('00', vqtd));
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
    // vQtd := StrToFloat(SgDados.Cells[2,L]);
    // Editor.Lines.Add('^'+FormatFloat('0',vQtd));
    // Editor.Lines.Add('Q'+FormatFloat('000',vQtd));
    // Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasLindaStore;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Editor.Lines.Add('N');
      Editor.Lines.Add('R0,0');
      Editor.Lines.Add('ZB');
      Editor.Lines.Add('I8,0,001');
      Editor.Lines.Add('q640');
      Editor.Lines.Add('JY0000Kf00');
      Editor.Lines.Add('D15');
      Editor.Lines.Add('S2');
      Editor.Lines.Add('O');
      Editor.Lines.Add('JB');
      Editor.Lines.Add('B47,6,0,1,2,4,56,N,"'+trim(SgDados.Cells[6, L])+'"');
      Editor.Lines.Add('B49,173,0,1,2,4,80,N,"'+trim(SgDados.Cells[6, L])+'"');
      Editor.Lines.Add('A252,429,2,4,1,2,N,"Linda Store"');
      Editor.Lines.Add('A302,340,2,3,1,1,N,"'+trim(Copy(SgDados.Cells[1, L], 1, 20))+'"');
      //Editor.Lines.Add('A302,285,2,3,1,1,N,"R$ '+SgDados.Cells[3, L]+'"');
      Editor.Lines.Add('A294,85,2,2,1,1,N,"R$ '+SgDados.Cells[3, L]+'"');
      Editor.Lines.Add('A302,313,2,3,1,1,N,"'+trim(Copy(SgDados.Cells[1, L], 21, 20))+'"');
      Editor.Lines.Add('A296,106,2,2,1,1,N,"'+trim(Copy(SgDados.Cells[1, L], 21, 20))+'"');
      Editor.Lines.Add('A296,129,2,2,1,1,N,"'+trim(Copy(SgDados.Cells[1, L], 1, 20))+'"');
      Editor.Lines.Add('A275,169,2,2,1,1,N,"'+trim(SgDados.Cells[6, L])+'"');
      Editor.Lines.Add('JF');
      Editor.Lines.Add('B367,6,0,1,2,4,56,N,"'+trim(SgDados.Cells[6, L])+'"');
      Editor.Lines.Add('B369,173,0,1,2,4,80,N,"'+trim(SgDados.Cells[6, L])+'"');
      Editor.Lines.Add('A572,429,2,4,1,2,N,"Linda Store"');
      Editor.Lines.Add('A622,340,2,3,1,1,N,"'+trim(Copy(SgDados.Cells[1, L], 1, 20))+'"');
      //Editor.Lines.Add('A622,285,2,3,1,1,N,"R$ '+SgDados.Cells[3, L]+'"');
      Editor.Lines.Add('A614,85,2,2,1,1,N,"R$ '+SgDados.Cells[3, L]+'"');
      Editor.Lines.Add('A622,313,2,3,1,1,N,"'+trim(Copy(SgDados.Cells[1, L], 21, 20))+'"');
      Editor.Lines.Add('A616,106,2,2,1,1,N,"'+trim(Copy(SgDados.Cells[1, L], 21, 20))+'"');
      Editor.Lines.Add('A616,129,2,2,1,1,N,"'+trim(Copy(SgDados.Cells[1, L], 1, 20))+'"');
      Editor.Lines.Add('A595,169,2,2,1,1,N,"'+trim(SgDados.Cells[6, L])+'"');
      Editor.Lines.Add('Q480,16');
//    Editor.Lines.Add
//      ('<xpml><page quantity=''0'' pitch=''70.1 mm''></xpml>SIZE 100.7 mm, 70.1 mm');
//    Editor.Lines.Add('DIRECTION 0,0');
//    Editor.Lines.Add('REFERENCE 0,0');
//    Editor.Lines.Add('OFFSET 0 mm');
//    Editor.Lines.Add('SET PEEL OFF');
//    Editor.Lines.Add('SET CUTTER OFF');
//    Editor.Lines.Add
//      ('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''70.1 mm''></xpml>SET TEAR ON');
//    Editor.Lines.Add('CLS');
//    Editor.Lines.Add('CODEPAGE 1252');
//    Editor.Lines.Add('TEXT 780,405,"0",180,8,8,"' +
//      trim(Copy(SgDados.Cells[1, L], 1, 20)) + '"');
//    Editor.Lines.Add('BARCODE 791,335,"128M",102,0,180,2,4,"!105' +
//      Copy(trim(SgDados.Cells[6, L]), 1, 12) + '!100' +
//      Copy(trim(SgDados.Cells[6, L]), 13, 1) + '"');
//    Editor.Lines.Add('TEXT 722,229,"0",180,9,9,"' + trim(SgDados.Cells[6,
//      L]) + '"');
//    Editor.Lines.Add('BARCODE 791,175,"128M",48,0,180,2,4,"!105' +
//      Copy(trim(SgDados.Cells[6, L]), 1, 12) + '!100' +
//      Copy(trim(SgDados.Cells[6, L]), 13, 1) + '"');
//    Editor.Lines.Add('TEXT 722,122,"0",180,9,9,"' + trim(SgDados.Cells[6,
//      L]) + '"');
//    Editor.Lines.Add('TEXT 780,69,"0",180,8,8,"' +
//      trim(Copy(SgDados.Cells[1, L], 21, 20)) + '"');
//    Editor.Lines.Add('TEXT 652,38,"0",180,8,8,"R$ ' + SgDados.Cells[3,
//      L] + '"');
//    Editor.Lines.Add('REVERSE 536,11,117,28');
//    Editor.Lines.Add('TEXT 780,437,"0",180,7,7,"TROCA COM 30 DIAS"');
//    Editor.Lines.Add('TEXT 780,373,"0",180,8,8,"' +
//      trim(Copy(SgDados.Cells[1, L], 21, 20)) + '"');
//    Editor.Lines.Add('TEXT 780,94,"0",180,8,8,"' +
//      trim(Copy(SgDados.Cells[1, L], 1, 20)) + '"');
//    Editor.Lines.Add('TEXT 500,437,"0",180,7,7,"TROCA COM 30 DIAS"');
//    Editor.Lines.Add('TEXT 500,405,"0",180,8,8,"' +
//      trim(Copy(SgDados.Cells[1, L], 1, 20)) + '"');
//    Editor.Lines.Add('TEXT 500,373,"0",180,8,8,"' +
//      trim(Copy(SgDados.Cells[1, L], 21, 20)) + '"');
//    Editor.Lines.Add('BARCODE 521,335,"128M",102,0,180,2,4,"!105' +
//      Copy(trim(SgDados.Cells[6, L]), 1, 12) + '!100' +
//      Copy(trim(SgDados.Cells[6, L]), 13, 1) + '"');
//    Editor.Lines.Add('TEXT 442,229,"0",180,9,9,"' + trim(SgDados.Cells[6,
//      L]) + '"');
//    Editor.Lines.Add('BARCODE 521,175,"128M",48,0,180,2,4,"!105' +
//      Copy(trim(SgDados.Cells[6, L]), 1, 12) + '!100' +
//      Copy(trim(SgDados.Cells[6, L]), 13, 1) + '"');
//    Editor.Lines.Add('TEXT 442,122,"0",180,9,9,"' + trim(SgDados.Cells[6,
//      L]) + '"');
//    Editor.Lines.Add('TEXT 500,94,"0",180,8,8,"' +
//      trim(Copy(SgDados.Cells[1, L], 1, 20)) + '"');
//    Editor.Lines.Add('TEXT 500,69,"0",180,8,8,"' +
//      trim(Copy(SgDados.Cells[1, L], 21, 20)) + '"');
//    Editor.Lines.Add('TEXT 372,38,"0",180,8,8,"R$ ' + SgDados.Cells[3,
//      L] + '"');
//    Editor.Lines.Add('REVERSE 266,11,117,28');
//    Editor.Lines.Add('TEXT 229,437,"0",180,7,7,"TROCA COM 30 DIAS"');
//    Editor.Lines.Add('TEXT 229,405,"0",180,8,8,"' +
//      trim(Copy(SgDados.Cells[1, L], 1, 20)) + '"');
//    Editor.Lines.Add('TEXT 229,373,"0",180,8,8,"' +
//      trim(Copy(SgDados.Cells[1, L], 21, 20)) + '"');
//    Editor.Lines.Add('BARCODE 253,335,"128M",102,0,180,2,4,"!105' +
//      Copy(trim(SgDados.Cells[6, L]), 1, 12) + '!100' +
//      Copy(trim(SgDados.Cells[6, L]), 13, 1) + '"');
//    Editor.Lines.Add('TEXT 171,229,"0",180,9,9,"' + trim(SgDados.Cells[6,
//      L]) + '"');
//    Editor.Lines.Add('BARCODE 253,175,"128M",48,0,180,2,4,"!105' +
//      Copy(trim(SgDados.Cells[6, L]), 1, 12) + '!100' +
//      Copy(trim(SgDados.Cells[6, L]), 13, 1) + '"');
//    Editor.Lines.Add('TEXT 171,122,"0",180,9,9,"' + trim(SgDados.Cells[6,
//      L]) + '"');
//    Editor.Lines.Add('TEXT 228,94,"0",180,8,8,"' +
//      trim(Copy(SgDados.Cells[1, L], 1, 20)) + '"');
//    Editor.Lines.Add('TEXT 228,69,"0",180,8,8,"' +
//      trim(Copy(SgDados.Cells[1, L], 21, 20)) + '"');
//    Editor.Lines.Add('TEXT 101,38,"0",180,8,8,"R$ ' + SgDados.Cells[3,
//      L] + '"');
//    Editor.Lines.Add('REVERSE 7,11,95,28');
//    Editor.Lines.Add('TEXT 524,492,"0",180,15,11,"LINDA STORE"');
//    Editor.Lines.Add('REVERSE 279,457,246,36');
//    Editor.Lines.Add('TEXT 253,492,"0",180,15,11,"LINDA STORE"');
//    Editor.Lines.Add('REVERSE 8,457,246,36');
//    Editor.Lines.Add('TEXT 791,492,"0",180,15,11,"LINDA STORE"');
//    Editor.Lines.Add('REVERSE 546,457,246,36');

    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 2) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 2
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 2) + 1;
    //Editor.Lines.Add('PRINT ' + FormatFloat('0', vqtd) + ',1');
    //Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
    // vQtd := StrToFloat(SgDados.Cells[2,L]);
    // Editor.Lines.Add('^'+FormatFloat('0',vQtd));
    // Editor.Lines.Add('Q'+FormatFloat('000',vQtd));
    // Editor.Lines.Add('E');
    Editor.Lines.Add('P1,'+FormatFloat('000',vQtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasBijouArts;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('q822');
    Editor.Lines.Add('Q320,24');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('D9');
    Editor.Lines.Add('S2');
    Editor.Lines.Add('O');
    Editor.Lines.Add('B162,40,0,2,3,6,37,B,"' + SgDados.Cells[0, L] + '"');
    Editor.Lines.Add('B396,40,0,2,3,6,37,B,"' + SgDados.Cells[0, L] + '"');
    Editor.Lines.Add('B626,38,0,2,3,6,37,B,"' + SgDados.Cells[0, L] + '"');
    Editor.Lines.Add('A130,24,0,1,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '"');
    Editor.Lines.Add('A364,26,0,1,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '"');
    Editor.Lines.Add('A600,24,0,1,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '"');
    Editor.Lines.Add('A332,24,1,1,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '"');
    Editor.Lines.Add('A566,24,1,1,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '"');
    Editor.Lines.Add('A800,24,1,1,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '"');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('P1,' + FloatToStr(vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  { AssignFile(Arq,'Texto.txt');
    Erase(Arq);
    Rewrite(Arq);
    Writeln(Arq,Editor.Text); }
  // WinExec('C:\Arquivos de programas\saef\bin\print.bat',sw_ShowNormal);
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print.bat')), sw_ShowNormal);
  if not FileExists('Print.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasPipelaine;
var
  L, j: Integer;
  Arq: TextFile;
  vqtd: Real;
  List_cdBarras, List_nm1, List_nm2, List_vlPreco, List_Codigo: TStringList;
  endereco : string;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  if MessageDlg('Clique "Sim" para LITORAL 655 e "Não" para APP LITORAL655!',
    mtConfirmation, [mbYes, mbNo], 0) = mrNo then begin
    nmEmpresa := 'LITORAL655';
    endereco := 'APP Litoral 655';
  end
  else begin
    nmEmpresa := 'LITORAL655';
    endereco := 'Rua Geru,226';
  end;
  List_cdBarras := TStringList.Create;
  List_nm1 := TStringList.Create;
  List_nm2 := TStringList.Create;
  List_vlPreco := TStringList.Create;
  List_Codigo := TStringList.Create;
  // Cria uma lista com todos as etiquetas
  for L := 1 to SgDados.RowCount - 1 do
  begin
    if SgDados.Cells[0, L] = '' then
      Break;
    for j := 1 to (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2,
      L])))) do
    begin
      List_nm1.Add(trim(Copy(SgDados.Cells[1, L], 1, 30)));
      List_nm2.Add(trim(Copy(SgDados.Cells[1, L], 30, 40)));
      List_vlPreco.Add(VirgPonto(SgDados.Cells[3, L]));
      List_cdBarras.Add(SgDados.Cells[6, L]);
      List_Codigo.Add(SgDados.Cells[0, L]);
      // Editor2.Lines.Add(Trim(Copy(SgDados.Cells[1,L],1,30)) + ' ' + Copy(SgDados.Cells[1,L],30,40) + ' '+
      // PontoVirg(SgDados.Cells[3,L]) + ' '+ SgDados.Cells[6,L] + ' '+ SgDados.Cells[0,L]);
    end;
  end;
  // Editor2.Lines.SaveToFile('C:\Arquivos de programas\saef\bin\teste.txt');
  Editor.Lines.Clear;
  if Frac(List_nm1.Count / 2) <> 0.00 then
  begin
    List_nm1.Add('');
    List_nm2.Add('');
    List_vlPreco.Add('');
    List_cdBarras.Add('');
    List_Codigo.Add('');
  end;
  j := 0;
  for L := 0 to StrToInt(FormatFloat('0000', (List_nm1.Count / 2))) - 1 do
  begin // Salvando os itens da pré-venda.
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q559,019');
    Editor.Lines.Add('q831');
    Editor.Lines.Add('rN');
    Editor.Lines.Add('S1');
    Editor.Lines.Add('D7');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('OD');
    Editor.Lines.Add('R56,0');
    Editor.Lines.Add('f100');
    Editor.Lines.Add('N');
    Editor.Lines.Add('B325,342,2,1,2,6,72,B,"' + List_cdBarras[j + 1] + '"');
    Editor.Lines.Add('B327,146,2,1,2,6,59,B,"' + List_cdBarras[j + 1] + '"');
    Editor.Lines.Add('B657,148,2,1,2,6,59,B,"' + List_cdBarras[j] + '"');
    Editor.Lines.Add('B652,340,2,1,2,6,72,B,"' + List_cdBarras[j] + '"');
    Editor.Lines.Add('A208,29,2,2,1,1,N,"Cod. ' + List_Codigo[j + 1] + '"');
    Editor.Lines.Add('A352,500,2,1,3,3,N,"' + nmEmpresa + '"');
    Editor.Lines.Add('A537,31,2,2,1,1,N,"Cod. ' + List_Codigo[j] + '"');
    Editor.Lines.Add('A336,373,2,1,1,1,N,"' + List_nm2[j + 1] + '"');
    Editor.Lines.Add('A685,500,2,1,3,3,N,"' + nmEmpresa + '"');
    Editor.Lines.Add('A676,372,2,1,1,1,N,"' + List_nm2[j] + '"');
    Editor.Lines.Add('A337,401,2,1,1,1,N,"' + List_nm1[j + 1] + '"');
    Editor.Lines.Add('A338,222,2,1,1,1,N,"' + Copy(endereco, 1, 30) + '"');
    Editor.Lines.Add('A679,220,2,1,1,1,N,"' + Copy(endereco, 1, 30) + '"');
    Editor.Lines.Add('A676,400,2,1,1,1,N,"' + List_nm1[j] + '"');
    Editor.Lines.Add('A324,55,2,2,1,1,N,"R$ ' + List_vlPreco[j + 1] + '"');
    Editor.Lines.Add('A655,60,2,2,1,1,N,"R$ ' + List_vlPreco[j] + '"');
    Editor.Lines.Add('P1');
    Editor.Lines.Add('I8,A,001');
    // Editor.Lines.Add('');
    // Editor.Lines.Add('');
    // Editor.Lines.Add('Q559,019');
    // Editor.Lines.Add('q831');
    // Editor.Lines.Add('rN');
    // Editor.Lines.Add('S1');
    // Editor.Lines.Add('D7');
    // Editor.Lines.Add('ZT');
    // Editor.Lines.Add('JB');
    // Editor.Lines.Add('OD');
    // Editor.Lines.Add('R56,0');
    // Editor.Lines.Add('N');
    // Editor.Lines.Add('B304,341,2,E30,2,4,61,B,"'+List_cdBarras[j+1]+'"');
    // Editor.Lines.Add('B318,148,2,E30,2,4,61,B,"'+List_cdBarras[j+1]+'"');
    // Editor.Lines.Add('B651,340,2,E30,2,4,61,B,"'+List_cdBarras[j]+'"');
    // Editor.Lines.Add('B666,148,2,E30,2,4,61,B,"'+List_cdBarras[j]+'"');
    // Editor.Lines.Add('A200,29,2,2,1,1,N,"Cod. '+List_Codigo[j+1]+'"');
    // Editor.Lines.Add('A340,500,2,1,3,3,N,"'+nmEmpresa+'"');
    // Editor.Lines.Add('A537,31,2,2,1,1,N,"Cod. '+List_Codigo[j]+'"');
    // Editor.Lines.Add('A328,373,2,1,1,1,N,"'+List_nm2[j+1]+'"');
    // Editor.Lines.Add('A680,500,2,1,3,3,N,"'+nmEmpresa+'"');
    // Editor.Lines.Add('A676,372,2,1,1,1,N,"'+List_nm2[j]+'"');
    // Editor.Lines.Add('A329,401,2,1,1,1,N,"'+List_nm1[j+1]+'"');
    // Editor.Lines.Add('A330,222,2,1,1,1,N,"'+Copy(vendereco,1,30)+'"');
    // Editor.Lines.Add('A679,220,2,1,1,1,N,"'+Copy(vendereco,1,30)+'"');
    // Editor.Lines.Add('A676,400,2,1,1,1,N,"'+List_nm1[j]+'"');
    // Editor.Lines.Add('A315,55,2,2,1,1,N,"R$ '+List_vlPreco[j+1]+'"');
    // Editor.Lines.Add('A655,60,2,2,1,1,N,"R$ '+List_vlPreco[j]+'"');
    // Editor.Lines.Add('P1');
    j := j + 2;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print.bat')), sw_ShowNormal);
  // WinExec('c:\Arquiv~1\Saef\bin\print.bat',sw_ShowNormal);
  if not FileExists('Print.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.SalvaEtiquetas;
var
  L, vTeste: Integer;
begin
  // COMENTEI PARA NÃO SALVAR PREVENDA AO IMPRIMIR ORÇAMENTO
  // With ADOQrySalvar do begin
  // try
  // DModulo.Conexao.BeginTrans;
  // if RgOpcoes.ItemIndex = 1 then begin //Se for alteração de um orçamento
  // Sql.Text := 'Delete From Orcamento Where nrOrcamento = :NRORCAMENTO';
  // Parameters.ParamByName('NRORCAMENTO').Value := EdtLancto.Text;
  // ExecSql;
  // Sql.Text := 'Delete From MemoOrcamento Where nrOrcamento = :NRORCAMENTO ';
  // Parameters.ParamByName('NRORCAMENTO').Value := EdtLancto.Text;
  // ExecSql;
  // end;
  // if (RgOpcoes.ItemIndex = 0) or (RgOpcoes.ItemIndex = 2) then begin // Se for salvar um orçamento
  // UltimoLancamento;
  // Sql.Text := 'Update Sequencial Set nrPedidos = nrPedidos + 1 Where cdCodigo = 1 ';
  // ExecSql;
  // end;
  // // dados do orcamento
  // Sql.Text := 'Insert Into Orcamento (nrOrcamento,cdPessoa,dsFlag,'+
  // 'dtEmissao,nrDesconto,dsImpresso,cdCliente,vlvalor) '+
  // 'Values (:nrOrcamento,:cdPessoa,''C'',              '+
  // ':DATA,:nrDesconto,:tipo,:cdCliente,:vlvalor)       ';
  // Parameters.ParamByName('nrOrcamento').Value := EdtLancto.Text;
  // Parameters.ParamByName('cdPessoa').Value    := EdtCdNome.Text;
  // Parameters.ParamByName('nrDesconto').Value  := StrToFloat(EdtDesconto.Text);
  // Parameters.ParamByName('cdCliente').Value   := EdtCdCliente.Text;
  // Parameters.ParamByName('vlvalor').Value     := StrToFloat(EdtSubTotal.Text);
  // Parameters.ParamByName('DATA').Value        := vdata_banco;
  // case RgOpcoes.ItemIndex of
  // 0: Parameters.ParamByName('tipo').Value  := 'N';
  // 1: Parameters.ParamByName('tipo').Value  := vOrcamento; // Se for alterar pode continuar orcamento ou virar pré-venda
  // 2: Parameters.ParamByName('tipo').Value  := 'O';
  // end;
  // ExecSql;
  // for L := 1 to SgDados.RowCount - 1 do begin // Salvando os itens da pré-venda.
  // if SgDados.Cells[0,L] = '' then Break;
  // Sql.Text := 'Insert Into IteOrcamento (cdIteLcto,nrOrcamento,'+
  // 'cdProduto,nrQtd,vlPreco,dsSituacao,vlDesconto)  '+
  // 'Values ( :CDITELCTO ,:NRORCAMENTO ,:CDPRODUTO,  '+
  // ':NRQTD,:VLPRECO,:DSSITUACAO,:vlDesconto)        ';
  // Parameters.ParamByName('CDITELCTO').Value   := IntToStr(L);
  // Parameters.ParamByName('NRORCAMENTO').Value := EdtLancto.Text;
  // Parameters.ParamByName('CDPRODUTO').Value   := SgDados.Cells[0,L];
  // Parameters.ParamByName('NRQTD').Value       := SgDados.Cells[2,L];
  // Parameters.ParamByName('VLPRECO').Value     := SgDados.Cells[3,L];
  // Parameters.ParamByName('DSSITUACAO').Value  := '';
  // Parameters.ParamByName('vlDesconto').Value  := SgDados.Cells[9,L];
  // ExecSql;
  // end;
  // DModulo.Conexao.CommitTrans;
  // Except
  // on ER: EDBEngineError do begin
  // DModulo.Conexao.RollbackTrans;
  // Salvar_erro(vData_Banco + ' | ' + pegaHoraBanco, 'PREVENDA', 'TFrmPrincipalPreVenda.SalvaEtiquetas', ER.Message);
  // vTeste := 2; // o orcamento nao foi salvo
  // vSalvar := vSalvar + 1;
  // if vSalvar <= 4 then BtnConfirmarClick(Self)
  // else begin
  // Messagedlg('Não foi possível salvar esta Pré Venda \ Orçamento!', mterror, [mbOk], 0);
  // vSalvar := 0;
  // end;
  // end;
  // on E: Exception do begin
  // DModulo.Conexao.RollbackTrans;
  // Salvar_erro(vData_Banco + ' | ' + pegaHoraBanco, 'PREVENDA', 'TFrmPrincipalPreVenda.SalvaEtiquetas', e.Message);
  // vTeste  := 2; // o orcamento nao foi salvo
  // // Altero o sequencial pois estava dando muito erro pra salvar por causa do sequencial
  // Sql.Text := 'Update Sequencial Set nrPedidos = nrPedidos + 1 Where cdCodigo = 1 ';
  // ExecSql;
  // vSalvar := vSalvar + 1;
  // if vSalvar <= 4 then BtnConfirmarClick(Self)
  // else begin
  // Messagedlg('Não foi possível salvar esta Pré Venda \ Orçamento!', mterror, [mbOk], 0);
  // vSalvar := 0;
  // end;
  // end;
  // end; // except
  // end;   // QqryCaixa
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasBijouArtsZebra;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add
      ('^XA~TA000~JSN^LT0^MMT^MNW^MTT^PON^PMN^LH0,0^JMA^PR4,4^MD0^JUS^LRN^CI0^XZ');
    Editor.Lines.Add('^XA^LL0160');
    Editor.Lines.Add('^PW831');
    Editor.Lines.Add('^FT596,57^ABN,11,7^FH\^FD' +
      trim(Copy(SgDados.Cells[1, L], 21, 40)) + '^FS');
    Editor.Lines.Add('^FT322,56^ABN,11,7^FH\^FD' +
      trim(Copy(SgDados.Cells[1, L], 21, 40)) + '^FS');
    Editor.Lines.Add('^FT595,41^ABN,11,7^FH\^FD' +
      trim(Copy(SgDados.Cells[1, L], 1, 20)) + '^FS');
    Editor.Lines.Add('^FT51,56^ABN,11,7^FH\^FD' + trim(Copy(SgDados.Cells[1, L],
      21, 40)) + '^FS');
    Editor.Lines.Add('^FT321,40^ABN,11,7^FH\^FD' +
      trim(Copy(SgDados.Cells[1, L], 1, 20)) + '^FS');
    Editor.Lines.Add('^FT50,40^ABN,11,7^FH\^FD' + trim(Copy(SgDados.Cells[1, L],
      1, 20)) + '^FS');
    Editor.Lines.Add('^BY3,3,45^FT587,109^BCN,,Y,N');
    Editor.Lines.Add('^FD>;0' + SgDados.Cells[0, L] + '^FS');
    Editor.Lines.Add('^BY3,3,43^FT313,107^BCN,,Y,N');
    Editor.Lines.Add('^FD>;0' + SgDados.Cells[0, L] + '^FS');
    Editor.Lines.Add('^BY3,3,49^FT37,110^BCN,,Y,N');
    Editor.Lines.Add('^FD>;0' + SgDados.Cells[0, L] + '^FS');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('^PQ' + FloatToStr(vqtd) + ',0,1,Y^XZ');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print.bat')), sw_ShowNormal);
  if not FileExists('Print.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasBijouArtsOS214;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0410');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H09');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('1D8401500130013' + SgDados.Cells[0, L] + '');
    Editor.Lines.Add('1D8401400140127' + SgDados.Cells[0, L] + '');
    Editor.Lines.Add('1D8401400130248' + SgDados.Cells[0, L] + '');
    Editor.Lines.Add('191100100460013' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '');
    Editor.Lines.Add('121100000100013' + SgDados.Cells[0, L] + '');
    Editor.Lines.Add('191100100370013' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '');
    Editor.Lines.Add('121100000110126' + SgDados.Cells[0, L] + '');
    Editor.Lines.Add('121100000110247' + SgDados.Cells[0, L] + '');
    Editor.Lines.Add('191100100460127' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '');
    Editor.Lines.Add('191100100370127' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '');
    Editor.Lines.Add('191100100470248' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '');
    Editor.Lines.Add('191100100380248' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('^' + FormatFloat('00', vqtd));
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print.bat')), sw_ShowNormal);
  if not FileExists('Print.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasPipelaineShopping;
var
  L, j: Integer;
  Arq: TextFile;
  vqtd: Real;
  List_cdBarras, List_nm1, List_nm2, List_vlPreco, List_Codigo: TStringList;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  if MessageDlg('Clique "Sim" para Shopping e "Não" para Rua de Geru!',
    mtConfirmation, [mbYes, mbNo], 0) = mrNo then
    vendereco := 'SHOPPING JARDINS LJ 145'
  else
    vendereco := 'RUA GERU, 226 CENTRO';
  nmEmpresa := 'LITORAL655';
  List_cdBarras := TStringList.Create;
  List_nm1 := TStringList.Create;
  List_nm2 := TStringList.Create;
  List_vlPreco := TStringList.Create;
  List_Codigo := TStringList.Create;
  // Cria uma lista com todos as etiquetas
  for L := 1 to SgDados.RowCount - 1 do
  begin
    if SgDados.Cells[0, L] = '' then
      Break;
    for j := 1 to (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2,
      L])))) do
    begin
      List_nm1.Add(trim(Copy(SgDados.Cells[1, L], 1, 30)));
      List_nm2.Add(trim(Copy(SgDados.Cells[1, L], 30, 40)));
      List_vlPreco.Add(VirgPonto(SgDados.Cells[3, L]));
      List_cdBarras.Add(SgDados.Cells[6, L]);
      List_Codigo.Add(SgDados.Cells[0, L]);
      // Editor2.Lines.Add(Trim(Copy(SgDados.Cells[1,L],1,30)) + ' ' + Copy(SgDados.Cells[1,L],30,40) + ' '+
      // PontoVirg(SgDados.Cells[3,L]) + ' '+ SgDados.Cells[6,L] + ' '+ SgDados.Cells[0,L]);
    end;
  end;
  // Editor2.Lines.SaveToFile('C:\Arquivos de programas\saef\bin\teste.txt');
  Editor.Lines.Clear;
  if Frac(List_nm1.Count / 2) <> 0.00 then
  begin
    List_nm1.Add('');
    List_nm2.Add('');
    List_vlPreco.Add('');
    List_cdBarras.Add('');
    List_Codigo.Add('');
  end;
  j := 0;
  for L := 0 to StrToInt(FormatFloat('0000', (List_nm1.Count / 2))) - 1 do
  begin // Salvando os itens da pré-venda.
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q559,019');
    Editor.Lines.Add('q831');
    Editor.Lines.Add('rN');
    Editor.Lines.Add('S1');
    Editor.Lines.Add('D7');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('OD');
    Editor.Lines.Add('R56,0');
    Editor.Lines.Add('N');
    Editor.Lines.Add('B304,341,2,E30,2,4,61,B,"' + List_cdBarras[j + 1] + '"');
    Editor.Lines.Add('B318,148,2,E30,2,4,61,B,"' + List_cdBarras[j + 1] + '"');
    Editor.Lines.Add('B651,340,2,E30,2,4,61,B,"' + List_cdBarras[j] + '"');
    Editor.Lines.Add('B666,148,2,E30,2,4,61,B,"' + List_cdBarras[j] + '"');
    Editor.Lines.Add('A200,29,2,2,1,1,N,"Cod. ' + List_Codigo[j + 1] + '"');
    Editor.Lines.Add('A340,500,2,1,3,3,N,"' + nmEmpresa + '"');
    Editor.Lines.Add('A537,31,2,2,1,1,N,"Cod. ' + List_Codigo[j] + '"');
    Editor.Lines.Add('A328,373,2,1,1,1,N,"' + List_nm2[j + 1] + '"');
    Editor.Lines.Add('A680,500,2,1,3,3,N,"' + nmEmpresa + '"');
    Editor.Lines.Add('A676,372,2,1,1,1,N,"' + List_nm2[j] + '"');
    Editor.Lines.Add('A329,401,2,1,1,1,N,"' + List_nm1[j + 1] + '"');
    Editor.Lines.Add('A330,222,2,1,1,1,N,"' + Copy(vendereco, 1, 30) + '"');
    Editor.Lines.Add('A679,220,2,1,1,1,N,"' + Copy(vendereco, 1, 30) + '"');
    Editor.Lines.Add('A676,400,2,1,1,1,N,"' + List_nm1[j] + '"');
    Editor.Lines.Add('A315,55,2,2,1,1,N,"R$ ' + List_vlPreco[j + 1] + '"');
    Editor.Lines.Add('A655,60,2,2,1,1,N,"R$ ' + List_vlPreco[j] + '"');
    Editor.Lines.Add('P1');
    j := j + 2;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print.bat')), sw_ShowNormal);
  if not FileExists('Print.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasPontoDasTintas;
begin
  FrmEtiquetaPontoDasTintas := TFrmEtiquetaPontoDasTintas.Create(Application);
  FrmEtiquetaPontoDasTintas.ShowModal;
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasSaoJose;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('^Q25,3');
    Editor.Lines.Add('^W100');
    Editor.Lines.Add('^H19');
    vqtd := StrToInt(FormatFloat('0', StrToFloat(SgDados.Cells[2, L])));
    Editor.Lines.Add('^P' + FormatFloat('0', vqtd));
    Editor.Lines.Add('^S2');
    Editor.Lines.Add('^AD');
    Editor.Lines.Add('^C1');
    Editor.Lines.Add('^R0');
    Editor.Lines.Add('~Q+0');
    Editor.Lines.Add('^O0');
    Editor.Lines.Add('^D0');
    Editor.Lines.Add('^E10');
    Editor.Lines.Add('~R200');
    Editor.Lines.Add('^L');
    Editor.Lines.Add('Dy2-me-dd');
    Editor.Lines.Add('Th:m:s');
    Editor.Lines.Add('AC,24,22,1,1,0,0,COD. ' + SgDados.Cells[0, L] + ' - ' +
      Copy(SgDados.Cells[1, L], 1, 38));
    Editor.Lines.Add('AC,22,62,1,1,0,0,' + Copy(SgDados.Cells[1, L], 39, 60));
    Editor.Lines.Add('AC,22,80,2,3,0,0,' + SgDados.Cells[10, L] + ' - R$ ' +
      SgDados.Cells[3, L]);
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_AMORBEBE;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''70.1 mm''></xpml>I8,1,001');
      Editor.Lines.Add('q676');
      Editor.Lines.Add('O');
      Editor.Lines.Add('JF');
      Editor.Lines.Add('WN');
      Editor.Lines.Add('ZT');
      Editor.Lines.Add('Q560,25');
      Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''70.1 mm''></xpml>N');
      Editor.Lines.Add('');
      Editor.Lines.Add('A568,540,2,3,1,1,N,"AMOR BEBE"');
      Editor.Lines.Add('');
      Editor.Lines.Add('A650,505,2,3,1,1,N,"'+Copy(SgDados.Cells[1, L], 1,20)+'"');
      Editor.Lines.Add('A650,483,2,3,1,1,N,"'+Copy(SgDados.Cells[1, L], 21,20)+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('B588,448,2,1,3,6,51,N,"'+SgDados.Cells[0, L]+'"');
      Editor.Lines.Add('A536,389,2,2,1,1,N,"'+SgDados.Cells[0, L]+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('A642,360,2,2,1,1,N,"Data de compra __/__/___"');
      Editor.Lines.Add('A642,320,2,2,1,1,N,"Prazo de troca de 30"');
      Editor.Lines.Add('A642,300,2,2,1,1,N,"dias."');
      Editor.Lines.Add('A642,280,2,2,1,1,N,"Pecas em promocao,"');
      Editor.Lines.Add('A642,260,2,2,1,1,N,"apenas durante o"');
      Editor.Lines.Add('A642,240,2,2,1,1,N,"periodo promocional"');
      Editor.Lines.Add('');
      Editor.Lines.Add('B585,181,2,1,3,6,51,N,"'+SgDados.Cells[0, L]+'"');
      Editor.Lines.Add('A536,122,2,2,1,1,N,"'+SgDados.Cells[0, L]+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('A630,79,2,3,2,2,N,"R$ '+SgDados.Cells[3, L]+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('');
      Editor.Lines.Add('');
      Editor.Lines.Add('A218,540,2,3,1,1,N,"AMOR BEBE"');
      Editor.Lines.Add('');
      Editor.Lines.Add('A300,505,2,3,1,1,N,"'+Copy(SgDados.Cells[1, L], 1,20)+'"');
      Editor.Lines.Add('A300,483,2,3,1,1,N,"'+Copy(SgDados.Cells[1, L], 21,20)+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('B238,448,2,1,3,6,51,N,"'+SgDados.Cells[0, L]+'"');
      Editor.Lines.Add('A186,389,2,2,1,1,N,"'+SgDados.Cells[0, L]+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('A300,360,2,2,1,1,N,"Data de compra __/__/___"');
      Editor.Lines.Add('A300,320,2,2,1,1,N,"Prazo de troca de 30"');
      Editor.Lines.Add('A300,300,2,2,1,1,N,"dias."');
      Editor.Lines.Add('A300,280,2,2,1,1,N,"Pecas em promocao,"');
      Editor.Lines.Add('A300,260,2,2,1,1,N,"apenas durante o"');
      Editor.Lines.Add('A300,240,2,2,1,1,N,"periodo promocional"');
      Editor.Lines.Add('');
      Editor.Lines.Add('');
      Editor.Lines.Add('B238,181,2,1,3,6,51,N,"'+SgDados.Cells[0, L]+'"');
      Editor.Lines.Add('A186,122,2,2,1,1,N,"'+SgDados.Cells[0, L]+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('A288,79,2,3,2,2,N,"R$ '+SgDados.Cells[3, L]+'"');
      Editor.Lines.Add('');
      if Frac(StrToFloat(SgDados.Cells[2, L]) / 2) = 0.00 then
        vqtd := StrToFloat(SgDados.Cells[2, L]) / 2
      else
        vqtd := (StrToInt(FormatFloat('0', StrToFloat(SgDados.Cells[2, L])))
        div 2) + 1;
      Editor.Lines.Add('P' + FormatFloat('0', vqtd));
      Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_ConstruFort_Gondola;
var
  L, y: Integer;
  Arq: TextFile;
  vqtd: Real;
  cont: Integer;
  pessoa : TPessoa;
  Produto: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then

  // SalvaEtiquetas;
  cont := 0;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    cont := cont + 1;
  end;
  if Frac(cont / 2) = 0.00 then
    vqtd := cont / 2
  else
    vqtd := (StrToInt(FormatFloat('0000', cont)) div 2) + 1;
  cont := Trunc(vqtd);
  if cont <= 0 then
    cont := 1;
  Editor.Lines.Clear;
  L := 1;
  for y := 1 to cont do
  begin // Salvando os itens da pré-venda.
    // if SgDados.Cells[0,L] = '' then Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q240,25');
    Editor.Lines.Add('q819');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A100,16,0,1,1,2,N,"'+Copy(SgDados.Cells[1, L], 1,30)+'"');
    Editor.Lines.Add('A100,48,0,1,1,2,N,"'+Copy(SgDados.Cells[1, L], 31,9)+'"');
    Editor.Lines.Add('A18,16,0,1,1,2,N,"'+SgDados.Cells[0, L]+' -"');
    Editor.Lines.Add('B86,152,0,E30,2,2,40,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A120,195,0,2,1,1,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A100,80,0,4,1,3,N,"R$ '+ FormatFloat('0.00',strtoFloat(SgDados.Cells[3, L])) +'"');
    Editor.Lines.Add('');

    if SgDados.Cells[0,L+1] <> '' then begin
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L+1]));
      Editor.Lines.Add('A520,16,0,1,1,2,N,"'+Copy(SgDados.Cells[1, L+1], 1,30)+'"');
      Editor.Lines.Add('A520,48,0,1,1,2,N,"'+Copy(SgDados.Cells[1, L+1], 31,9)+'"');
      Editor.Lines.Add('A438,16,0,1,1,2,N,"'+SgDados.Cells[0, L+1]+' -"');
      Editor.Lines.Add('B506,152,0,E30,2,2,40,N,"'+SgDados.Cells[6, L+1]+'"');
      Editor.Lines.Add('A540,195,0,2,1,1,N,"'+SgDados.Cells[6, L+1]+'"');
      Editor.Lines.Add('A520,80,0,4,1,3,N,"R$ '+FormatFloat('0.00',strtoFloat(SgDados.Cells[3, L+1]))+'"');
    end;

    Editor.Lines.Add('P1');
    L := L + 2;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
  begin
    ShowMessage('Não foi encontrado o arquivo Print.bat');
    exit;
  end;
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  if Produto <> nil then
    FreeAndNil(Produto);
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_JMComercio;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
      Editor.Lines.Add('I8,1,001');
      Editor.Lines.Add('');
      Editor.Lines.Add('Q240,12');
      Editor.Lines.Add('q832');
      Editor.Lines.Add('');
      Editor.Lines.Add('D11');
      Editor.Lines.Add('');
      Editor.Lines.Add('O');
      Editor.Lines.Add('');
      Editor.Lines.Add('JF');
      Editor.Lines.Add('');
      Editor.Lines.Add('WN');
      Editor.Lines.Add('');
      Editor.Lines.Add('ZB');
      Editor.Lines.Add('');
      Editor.Lines.Add('N');
      Editor.Lines.Add('');
      Editor.Lines.Add('A16,24,0,4,1,2,N,"'+SgDados.Cells[1, L]+'"');
      Editor.Lines.Add('A16,76,0,4,1,2,N,"'+Produto.unidade.unidade+'"');
      Editor.Lines.Add('B24,130,0,1,3,6,48,N,"'+SgDados.Cells[6, L]+'"');
      Editor.Lines.Add('A120,184,0,1,1,2,N,"'+SgDados.Cells[6, L]+'"');
      Editor.Lines.Add('A450,144,0,1,2,3,N,"R$"');
      Editor.Lines.Add('A498,96,0,3,2,5,N,"'+FormatFloat('0.00',StrtoFloat(SgDados.Cells[3, L]))+'"');
      vqtd := StrToFloat(SgDados.Cells[2, L]);
      Editor.Lines.Add('P' + FormatFloat('0', vqtd));
      FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_1Col_Varejo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q320,25');
    Editor.Lines.Add('q484');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A41,11,0,3,1,2,N,"'+Copy(SgDados.Cells[1, L],1,30)+'"');
    Editor.Lines.Add('A41,53,0,3,1,2,N,"'+Copy(SgDados.Cells[1, L],31,9)+'"');
    Editor.Lines.Add('A65,123,0,5,1,1,N,"COD: '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A188,208,0,1,1,2,N,"Pr. Varejo"');
    Editor.Lines.Add('A40,247,0,5,1,1,N,"R$ '+SgDados.Cells[3, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_1Col_Varejo_Logo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q320,25');
    Editor.Lines.Add('q484');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A41,69,0,2,1,2,N,"'+Copy(SgDados.Cells[1, L],1,30)+'"');
    Editor.Lines.Add('A41,105,0,2,1,2,N,"'+Copy(SgDados.Cells[1, L],31,9)+'"');
    Editor.Lines.Add('A65,150,0,5,1,1,N,"COD: '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A188,208,0,1,1,2,N,"Pr. Varejo"');
    Editor.Lines.Add('A40,247,0,5,1,1,N,"R$ '+SgDados.Cells[3, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  GetAndAddLogomarca('ONE');
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_1Col_VarejoAtacado;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q320,25');
    Editor.Lines.Add('q484');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A41,11,0,3,1,2,N,"'+Copy(SgDados.Cells[1, L],1,30)+'"');
    Editor.Lines.Add('A41,53,0,3,1,2,N,"'+Copy(SgDados.Cells[1, L],31,9)+'"');
    Editor.Lines.Add('A300,208,0,1,1,2,N,"Pr. Varejo"');
    Editor.Lines.Add('A65,123,0,5,1,1,N,"COD: '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A69,208,0,1,1,2,N,"Pr. Atacado"');
    Editor.Lines.Add('A38,245,0,4,1,2,N,"R$ '+ FormatFloat('0.00',produto.vlAtacado)+'"');
    Editor.Lines.Add('A267,245,0,4,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_1Col_VarejoAtacado_Logo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q320,25');
    Editor.Lines.Add('q484');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A41,69,0,2,1,2,N,"'+Copy(SgDados.Cells[1, L],1,30)+'"');
    Editor.Lines.Add('A41,105,0,2,1,2,N,"'+Copy(SgDados.Cells[1, L],31,9)+'"');
    Editor.Lines.Add('A79,208,0,1,1,2,N,"Pr. Varejo"');
    Editor.Lines.Add('A65,150,0,5,1,1,N,"COD: '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A282,208,0,1,1,2,N,"Pr. Atacado"');
    Editor.Lines.Add('A249,246,0,4,1,2,N,"R$ '+ FormatFloat('0.00',produto.vlAtacado)+'"');
    Editor.Lines.Add('A41,246,0,4,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  GetAndAddLogomarca('ONE');
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_Menor_Descricao;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q200,25');
    Editor.Lines.Add('q676');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A22,16,0,4,1,2,N,"'+SgDados.Cells[1, L]+'"');
    Editor.Lines.Add('A82,139,0,3,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A22,75,0,4,2,2,N,"COD: '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A366,16,0,4,1,2,N,"'+SgDados.Cells[1, L]+'"');
    Editor.Lines.Add('A426,139,0,3,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A366,75,0,4,2,2,N,"COD: '+SgDados.Cells[0, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_Sem_Descricao_Varejo_Logo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q320,25');
    Editor.Lines.Add('q484');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A188,208,0,1,1,2,N,"Pr. Varejo"');
    Editor.Lines.Add('A40,247,0,5,1,1,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A65,77,0,5,1,2,N,"COD: '+SgDados.Cells[0, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  GetAndAddLogomarca('ONE');
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_Sem_Descricao_2Col_Logo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q200,25');
    Editor.Lines.Add('q676');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A82,139,0,3,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A22,75,0,4,2,2,N,"COD '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A426,139,0,3,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A366,75,0,4,2,2,N,"COD '+SgDados.Cells[0, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  GetAndAddLogomarca('TWO');
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_Sem_Descricao_VarejoAtacado_Logo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q320,25');
    Editor.Lines.Add('q484');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A79,208,0,1,1,2,N,"Pr. Atacado"');
    Editor.Lines.Add('A41,246,0,4,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A282,208,0,1,1,2,N,"Pr. Varejo"');
    Editor.Lines.Add('A249,246,0,4,1,2,N,"R$ '+FormatFloat('0.00',produto.vlAtacado)+'"');
    Editor.Lines.Add('A65,77,0,5,1,2,N,"COD: '+SgDados.Cells[0, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  GetAndAddLogomarca('ONE');
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_Mini_3Col_Logo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q120,28');
    Editor.Lines.Add('q684');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A48,52,0,3,1,2,N,"COD: '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A284,52,0,3,1,2,N,"COD: '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A520,52,0,3,1,2,N,"COD: '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  GetAndAddLogomarca('THREE');
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_Maior_Descricao;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q200,25');
    Editor.Lines.Add('q676');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A26,14,0,3,1,1,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A26,39,0,3,1,1,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    Editor.Lines.Add('A70,131,0,4,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A94,71,0,4,1,2,N,"COD '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A370,14,0,3,1,1,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A370,39,0,3,1,1,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    Editor.Lines.Add('A414,131,0,4,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A438,71,0,4,1,2,N,"COD '+SgDados.Cells[0, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_2Col_1SubGrupo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q200,25');
    Editor.Lines.Add('q676');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A76,75,0,5,1,1,N,"'+Produto.Subgrupo.nome+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A420,75,0,5,1,1,N,"'+Produto.Subgrupo.nome+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_2Col_2SubGrupo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto,Produto2,Produto3 : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q200,25');
    Editor.Lines.Add('q676');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A76,21,0,5,1,1,N,"'+produto.Subgrupo.nome+'"');
    Produto2 := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L+1]));
    Editor.Lines.Add('A76,123,0,5,1,1,N,"'+produto2.Subgrupo.nome+'"');
    Editor.Lines.Add('LO31,93,269,3');
    Editor.Lines.Add('');
    Editor.Lines.Add('A420,21,0,5,1,1,N,"'+produto.Subgrupo.nome+'"');
    Editor.Lines.Add('A420,123,0,5,1,1,N,"'+produto2.Subgrupo.nome+'"');
    Editor.Lines.Add('LO375,93,269,3');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
    break;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_2Col_3SubGrupo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto,Produto2,Produto3 : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q200,25');
    Editor.Lines.Add('q676');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A31,23,0,4,1,2,N,"'+produto.Subgrupo.nome+'"');
    Produto2 := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L+1]));
    Editor.Lines.Add('A184,23,0,4,1,2,N,"'+produto2.Subgrupo.nome+'"');
    Editor.Lines.Add('LO31,93,269,3');
    Editor.Lines.Add('LO165,15,3,79');
    Produto3 := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L+2]));
    Editor.Lines.Add('A126,122,0,4,1,2,N,"'+produto3.Subgrupo.nome+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A375,23,0,4,1,2,N,"'+produto.Subgrupo.nome+'"');
    Editor.Lines.Add('A528,23,0,4,1,2,N,"'+produto2.Subgrupo.nome+'"');
    Editor.Lines.Add('LO375,93,269,3');
    Editor.Lines.Add('LO509,15,3,79');
    Editor.Lines.Add('A470,122,0,4,1,2,N,"'+produto3.Subgrupo.nome+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
    break;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_2Col_4SubGrupo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto,Produto2,Produto3,Produto4 : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q200,25');
    Editor.Lines.Add('q676');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A31,23,0,4,1,2,N,"'+produto.Subgrupo.nome+'"');
    Produto2 := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L+1]));
    Editor.Lines.Add('A184,23,0,4,1,2,N,"'+produto2.Subgrupo.nome+'"');
    Editor.Lines.Add('LO31,93,269,3');
    Editor.Lines.Add('LO165,15,3,170');
    Produto3 := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L+2]));
    Editor.Lines.Add('A31,122,0,4,1,2,N,"'+produto3.Subgrupo.nome+'"');
    Produto4 := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L+3]));
    Editor.Lines.Add('A184,122,0,4,1,2,N,"'+produto4.Subgrupo.nome+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A375,23,0,4,1,2,N,"'+produto.Subgrupo.nome+'"');
    Editor.Lines.Add('A528,23,0,4,1,2,N,"'+produto2.Subgrupo.nome+'"');
    Editor.Lines.Add('LO375,93,269,3');
    Editor.Lines.Add('LO509,15,3,170');
    Editor.Lines.Add('A375,122,0,4,1,2,N,"'+produto3.Subgrupo.nome+'"');
    Editor.Lines.Add('A528,122,0,4,1,2,N,"'+produto4.Subgrupo.nome+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
    break;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_2Col_Gaveta;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q200,25');
    Editor.Lines.Add('q676');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A94,45,0,5,2,2,N,"'+produto.prateleira+'"');
    Editor.Lines.Add('A438,45,0,5,2,2,N,"'+produto.prateleira+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_CAMPOS_2Col_AtacadoVarejo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q200,25');
    Editor.Lines.Add('q676');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A26,14,0,3,1,1,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A26,39,0,3,1,1,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    Editor.Lines.Add('A114,131,0,4,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A44,150,0,1,1,1,N,"Varejo"');
    Editor.Lines.Add('A34,90,0,1,1,1,N,"Atacado"');
    Editor.Lines.Add('A114,71,0,4,1,2,N,"R$ '+FormatFloat('0.00',produto.vlAtacado)+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A370,14,0,3,1,1,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A370,39,0,3,1,1,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    Editor.Lines.Add('A458,131,0,4,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A388,150,0,1,1,1,N,"Varejo"');
    Editor.Lines.Add('A378,90,0,1,1,1,N,"Atacado"');
    Editor.Lines.Add('A458,71,0,4,1,2,N,"R$ '+FormatFloat('0.00',produto.vlAtacado)+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_EmporioVerdeBrasil;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Editor.Lines.Add('I8,1,001');
      Editor.Lines.Add('');
      Editor.Lines.Add('N');
      Editor.Lines.Add('');
      Editor.Lines.Add('Q240,12');
      Editor.Lines.Add('q832');
      Editor.Lines.Add('');
      Editor.Lines.Add('O');
      Editor.Lines.Add('');
      Editor.Lines.Add('JF');
      Editor.Lines.Add('');
      Editor.Lines.Add('WN');
      Editor.Lines.Add('');
      Editor.Lines.Add('ZB');
      Editor.Lines.Add('');
      Editor.Lines.Add('A64,32,0,4,1,2,N,"'+SgDados.Cells[1, L]+'"');
      Editor.Lines.Add('A64,96,0,3,1,2,N,"COD: '+SgDados.Cells[0, L]+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('A240,130,0,4,3,3,N,"R$ '+SgDados.Cells[3, L]+'"');
      vqtd := StrToFloat(SgDados.Cells[2, L]);
      Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_JAKIDS_Gondola_Varejo_Atacado;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
      Editor.Lines.Add('I8,1,001');
      Editor.Lines.Add('');
      Editor.Lines.Add('N');
      Editor.Lines.Add('');
      Editor.Lines.Add('Q240,12');
      Editor.Lines.Add('q832');
      Editor.Lines.Add('');
      Editor.Lines.Add('O');
      Editor.Lines.Add('');
      Editor.Lines.Add('JF');
      Editor.Lines.Add('');
      Editor.Lines.Add('WN');
      Editor.Lines.Add('');
      Editor.Lines.Add('ZB');
      Editor.Lines.Add('');
      Editor.Lines.Add('A64,24,0,4,1,2,N,"'+SgDados.Cells[1, L]+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('A64,122,0,3,1,2,N,"Atacado a partir"');
      Editor.Lines.Add('A64,160,0,3,1,2,N,"de '+FormatFloat('0',Produto.nrQtdAtacarejo)+' unidades"');
      Editor.Lines.Add('');
      Editor.Lines.Add('A324,88,0,3,1,2,N,"Preco atacado"');
      Editor.Lines.Add('A300,136,0,2,2,4,N,"'+FormatFloat('0.00',Produto.vlAtacado)+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('A614,88,0,3,1,2,N,"Preco varejo"');
      Editor.Lines.Add('A590,136,0,3,2,4,N,"'+FormatFloat('0.00',Produto.vlPreco)+'"');
      Editor.Lines.Add('');
      vqtd := StrToFloat(SgDados.Cells[2, L]);
      Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_JAKIDS_Gondola_Varejo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Editor.Lines.Add('I8,1,001');
      Editor.Lines.Add('');
      Editor.Lines.Add('N');
      Editor.Lines.Add('');
      Editor.Lines.Add('Q240,12');
      Editor.Lines.Add('q832');
      Editor.Lines.Add('');
      Editor.Lines.Add('O');
      Editor.Lines.Add('');
      Editor.Lines.Add('JF');
      Editor.Lines.Add('');
      Editor.Lines.Add('WN');
      Editor.Lines.Add('');
      Editor.Lines.Add('ZB');
      Editor.Lines.Add('');
      Editor.Lines.Add('A64,8,0,4,1,2,N,"'+SgDados.Cells[1, L]+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('B64,76,0,1,3,2,49,N,"'+SgDados.Cells[6, L]+'"');
      Editor.Lines.Add('A150,136,0,1,1,2,N,"'+SgDados.Cells[6, L]+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('A146,180,0,2,1,2,N,"J&A KIDS"');
      Editor.Lines.Add('');
      Editor.Lines.Add('A480,74,0,3,2,5,N,"R$ '+SgDados.Cells[3, L]+'"');
      Editor.Lines.Add('');
      vqtd := StrToFloat(SgDados.Cells[2, L]);
      Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_JAKIDS_3Col_CdBarras;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q168,25');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('B22,44,0,1,2,1,40,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A78,95,0,1,1,2,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('B314,44,0,1,2,1,40,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A370,95,0,1,1,2,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('B598,44,0,1,2,1,40,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A654,95,0,1,1,2,N,"'+SgDados.Cells[6, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_JAKIDS_3Col_Desc_Preco;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q168,25');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('A32,8,0,1,1,2,N,"'+Copy(SgDados.Cells[1, L],1,24)+'"');
    Editor.Lines.Add('A32,40,0,1,1,2,N,"'+Copy(SgDados.Cells[1, L],25,16)+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A54,95,0,1,2,3,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A324,8,0,1,1,2,N,"'+Copy(SgDados.Cells[1, L],1,24)+'"');
    Editor.Lines.Add('A324,40,0,1,1,2,N,"'+Copy(SgDados.Cells[1, L],25,16)+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A346,95,0,1,2,3,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A616,8,0,1,1,2,N,"'+Copy(SgDados.Cells[1, L],1,24)+'"');
    Editor.Lines.Add('A616,40,0,1,1,2,N,"'+Copy(SgDados.Cells[1, L],25,16)+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A638,95,0,1,2,3,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_AsaBranca_StGreide;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
    Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q240,25');
    Editor.Lines.Add('q819');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A54,31,0,4,1,1,N,"'+SgDados.Cells[1, L]+'"');
    Editor.Lines.Add('A54,63,0,4,1,1,N,"'+SgDados.Cells[10, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A134,85,0,2,1,1,N,"Pr. Varejo"');
    Editor.Lines.Add('A41,120,0,3,2,4,N,"R$ '+FormatFloat('0.00',StrtoFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A538,85,0,2,1,1,N,"Pr. Atacado"');
    Editor.Lines.Add('A444,120,0,3,2,4,N,"R$ '+FormatFloat('0.00',Produto.vlAtacado)+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_AsaBranca_StGreide_Varejo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
    Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q240,25');
    Editor.Lines.Add('q819');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A54,31,0,4,1,1,N,"'+SgDados.Cells[1, L]+'"');
    Editor.Lines.Add('A54,63,0,4,1,1,N,"'+SgDados.Cells[10, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A350,85,0,2,1,1,N,"Pr. Varejo"');
    Editor.Lines.Add('A256,120,0,3,2,4,N,"R$ '+FormatFloat('0.00',StrtoFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_AsaBranca_Gondola_ARGOX;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
    Break;
    Editor.Lines.Add('n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f322');
    Editor.Lines.Add('D');
    Editor.Lines.Add('L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('1911A1000840082'+SgDados.Cells[1, L]+'');
    Editor.Lines.Add('1912A1800140234R$ '+SgDados.Cells[3, L]+'');
    Editor.Lines.Add('1911A1000650034'+SgDados.Cells[10, L]+'');
    Editor.Lines.Add('1e6302700250033C' + Copy(trim(SgDados.Cells[6, L]), 1, 12)+'&E'+Copy(trim(SgDados.Cells[6, L]), 13, 1));
    Editor.Lines.Add('1911A10000900747'+SgDados.Cells[6, L]+'');
    Editor.Lines.Add('1911A1000840034'+SgDados.Cells[0, L]+'');
    Editor.Lines.Add('1911A1000840071-');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + FormatFloat('0', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_NovoGarden_3Col;
var
  L, y: Integer;
  Arq: TextFile;
  vqtd: Real;
  cont: Integer;
  pessoa : TPessoa;
  Produto: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then

  // SalvaEtiquetas;
  cont := 0;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    cont := cont + 1;
  end;
  if Frac(cont / 3) = 0.00 then
    vqtd := cont / 3
  else
    vqtd := (StrToInt(FormatFloat('0000', cont)) div 3) + 1;
  cont := Trunc(vqtd);
  if cont <= 0 then
    cont := 1;
  Editor.Lines.Clear;
  L := 1;
  for y := 1 to cont do
  begin // Salvando os itens da pré-venda.
    // if SgDados.Cells[0,L] = '' then Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('^XA');
    Editor.Lines.Add('^SZ2^JMA');
    Editor.Lines.Add('^MCY^PMN');
    Editor.Lines.Add('^PW816');
    Editor.Lines.Add('^MD15');
    Editor.Lines.Add('~JSN');
    Editor.Lines.Add('^JZY');
    Editor.Lines.Add('^LH8,8^LRN');
    Editor.Lines.Add('^XZ');
    Editor.Lines.Add('');
    Editor.Lines.Add('^XA');
    Editor.Lines.Add('^CI0');

    Editor.Lines.Add('^FO16,8');
    Editor.Lines.Add('^A0N,31,22^FD'+Copy(SgDados.Cells[1, L],1,20)+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO16,40');
    Editor.Lines.Add('^A0N,31,23^FD'+Copy(SgDados.Cells[1, L],21,20)+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO16,88');
    Editor.Lines.Add('^A0N,31,26^FD'+SgDados.Cells[0, L]+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO136,88');
    Editor.Lines.Add('^A0N,31,26^FDR$ '+SgDados.Cells[3, L]+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO16,135');
    if SgDados.Cells[6, L] <> '' then
      Editor.Lines.Add('^BY2^BCN,32,N,N^FD>;'+Copy(trim(SgDados.Cells[6, L]), 1, 12)+'>6'+Copy(trim(SgDados.Cells[6, L]), 13, 1)+'^FS')
    else
      Editor.Lines.Add('^BY2^BCN,32,N,N^FD>;'+Copy(trim(SgDados.Cells[0, L]), 1, Length(SgDados.Cells[0, L])-1)+'>6'+Copy(trim(SgDados.Cells[0, L]), Length(SgDados.Cells[0, L])-1, 1)+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    if SgDados.Cells[0,L+1] <> '' then begin
      Editor.Lines.Add('^FO288,8');
      Editor.Lines.Add('^A0N,31,22^FD'+Copy(SgDados.Cells[1, L+1],1,20)+'^FS');
      Editor.Lines.Add('');
      Editor.Lines.Add('^FO288,40');
      Editor.Lines.Add('^A0N,34,23^FD'+Copy(SgDados.Cells[1, L+1],21,20)+'^FS');
      Editor.Lines.Add('');
      Editor.Lines.Add('^FO288,88');
      Editor.Lines.Add('^A0N,31,26^FD'+SgDados.Cells[0, L+1]+'^FS');
      Editor.Lines.Add('');
      Editor.Lines.Add('^FO408,88');
      Editor.Lines.Add('^A0N,34,26^FDR$ '+SgDados.Cells[3, L+1]+'^FS');
      Editor.Lines.Add('');
      Editor.Lines.Add('^FO288,135');
      if SgDados.Cells[6, L] <> '' then
        Editor.Lines.Add('^BCN,32,N,N^FD>;'+Copy(trim(SgDados.Cells[6, L+1]), 1, 12)+'>6'+Copy(trim(SgDados.Cells[6, L+1]), 13, 1)+'^FS')
      else
        Editor.Lines.Add('^BCN,32,N,N^FD>;'+Copy(trim(SgDados.Cells[0, L+1]), 1, Length(SgDados.Cells[0, L+1])-1)+'>6'+Copy(trim(SgDados.Cells[0, L+1]), Length(SgDados.Cells[0, L+1])-1, 1)+'^FS');
      Editor.Lines.Add('');
      Editor.Lines.Add('');
      Editor.Lines.Add('');
    end;
    if SgDados.Cells[0,L+2] <> '' then begin
      Editor.Lines.Add('^FO560,8');
      Editor.Lines.Add('^A0N,31,22^FD'+Copy(SgDados.Cells[1, L+2],1,20)+'^FS');
      Editor.Lines.Add('');
      Editor.Lines.Add('^FO560,40');
      Editor.Lines.Add('^A0N,34,23^FD'+Copy(SgDados.Cells[1, L+2],21,20)+'^FS');
      Editor.Lines.Add('');
      Editor.Lines.Add('^FO560,88');
      Editor.Lines.Add('^A0N,31,26^FD'+SgDados.Cells[0, L+2]+'^FS');
      Editor.Lines.Add('');
      Editor.Lines.Add('^FO680,88');
      Editor.Lines.Add('^A0N,34,26^FDR$ '+SgDados.Cells[3, L+2]+'^FS');
      Editor.Lines.Add('');
      Editor.Lines.Add('^FO560,135');
      if SgDados.Cells[6, L] <> '' then
        Editor.Lines.Add('^BCN,32,N,N^FD>;'+Copy(trim(SgDados.Cells[6, L+2]), 1, 12)+'>6'+Copy(trim(SgDados.Cells[6, L+2]), 13, 1)+'^FS')
      else
        Editor.Lines.Add('^BCN,32,N,N^FD>;'+Copy(trim(SgDados.Cells[0, L+2]), 1, Length(SgDados.Cells[0, L+2])-1)+'>6'+Copy(trim(SgDados.Cells[0, L+2]), Length(SgDados.Cells[0, L+2])-1, 1)+'^FS');
    end;
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('^PQ'+FormatFloat('0', vqtd)+',0,1,Y');
    Editor.Lines.Add('');
    Editor.Lines.Add('^XZ');
    L := L + 3;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
  begin
    ShowMessage('Não foi encontrado o arquivo Print.bat');
    exit;
  end;
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  if Produto <> nil then
    FreeAndNil(Produto);
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_NovoGarden_Menor;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('^XA');
    Editor.Lines.Add('^SZ2^JMA');
    Editor.Lines.Add('^MCY^PMN');
    Editor.Lines.Add('^PW400');
    Editor.Lines.Add('^MD15');
    Editor.Lines.Add('~JSN');
    Editor.Lines.Add('^JZY');
    Editor.Lines.Add('^LH8,8^LRN');
    Editor.Lines.Add('^XZ');
    Editor.Lines.Add('');
    Editor.Lines.Add('^XA');
    Editor.Lines.Add('^CI0');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO16,8');
    Editor.Lines.Add('^A0N,34,23^FD'+Copy(SgDados.Cells[1, L],1,31)+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO16,40');
    Editor.Lines.Add('^A0N,34,23^FD'+Copy(SgDados.Cells[1, L],32,9)+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO16,96');
    Editor.Lines.Add('^A0N,39,26^FDCOD: '+SgDados.Cells[0, L]+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO184,56');
    Editor.Lines.Add('^A0N,87,35^FDR$ '+SgDados.Cells[3, L]+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO16,160');
    if SgDados.Cells[6, L] <> '' then
      Editor.Lines.Add('^BY3^BCN,32,N,N^FD>;'+Copy(trim(SgDados.Cells[6, L]), 1, 12)+'>6'+Copy(trim(SgDados.Cells[6, L]), 13, 1)+'^FS')
    else
      Editor.Lines.Add('^BY3^BCN,32,N,N^FD>;'+Copy(trim(SgDados.Cells[0, L]), 1, Length(SgDados.Cells[0, L])-1)+'>6'+Copy(trim(SgDados.Cells[0, L]), Length(SgDados.Cells[0, L])-1, 1)+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO144,200');
    Editor.Lines.Add('^A0N,28,19^FD'+SgDados.Cells[6, L]+'^FS');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('^PQ'+FormatFloat('0', vqtd)+',0,1,Y');
    Editor.Lines.Add('');
    Editor.Lines.Add('^XZ');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_NovoGarden_Maior;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('^XA');
    Editor.Lines.Add('^SZ2^JMA');
    Editor.Lines.Add('^MCY^PMN');
    Editor.Lines.Add('^PW488^MD15');
    Editor.Lines.Add('~JSN');
    Editor.Lines.Add('^JZY');
    Editor.Lines.Add('^LH8,8^LRN');
    Editor.Lines.Add('^XZ');
    Editor.Lines.Add('');
    Editor.Lines.Add('^XA');
    Editor.Lines.Add('^CI0');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO16,8');
    Editor.Lines.Add('^A0N,59,22^FD'+SgDados.Cells[1, L]+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO16,128');
    Editor.Lines.Add('^A0N,87,35^FDCOD: '+SgDados.Cells[0, L]+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO296,128');
    Editor.Lines.Add('^A0N,87,35^FDR$ '+SgDados.Cells[3, L]+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO66,232');
    if SgDados.Cells[6, L] <> '' then
      Editor.Lines.Add('^BY3^BCN,32,N,N^FD>;'+Copy(trim(SgDados.Cells[6, L]), 1, 12)+'>6'+Copy(trim(SgDados.Cells[6, L]), 13, 1)+'^FS')
    else
      Editor.Lines.Add('^BY3^BCN,32,N,N^FD>;'+Copy(trim(SgDados.Cells[0, L]), 1, Length(SgDados.Cells[0, L])-1)+'>6'+Copy(trim(SgDados.Cells[0, L]), Length(SgDados.Cells[0, L])-1, 1)+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('^FO184,272');
    Editor.Lines.Add('^A0N,28,19^FD'+SgDados.Cells[6, L]+'^FS');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('^PQ'+FormatFloat('0', vqtd)+',0,1,Y');
    Editor.Lines.Add('');
    Editor.Lines.Add('^XZ');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_NegroMonte_Joia;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('q608');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q104,25');
    Editor.Lines.Add('N');
    Editor.Lines.Add('A577,87,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],1,14)+'"');
    Editor.Lines.Add('A577,70,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],15,14)+'"');
    Editor.Lines.Add('A577,52,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],29,12)+'"');
    Editor.Lines.Add('B408,47,2,1,1,1,19,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A370,22,2,1,1,1,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A408,85,2,3,1,1,N,"R$ '+SgDados.Cells[3, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_Pandoro_Pequena;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q240,25');
    Editor.Lines.Add('N');
    //Editor.Lines.Add('A770,192,2,3,1,2,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A820,172,2,2,1,2,N,"'+Copy(SgDados.Cells[1, L],1,39)+'"');
    Editor.Lines.Add('A697,116,2,1,2,4,N,"R$"');
    Editor.Lines.Add('A647,116,2,3,2,4,N,"'+FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('A652,32,2,2,1,2,N,"'+SgDados.Cells[6, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_Geovana;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q240,12');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('A20,0,0,3,1,2,N,"'+Copy(SgDados.Cells[1, L],1,30)+'"');
    Editor.Lines.Add('A20,40,0,3,1,2,N,"'+Copy(SgDados.Cells[1, L],31,10)+'"');
    Editor.Lines.Add('A20,82,0,2,1,2,N,"'+SgDados.Cells[10, L]+'"');
    Editor.Lines.Add('A430,165,0,2,1,2,N,"COD: '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('LO20,85,515,70');
    Editor.Lines.Add('A160,95,0,3,2,3,R,"R$ '+SgDados.Cells[3, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_AquiAcha;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q240,12');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('A20,0,0,3,1,2,N,"'+Copy(SgDados.Cells[1, L],1,26)+'"');
    Editor.Lines.Add('A20,40,0,3,1,2,N,"'+Copy(SgDados.Cells[1, L],27,14)+'"');
    Editor.Lines.Add('A20,82,0,2,1,2,N,"'+SgDados.Cells[10, L]+'"');
    Editor.Lines.Add('A290,165,0,2,1,2,N,"COD: '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A55,104,0,3,2,3,N,"R$ '+SgDados.Cells[3, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_SAOMARCOS;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q240,12');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('A64,24,0,4,1,2,N,"'+Copy(SgDados.Cells[1, L],1,40)+'"');
    Editor.Lines.Add('A64,76,0,4,1,2,N,"'+SgDados.Cells[10, L]+'"');
    Editor.Lines.Add('B64,130,0,1,3,3,49,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A200,184,0,1,1,2,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A486,120,0,3,2,4,N,"R$ '+SgDados.Cells[3, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_Cardoso;
var
  L, y: Integer;
  Arq: TextFile;
  vqtd: Real;
  cont: Integer;
  pessoa : TPessoa;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then

  // SalvaEtiquetas;
  cont := 0;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    cont := cont + 1;
  end;
  if Frac(cont / 3) = 0.00 then
    vqtd := cont / 3
  else
    vqtd := (StrToInt(FormatFloat('0000', cont)) div 3) + 1;
  cont := Trunc(vqtd);
  if cont <= 0 then
    cont := 1;
  Editor.Lines.Clear;
  L := 1;
  for y := 1 to cont do
  begin // Salvando os itens da pré-venda.
    // if SgDados.Cells[0,L] = '' then Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q120,24');
    Editor.Lines.Add('q699');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A672,118,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A672,92,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    Editor.Lines.Add('A592,65,2,1,1,2,N,"REF."');
    Editor.Lines.Add('A647,37,2,1,1,2,N,'+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('');
    if SgDados.Cells[0,L+1] <> '' then begin
      Editor.Lines.Add('A428,118,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L+1],1,20)+'"');
      Editor.Lines.Add('A428,92,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L+1],21,20)+'"');
      Editor.Lines.Add('A348,61,2,1,1,2,N,"REF."');
      Editor.Lines.Add('A403,37,2,1,1,2,N,"'+SgDados.Cells[7, L+1]+'"');
      Editor.Lines.Add('');
    end;
    if SgDados.Cells[0,L+2] <> '' then begin
      Editor.Lines.Add('A185,118,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L+2],1,20)+'"');
      Editor.Lines.Add('A185,92,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L+2],21,20)+'"');
      Editor.Lines.Add('A101,61,2,1,1,2,N,"REF."');
      Editor.Lines.Add('A160,37,2,1,1,2,N,"'+SgDados.Cells[7, L+2]+'"');
    end;
    Editor.Lines.Add('P1');
    L := L + 3;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
  begin
    ShowMessage('Não foi encontrado o arquivo Print.bat');
    exit;
  end;
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_TokaDasGrifes;
var
  L, y: Integer;
  Arq: TextFile;
  vqtd: Real;
  cont: Integer;
  pessoa : TPessoa;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then

  // SalvaEtiquetas;
  cont := 0;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    cont := cont + 1;
  end;
  if Frac(cont / 3) = 0.00 then
    vqtd := cont / 3
  else
    vqtd := (StrToInt(FormatFloat('0000', cont)) div 3) + 1;
  cont := Trunc(vqtd);
  if cont <= 0 then
    cont := 1;
  Editor.Lines.Clear;
  L := 1;
  for y := 1 to cont do
  begin // Salvando os itens da pré-venda.
    // if SgDados.Cells[0,L] = '' then Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q168,24');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('A24,1,0,1,1,1,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A24,18,0,1,1,1,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    Editor.Lines.Add('B24,34,0,1,2,2,39,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A56,78,0,1,1,1,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A56,98,0,1,1,1,N,"'+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('A70,122,0,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('');

    if SgDados.Cells[0,L+1] <> '' then begin
      Editor.Lines.Add('A320,1,0,1,1,1,N,"'+Copy(SgDados.Cells[1, L+1],1,20)+'"');
      Editor.Lines.Add('A320,18,0,1,1,1,N,"'+Copy(SgDados.Cells[1, L+1],21,20)+'"');
      Editor.Lines.Add('B320,34,0,1,2,2,39,N,"'+SgDados.Cells[6, L+1]+'"');
      Editor.Lines.Add('A352,78,0,1,1,1,N,"'+SgDados.Cells[6, L+1]+'"');
      Editor.Lines.Add('A352,98,0,1,1,1,N,"'+SgDados.Cells[7, L+1]+'"');
      Editor.Lines.Add('A366,122,0,1,1,2,N,"R$ '+SgDados.Cells[3, L+1]+'"');
      Editor.Lines.Add('');
    end;

    if SgDados.Cells[0,L+2] <> '' then begin
      Editor.Lines.Add('A604,1,0,1,1,1,N,"'+Copy(SgDados.Cells[1, L+2],1,20)+'"');
      Editor.Lines.Add('A604,18,0,1,1,1,N,"'+Copy(SgDados.Cells[1, L+2],21,20)+'"');
      Editor.Lines.Add('B604,34,0,1,2,2,39,N,"'+SgDados.Cells[6, L+2]+'"');
      Editor.Lines.Add('A636,78,0,1,1,1,N,"'+SgDados.Cells[6, L+2]+'"');
      Editor.Lines.Add('A636,98,0,1,1,1,N,"'+SgDados.Cells[7, L+2]+'"');
      Editor.Lines.Add('A650,122,0,1,1,2,N,"R$ '+SgDados.Cells[3, L+2]+'"');
    end;
    Editor.Lines.Add('P1');
    L := L + 3;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
  begin
    ShowMessage('Não foi encontrado o arquivo Print.bat');
    exit;
  end;
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_NegroMonte_3_Colunas;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('q739');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q120,25');
    Editor.Lines.Add('N');
    Editor.Lines.Add('A692,110,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A692,93,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    Editor.Lines.Add('B667,73,2,1,2,4,19,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A637,50,2,1,1,1,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A663,28,2,3,1,1,N,"R$ '+SgDados.Cells[3, L]+'"');

    Editor.Lines.Add('A460,110,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A460,93,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    Editor.Lines.Add('B435,73,2,1,2,4,19,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A405,50,2,1,1,1,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A431,28,2,3,1,1,N,"R$ '+SgDados.Cells[3, L]+'"');

    Editor.Lines.Add('A230,110,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A230,93,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    Editor.Lines.Add('B205,73,2,1,2,4,19,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A175,50,2,1,1,1,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A200,28,2,3,1,1,N,"R$ '+SgDados.Cells[3, L]+'"');

    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0', StrToFloat(SgDados.Cells[2, L])))
      div 3) + 1;
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_ConstruFort_3_Colunas_Preco;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('N');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q168,25');
    Editor.Lines.Add('A704,81,2,1,1,2,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A728,39,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A792,157,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A772,122,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');

    Editor.Lines.Add('A414,81,2,1,1,2,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A438,39,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A502,157,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A482,122,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');

    Editor.Lines.Add('A123,81,2,1,1,2,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A147,39,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A211,157,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A191,122,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');

    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0', StrToFloat(SgDados.Cells[2, L])))
      div 3) + 1;
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiqueta_Dumbu_Gondola_Pequena;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('q779');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q240,25');
    Editor.Lines.Add('N');
    if (UpperCase(SgDados.Cells[10, L]) = 'KG') then
      Editor.Lines.Add('A763,98,2,3,2,2,N,"R$ '+FormatFloat('0.00',StrToFloat(SgDados.Cells[3, L])/10)+'"')
    else
      Editor.Lines.Add('A763,98,2,3,2,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    if (UpperCase(SgDados.Cells[10, L]) = 'KG') then
      Editor.Lines.Add('A763,140,2,2,1,2,N,"(100g)"')
    else
      Editor.Lines.Add('A763,140,2,2,1,2,N,"'+SgDados.Cells[10, L]+'"');
    Editor.Lines.Add('A763,222,2,2,1,2,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A763,181,2,2,1,2,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_ConstruFort_3_Colunas;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('N');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q168,25');
    Editor.Lines.Add('A796,153,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A796,127,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    Editor.Lines.Add('A746,35,2,1,1,2,N,"CONSTRUFORT"');
    Editor.Lines.Add('A736,81,2,1,1,2,N,"COD: '+SgDados.Cells[0, L]+'"');

    Editor.Lines.Add('A503,153,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A503,127,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    Editor.Lines.Add('A453,35,2,1,1,2,N,"CONSTRUFORT"');
    Editor.Lines.Add('A443,81,2,1,1,2,N,"COD: '+SgDados.Cells[0, L]+'"');

    Editor.Lines.Add('A210,153,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A210,127,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    Editor.Lines.Add('A160,35,2,1,1,2,N,"CONSTRUFORT"');
    Editor.Lines.Add('A150,81,2,1,1,2,N,"COD: '+SgDados.Cells[0, L]+'"');

    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0', StrToFloat(SgDados.Cells[2, L])))
      div 3) + 1;
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_ELGIN_LAYELUC;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''23.0 mm''></xpml>I8,1,001');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('OP');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q184,16+1');
    Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''23.0 mm''></xpml>N');
    Editor.Lines.Add('A238,165,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A238,148,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    Editor.Lines.Add('B246,123,2,E30,2,4,27,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A210,87,2,1,1,1,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A206,67,2,4,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('B533,122,2,E30,2,4,27,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A498,86,2,1,1,1,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A486,67,2,4,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A525,164,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A525,147,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');

    Editor.Lines.Add('B810,122,2,E30,2,4,27,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A759,86,2,1,1,1,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A771,67,2,4,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A803,164,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],1,20)+'"');
    Editor.Lines.Add('A803,147,2,1,1,1,N,"'+Copy(SgDados.Cells[1, L],21,20)+'"');
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0', StrToFloat(SgDados.Cells[2, L])))
      div 3) + 1;
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_Mercatto;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q240,12');
    Editor.Lines.Add('q560');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('A56,8,0,3,1,2,N,"'+Copy(SgDados.Cells[1, L],1,30)+'"');
    Editor.Lines.Add('A56,48,0,3,1,2,N,"'+Copy(SgDados.Cells[1, L],31,10)+'"');
    Editor.Lines.Add('A56,88,0,3,1,2,N,"'+SgDados.Cells[10, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A146,93,0,3,2,4,N,"R$ '+SgDados.Cells[3, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_DUMBU;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''30.0 mm''></xpml>I8,1,001');
    Editor.Lines.Add('q779');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q240,25');
    Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''30.0 mm''></xpml>N');
    Editor.Lines.Add('A695,213,2,4,1,2,N,"'+SgDados.Cells[1, L]+'"');
    if (UpperCase(SgDados.Cells[10, L]) = 'KG') then
      Editor.Lines.Add('A695,162,2,4,1,2,N,"(100g)"')
    else
      Editor.Lines.Add('A695,162,2,4,1,2,N,"'+SgDados.Cells[10, L]+'"');
    Editor.Lines.Add('B695,103,2,1,3,6,54,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A640,41,2,3,1,1,N,"'+SgDados.Cells[6, L]+'"');
    if (UpperCase(SgDados.Cells[10, L]) = 'KG') then
      Editor.Lines.Add('A290,139,2,4,2,4,N,"R$ '+FormatFloat('0.00',StrToFloat(SgDados.Cells[3, L])/10)+'"')
    else
      Editor.Lines.Add('A290,139,2,4,2,4,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_MiniMercadoMaisEconomia_Gondola;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''30.0 mm''></xpml>n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f322');
    Editor.Lines.Add('D');
    Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''30.0 mm''></xpml>L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('131100000810027'+Copy(SgDados.Cells[1, L],1,40)+'');
    Editor.Lines.Add('112200000120070'+SgDados.Cells[0, L]+'');
    Editor.Lines.Add('1e8402100290027C'+SgDados.Cells[0, L]+'');
    Editor.Lines.Add('141200000280248R$ '+SgDados.Cells[3, L]);
    Editor.Lines.Add('131100000640027'+SgDados.Cells[10, L]);
    vqtd := (StrToInt(FormatFloat('0', StrToFloat(SgDados.Cells[2, L]))));
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_MiniMercadoMaisEconomia_Gondola_Mini;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''30.0 mm''></xpml>n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f322');
    Editor.Lines.Add('D');
    Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''30.0 mm''></xpml>L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('131100000810008'+Copy(SgDados.Cells[1, L],1,30)+'');
    Editor.Lines.Add('112200000050183COD: '+SgDados.Cells[0, L]+'');
    Editor.Lines.Add('141200000230063R$ '+SgDados.Cells[3, L]);
    Editor.Lines.Add('131100000640008'+Copy(SgDados.Cells[1, L],31,10)+'');
    vqtd := (StrToInt(FormatFloat('0', StrToFloat(SgDados.Cells[2, L]))));
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_Anadri_A;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''30.0 mm''></xpml>n');
      Editor.Lines.Add('M0500');
      Editor.Lines.Add('KW0424');
      Editor.Lines.Add('O0220');
      Editor.Lines.Add('V0');
      Editor.Lines.Add('f220');
      Editor.Lines.Add('D');
      Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''30.0 mm''></xpml>L');
      Editor.Lines.Add('D11');
      Editor.Lines.Add('A2');
      Editor.Lines.Add('1f6304500260047'+Copy(SgDados.Cells[6, L],1,12)+'');
      Editor.Lines.Add('1911A0800960044'+Copy(SgDados.Cells[1, L], 1,20)+'');
      //Editor.Lines.Add('1X1100000960044L147001');
      Editor.Lines.Add('1911A0800790044'+Copy(SgDados.Cells[1, L], 21,20)+'');
      //Editor.Lines.Add('1X1100000800044L147001');
      Editor.Lines.Add('1911A0800060076'+SgDados.Cells[6, L]+'');
      Editor.Lines.Add('1f6304500260258'+Copy(SgDados.Cells[6, L],1,12)+'');
      Editor.Lines.Add('1911A0800960256'+Copy(SgDados.Cells[1, L], 1,20)+'');
      //Editor.Lines.Add('1X1100000960255L147001');
      Editor.Lines.Add('1911A0800790256'+Copy(SgDados.Cells[1, L], 21,20)+'');
      //Editor.Lines.Add('1X1100000800255L147001');
      Editor.Lines.Add('1911A0800060287'+SgDados.Cells[6, L]+'');
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 2) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 2
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 2) + 1;
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_Anadri_C;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
    Break;
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''50.0 mm''></xpml>n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('KW0355');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('D');
    Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''50.0 mm''></xpml>L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('1911A1201600158ANADRI');
    Editor.Lines.Add('1911A1401320108'+Copy(SgDados.Cells[1, L], 1,20)+'');
    Editor.Lines.Add('1911A1401060108'+Copy(SgDados.Cells[1, L], 21,20)+'');
    Editor.Lines.Add('1911A1200890136FD C/ 60 UND');
    Editor.Lines.Add('1e6305000340106C'+SgDados.Cells[6, L]+'');
    Editor.Lines.Add('1911A1200110124'+SgDados.Cells[6, L]+'');
    vqtd := (StrToInt(FormatFloat('0', StrToFloat(SgDados.Cells[2, L]))));
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_Anadri_B;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''30.0 mm''></xpml>n');
      Editor.Lines.Add('M0500');
      Editor.Lines.Add('KW0424');
      Editor.Lines.Add('O0220');
      Editor.Lines.Add('V0');
      Editor.Lines.Add('f220');
      Editor.Lines.Add('D');
      Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''30.0 mm''></xpml>L');
      Editor.Lines.Add('D11');
      Editor.Lines.Add('A2');
      Editor.Lines.Add('1911A0800950097ANADRI');
      Editor.Lines.Add('1911A0800770044'+Copy(SgDados.Cells[1, L], 1,20)+'');
      //Editor.Lines.Add('1X1100000780044L147001');
      Editor.Lines.Add('1911A0800400070CONTEM 12 UND.');
      Editor.Lines.Add('1911A0800200061COD. '+SgDados.Cells[6, L]+'');
      Editor.Lines.Add('1911A0800610044'+Copy(SgDados.Cells[1, L], 21,20)+'');
      //Editor.Lines.Add('1X1100000620044L147001');
      Editor.Lines.Add('1911A0800950308ANADRI');
      Editor.Lines.Add('1911A0800770256'+Copy(SgDados.Cells[1, L], 1,20)+'');
      //Editor.Lines.Add('1X1100000780255L147001');
      Editor.Lines.Add('1911A0800400281CONTEM 12 UND.');
      Editor.Lines.Add('1911A0800200272COD. '+SgDados.Cells[6, L]+'');
      Editor.Lines.Add('1911A0800610256'+Copy(SgDados.Cells[1, L], 21,20)+'');
      //Editor.Lines.Add('1X1100000620255L147001');
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 2) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 2
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 2) + 1;
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasShoez;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  desc1, desc2 : string;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    desc1 := trim(Copy(SgDados.Cells[1, L], 1,20));
    desc2 := trim(Copy(SgDados.Cells[1, L], 21,20));
    if desc2 = '' then begin
      desc2 := desc1;
      desc1 := '';
    end;
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''23.0 mm''></xpml>n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('D');
    Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''23.0 mm''></xpml>L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('H20');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('1911A0800700052SHOEZ');
    Editor.Lines.Add('1911A0600600012'+ desc1 + '');
    Editor.Lines.Add('1911A0800400012R$ ' + SgDados.Cells[9, L] + '');
    Editor.Lines.Add('1e4202700130026C'+ SgDados.Cells[7, L] + '&E');
    Editor.Lines.Add('1911A0600020056'+ SgDados.Cells[7, L] + '');
    Editor.Lines.Add('1911A0600510012'+ desc2 + '');
    Editor.Lines.Add('1911A0800700190SHOEZ');
    Editor.Lines.Add('1911A0600600150'+ desc1 + '');
    Editor.Lines.Add('1911A0800400150R$ '+ SgDados.Cells[9, L] + '');
    Editor.Lines.Add('1e4202700130164C'+ SgDados.Cells[7, L] + '&E');
    Editor.Lines.Add('1911A0600510150'+ desc2 + '');
    Editor.Lines.Add('1911A0600040194'+ SgDados.Cells[7, L] + '');
    Editor.Lines.Add('1911A0800700327SHOEZ');
    Editor.Lines.Add('1911A0600600288'+ desc1 + '');
    Editor.Lines.Add('1911A0800400288R$ '+ SgDados.Cells[9, L] + '');
    Editor.Lines.Add('1e4202700130301C'+ SgDados.Cells[7, L] + '&E');
    Editor.Lines.Add('1911A0600510288'+ desc2 + '');
    Editor.Lines.Add('1911A0600040331'+ SgDados.Cells[7, L] + '');
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasDiju;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  desc1, desc2 : string;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    desc1 := trim(Copy(SgDados.Cells[1, L], 1,20));
    desc2 := trim(Copy(SgDados.Cells[1, L], 21,20));
//    if desc2 = '' then begin
//      desc2 := desc1;
//      desc1 := '';
//    end;
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''40.0 mm''></xpml>n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f324');
    Editor.Lines.Add('D');
    Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''40.0 mm''></xpml>L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('1912A0601320035DI JU SHOES');
    Editor.Lines.Add('102200001170007'+ trim(Copy(SgDados.Cells[1, L], 1,18)) + '');
    Editor.Lines.Add('102200001050007'+ trim(Copy(SgDados.Cells[1, L], 19,18)) + '');
    Editor.Lines.Add('102200000940007'+ trim(Copy(SgDados.Cells[1, L], 37,3)) + '');
    Editor.Lines.Add('121100000570050'+SgDados.Cells[0, L]);
    Editor.Lines.Add('1e6301900660017C'+SgDados.Cells[0, L]);
    Editor.Lines.Add('1911A1400280017R$ ' + SgDados.Cells[3, L] + '');
    Editor.Lines.Add('1912A0600040014'+SgDados.Cells[7, L]);
    Editor.Lines.Add('1912A0601320166DI JU SHOES');
    Editor.Lines.Add('102200001170138'+ trim(Copy(SgDados.Cells[1, L], 1,18)) + '');
    Editor.Lines.Add('102200001050138'+ trim(Copy(SgDados.Cells[1, L], 19,18)) + '');
    Editor.Lines.Add('102200000940138'+ trim(Copy(SgDados.Cells[1, L], 37,3)) + '');
    Editor.Lines.Add('121100000570181'+SgDados.Cells[0, L]);
    Editor.Lines.Add('1e6301900660148C'+SgDados.Cells[0, L]);
    Editor.Lines.Add('1911A1400280148R$ ' + SgDados.Cells[3, L] + '');
    Editor.Lines.Add('1912A0600040145'+SgDados.Cells[7, L]);
    Editor.Lines.Add('1912A0601320298DI JU SHOES');
    Editor.Lines.Add('102200001170269'+ trim(Copy(SgDados.Cells[1, L], 1,18)) + '');
    Editor.Lines.Add('102200001050269'+ trim(Copy(SgDados.Cells[1, L], 19,18)) + '');
    Editor.Lines.Add('102200000940269'+ trim(Copy(SgDados.Cells[1, L], 37,3)) + '');
    Editor.Lines.Add('121100000570313'+SgDados.Cells[0, L]);
    Editor.Lines.Add('1e6301900660279C'+SgDados.Cells[0, L]);
    Editor.Lines.Add('1911A1400280279R$ ' + SgDados.Cells[3, L] + '');
    Editor.Lines.Add('1912A0600040276'+SgDados.Cells[7, L]);
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_Diju_New;
var
  L, y: Integer;
  Arq: TextFile;
  vqtd: Real;
  cont: Integer;
  pessoa : TPessoa;
  Produto: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then

  // SalvaEtiquetas;
  cont := 0;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    cont := cont + 1;
  end;
  if Frac(cont / 3) = 0.00 then
    vqtd := cont / 3
  else
    vqtd := (StrToInt(FormatFloat('0000', cont)) div 3) + 1;
  cont := Trunc(vqtd);
  if cont <= 0 then
    cont := 1;
  Editor.Lines.Clear;
  L := 1;
  for y := 1 to cont do
  begin // Salvando os itens da pré-venda.
    // if SgDados.Cells[0,L] = '' then Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''40.0 mm''></xpml>n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f324');
    Editor.Lines.Add('D');
    Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''40.0 mm''></xpml>L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('1912A0601320035DI JU SHOES');
    Editor.Lines.Add('102200001170007'+ trim(Copy(SgDados.Cells[1, L], 1,18)) + '');
    Editor.Lines.Add('102200001050007'+ trim(Copy(SgDados.Cells[1, L], 19,18)) + '');
    Editor.Lines.Add('102200000940007'+ trim(Copy(SgDados.Cells[1, L], 37,3)) + '');
    Editor.Lines.Add('121100000570050'+SgDados.Cells[0, L]);
    Editor.Lines.Add('1e6301900660017C'+SgDados.Cells[0, L]);
    Editor.Lines.Add('1911A1400280017R$ ' + SgDados.Cells[3, L] + '');
    Editor.Lines.Add('1912A0600040014'+Produto.referenciaInterna);
    //Editor.Lines.Add('1X1100000330208B189041001001');
    //Editor.Lines.Add('1X1100000340300L001039');

    if SgDados.Cells[0,L+1] <> '' then begin
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L+1]));
      Editor.Lines.Add('1912A0601320166DI JU SHOES');
      Editor.Lines.Add('102200001170138'+ trim(Copy(SgDados.Cells[1, L+1], 1,18)) + '');
      Editor.Lines.Add('102200001050138'+ trim(Copy(SgDados.Cells[1, L+1], 19,18)) + '');
      Editor.Lines.Add('102200000940138'+ trim(Copy(SgDados.Cells[1, L+1], 37,3)) + '');
      Editor.Lines.Add('121100000570181'+SgDados.Cells[0, L+1]);
      Editor.Lines.Add('1e6301900660148C'+SgDados.Cells[0, L+1]);
      Editor.Lines.Add('1911A1400280148R$ ' + SgDados.Cells[3, L+1] + '');
      Editor.Lines.Add('1912A0600040145'+Produto.referenciaInterna);
    end;

    if SgDados.Cells[0,L+2] <> '' then begin
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L+2]));
      Editor.Lines.Add('1912A0601320298DI JU SHOES');
      Editor.Lines.Add('102200001170269'+ trim(Copy(SgDados.Cells[1, L+2], 1,18)) + '');
      Editor.Lines.Add('102200001050269'+ trim(Copy(SgDados.Cells[1, L+2], 19,18)) + '');
      Editor.Lines.Add('102200000940269'+ trim(Copy(SgDados.Cells[1, L+2], 37,3)) + '');
      Editor.Lines.Add('121100000570313'+SgDados.Cells[0, L+2]);
      Editor.Lines.Add('1e6301900660279C'+SgDados.Cells[0, L+2]);
      Editor.Lines.Add('1911A1400280279R$ ' + SgDados.Cells[3, L+2] + '');
      Editor.Lines.Add('1912A0600040276'+Produto.referenciaInterna);
    end;
    Editor.Lines.Add('Q0001');
    Editor.Lines.Add('E');
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
    L := L + 3;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
  begin
    ShowMessage('Não foi encontrado o arquivo Print.bat');
    exit;
  end;
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  if Produto <> nil then
    FreeAndNil(Produto);
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.EdtUsuarioChange(Sender: TObject);
begin
  limparDadosDoUsuario;
end;

procedure TFrmPrincipalPreVenda.EdtUsuarioExit(Sender: TObject);
var
  vSenha: String[06];
  i, j, x: Integer;
begin
  // if (Length(edtusuario.Text) > 0) then
  // begin
  // if (cbxUsuario.Text = '')or(cbxUsuario.ItemIndex < 0) then
  // begin
  // Application.OnMessage := FormPrincipal.NaoProcessaMsg;
  // MessageDlg ('Selecione um usuário da lista!',mtWarning,[mbOk],0);
  // cbxUsuario.setfocus;
  // Application.OnMessage := FormPrincipal.ProcessaMsg;
  // Exit;
  // end
  // else
  // if edtUsuario.Text = '' then begin
  // Application.OnMessage := FormPrincipal.NaoProcessaMsg;
  // MessageDlg ('Digite a senha!',mtWarning,[mbOk],0);
  // edtUsuario.setfocus;
  // Application.OnMessage := FormPrincipal.ProcessaMsg;
  // Exit;
  // end
  // else
  // begin
  for i := 1 to 900 do
    for j := 1 to 7 do
      vVetor[i, j] := '';
  if EdtUsuario.Text <> '' then
  begin
    i := 1; // índice do vetor
    vSenha := Senha(EdtUsuario.Text, 'C');
    with DModulo.ADOQuery1 do
    begin
      sql.Text :=
        'Select UPPER(F.nmFuncionario) AS nmPessoa, S.cdPessoa, F.vlDesconto ' +
        'FROM senha S WITH (NOLOCK) ' +
        '   INNER JOIN Funcionario F WITH (NOLOCK) ' +
        '       on S.cdPessoa = F.cdpessoa ' +
        'WHERE S.dsnome = :DSNOME and S.dsSenha = :SENHA ';
      Parameters.ParamByName('DSNOME').Value := cbxUsuario.Text;
      Parameters.ParamByName('SENHA').Value := vSenha;
      open;
      if RecordCount = 0 then
      begin
        Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
        MessageDlg('Senha inválida. Tente novamente!' + ' ', mtWarning,
          [mbOK], 0);

        limparDadosDoUsuario;
        ADOQryNome.Close;

        EdtUsuario.SelectAll;
        EdtUsuario.Setfocus;
        Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
        exit;
      end
      else
      begin
        // if prevenda.vendedor = nil then
        // prevenda.vendedor:= TFuncionario.Create();
        // if RgOpcoes.ItemIndex <> 1 then begin
        // prevenda.vendedor.codigo:= Dmodulo.ADOQuery1.fieldbyname('cdPessoa').AsInteger;
        // prevenda.vendedor.nome:= Dmodulo.ADOQuery1.FieldByName('nmPessoa').AsString;
        EdtCdNome.Text := DModulo.ADOQuery1.FieldByName('cdPessoa').AsString;
        CbxNome.Text := DModulo.ADOQuery1.FieldByName('nmPessoa').AsString;
        vcdVendedor := DModulo.ADOQuery1.FieldByName('cdPessoa').AsString;
        vnmVendedor := DModulo.ADOQuery1.FieldByName('nmPessoa').AsString;
        if frmConferencia <> nil then
        begin
          frmConferencia.edtcdFuncionario.Text := vcdVendedor;
          frmConferencia.edtcdFuncionarioExit(self);
        end;
        // end
        // else begin
        // prevenda.vendedor.codigo:= StrToInt(EdtCdNome.Text);
        // prevenda.vendedor.nome:= CbxNome.Text;
        // end;
        vlDescontoVendedor := DModulo.ADOQuery1.FieldByName
          ('vlDesconto').AsFloat;
      end;
    end;
    with ADOQuery1 do
    begin
      sql.Text := 'Select * From Permissao WITH (NOLOCK) ' +
        'Where  dsnome = :DSNOME and dsSenha = :dssenha ';
      Parameters.ParamByName('DSNOME').Value := cbxUsuario.Text;
      Parameters.ParamByName('dsSenha').Value := vSenha;
      open;
      // Monta Vetor
      while not Eof do
      begin
        vVetor[i, 1] := ADOQuery1.FieldByName('nrTag').AsString;
        vVetor[i, 2] := ADOQuery1.FieldByName('dsIncluir').AsString;
        vVetor[i, 3] := ADOQuery1.FieldByName('dsAlterar').AsString;
        vVetor[i, 4] := ADOQuery1.FieldByName('dsExcluir').AsString;
        vVetor[i, 5] := ADOQuery1.FieldByName('dsVisualizar').AsString;
        vVetor[i, 6] := ADOQuery1.FieldByName('dsImprimir').AsString;
        vVetor[i, 7] := ADOQuery1.FieldByName('dsBaixa').AsString;
        i := i + 1;
        ADOQuery1.Next;
      end; // while
      x := 1;
    end; // with
  end;
  // end;
  // end
  // else
  // limparDadosDoUsuario;
  if not((StrToFloatDef(EdtQtd.Text, 0) > 0) and (UpperCase(vEmpresa) = 'TREVO'))
  then
  begin
    if (RgOpcoes.ItemIndex in [0, 2, 4]) or
      ((transformarOrcamentoPrevenda = True) and (RgOpcoes.ItemIndex = 1)) then
      CbxCliente.Setfocus
    else
    begin
      // if RgOpcoes.ItemIndex = 1 then begin
      // edtLancto.Enabled := true;
      // edtLancto.Clear;
      // end;
      EdtLancto.Setfocus;
    end;
  end
  else
  begin
    if EdtDescUnit.Enabled = True then
      EdtDescUnit.Setfocus
    else if EdtPreco.Enabled = True then
      EdtPreco.Setfocus;
  end;
end;

procedure TFrmPrincipalPreVenda.limparDadosDoUsuario;
begin
  if RgOpcoes.ItemIndex <> 1 then
  begin
    CbxNome.ItemIndex := -1;
    CbxNome.Text := '';
    EdtCdNome.Text := '';
  end;
end;

procedure TFrmPrincipalPreVenda.EdtUsuarioKeyPress(Sender: TObject;
  var Key: Char);
begin
  // ValidarNumero(Key);
  if (Key = Char(27)) then
    BtnCancelar.Click;
end;

function TFrmPrincipalPreVenda.Empresas_UmaEtiqueta_porColuna: Boolean;
begin
  if (UpperCase(vFlagEtiqueta) = 'NOVOGARDEN') or (UpperCase(vFlagEtiqueta) = 'CONSTRUFORT') or (UpperCase(vFlagEtiqueta) = 'JAKIDS')
   or (UpperCase(vFlagEtiqueta) = 'TOKADASGRIFES') or (UpperCase(vFlagEtiqueta) = 'CARDOSO') then
    Result := True
  else
    Result := False;
end;

procedure TFrmPrincipalPreVenda.SgDadosClick(Sender: TObject);
var
  Produto: TDOMProduto;
begin
  if chkbxEtiqueta.Checked = true then exit;

  if (SgDados.Row > SgDados.RowCount - 1) or (SgDados.Row = 0) then
  begin
    // SgDados.Row:= SgDados.RowCount -2;
    exit;
  end;
  Produto := TNEGProduto.buscarProduto
    (StrToIntDef(SgDados.Cells[0, SgDados.Row], -1));
  if (vDestacarItensOcupados) and
    ((RgOpcoes.ItemIndex = 0) or ((transformarOrcamentoPrevenda = True) and
    (RgOpcoes.ItemIndex = 1))) then
  begin
    if (SgDados.Cells[0, SgDados.Row] <> '') and (vEstqNegativo <> 'S') and
      (((qtdInsuficienteParaPrevend(StrToInt(SgDados.Cells[0, SgDados.Row]),
      StrToFloatDef(SgDados.Cells[2, SgDados.Row], 0)) > 0) and
      (Produto.tipoComposicao <> composto)) or
      ((Produto.tipoComposicao = composto) and
      (TNEGProduto.getEstoquePossivelProdutoComposto(Produto.cdProduto,
      1) <= 0))) then
    begin
      exibirExclamacao;
      // if (UpperCase(vEmpresa) <> 'DISCABOS') and (UpperCase(vEmpresa) <> 'SANTANA') then   // LIBERA P ALTERAR A QUANTIDADE NO PRODUTO DIRETO NA GRID
      // btnMensagemClick(self);
    end
    else
      ocultarExclamacao;
  end;
  if SgDados.Col >= 3 then
    EdtConsulta.Setfocus;
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasDisCabos;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0475');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H09');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('1F2201500180011' + SgDados.Cells[6, L] + '');
    Editor.Lines.Add('121100000540010' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '');
    Editor.Lines.Add('111100000070009' + SgDados.Cells[0, L] + '');
    Editor.Lines.Add('121100000440010' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '');
    Editor.Lines.Add('411100000230008DISCABOS');
    Editor.Lines.Add('121100000550150' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '');
    Editor.Lines.Add('111100000080149' + SgDados.Cells[0, L] + '');
    Editor.Lines.Add('121100000450150' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '');
    Editor.Lines.Add('411100000220145DISCABOS');
    Editor.Lines.Add('121100000550293' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '');
    Editor.Lines.Add('111100000070292' + SgDados.Cells[0, L] + '');
    Editor.Lines.Add('121100000450293' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '');
    Editor.Lines.Add('411100000210288DISCABOS');
    Editor.Lines.Add('1F2201500170150' + SgDados.Cells[6, L] + '');
    Editor.Lines.Add('1F2201500170294' + SgDados.Cells[6, L] + '');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('^' + FormatFloat('00', vqtd));
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print.bat')), sw_ShowNormal);
  if not FileExists('Print.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaLayeVictor;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q338,24');
    Editor.Lines.Add('q834');
    Editor.Lines.Add('');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');


    //Editor.Lines.Add('D9');
    //Editor.Lines.Add('S2');

    // Editor.Lines.Add('B36,40,0,2,3,6,37,B,"'+SgDados.Cells[0,L]+'"');
    // Editor.Lines.Add('B320,36,0,2,3,6,37,B,"'+SgDados.Cells[0,L]+'"');  // Cod. Produto
    // Editor.Lines.Add('B594,38,0,2,3,6,37,B,"'+SgDados.Cells[0,L]+'"');
    Editor.Lines.Add('A14,34,0,1,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '"');
    Editor.Lines.Add('A228,32,1,1,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '"');
    Editor.Lines.Add('A16,124,0,1,2,3,N,"' + 'R$ ' + SgDados.Cells[3, L] + '"');
    Editor.Lines.Add('B8,52,0,E30,2,4,55,B,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('A296,34,0,1,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '"');
    Editor.Lines.Add('A512,34,1,1,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '"');
    Editor.Lines.Add('A298,126,0,1,2,3,N,"' + 'R$ ' + SgDados.Cells[3, L] +
      '"');
    Editor.Lines.Add('B292,52,0,E30,2,4,55,B,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('A578,34,0,1,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '"');
    Editor.Lines.Add('A796,34,1,1,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '"');
    Editor.Lines.Add('A580,124,0,1,2,3,N,"' + 'R$ ' + SgDados.Cells[3,
      L] + '"');
    Editor.Lines.Add('B576,50,0,E30,2,4,55,B,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('');

    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaLayeLuc;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q848');
    Editor.Lines.Add('JY0000Kf00D15');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('B6,49,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A8,11,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '"');
    Editor.Lines.Add('A8,32,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '"');
    Editor.Lines.Add('A47,131,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A17,150,0,3,1,1,N,"R$ ' + SgDados.Cells[3, L] + '"');
    Editor.Lines.Add('B294,49,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A296,11,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '"');
    Editor.Lines.Add('A296,32,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '"');
    Editor.Lines.Add('A335,131,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A305,150,0,3,1,1,N,"R$ ' + SgDados.Cells[3, L] + '"');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('B581,49,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A583,11,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '"');
    Editor.Lines.Add('A583,32,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '"');
    Editor.Lines.Add('A622,131,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A592,150,0,3,1,1,N,"R$ ' + SgDados.Cells[3, L] + '"');
    Editor.Lines.Add('Q184,24');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('P1,' + FloatToStr(vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaLordKids;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  numeroNota : string;
  ref_interna : string;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  numeroNota := InputBox('Nota Fiscal','Insira a referência da nota fiscal','');
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    ref_interna := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L])).referenciaInterna; // codigo
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('JY0000Kf00');
    Editor.Lines.Add('D15');
    Editor.Lines.Add('S2');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('A15,13,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,19)) + '"');
    Editor.Lines.Add('A15,55,0,2,1,1,N,"'+numeroNota+'"');
    Editor.Lines.Add('B15,76,0,1,2,4,80,N,"' + ref_interna + '"');
    Editor.Lines.Add('A49,159,0,2,1,1,N,"' + ref_interna + '"');
    Editor.Lines.Add('A15,186,0,4,1,1,N,"' + ref_interna + '"');
    Editor.Lines.Add('A15,252,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,19)) + '"');
    Editor.Lines.Add('A15,290,0,2,1,1,N,"'+numeroNota+'"');
    Editor.Lines.Add('A15,313,0,4,1,1,N,"' + ref_interna + '"');
    Editor.Lines.Add('A135,343,0,2,1,1,N,"R$ ' + SgDados.Cells[3, L] + '"');
    Editor.Lines.Add('A15,32,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,20)) + '"');
    Editor.Lines.Add('A15,271,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,20)) + '"');
    Editor.Lines.Add('A295,13,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,19)) + '"');
    Editor.Lines.Add('A295,55,0,2,1,1,N,"'+numeroNota+'"');
    Editor.Lines.Add('B295,76,0,1,2,4,80,N,"' + ref_interna + '"');
    Editor.Lines.Add('A329,159,0,2,1,1,N,"' + ref_interna + '"');
    Editor.Lines.Add('A295,186,0,4,1,1,N,"' + ref_interna + '"');
    Editor.Lines.Add('A295,252,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,19)) + '"');
    Editor.Lines.Add('A295,290,0,2,1,1,N,"'+numeroNota+'"');
    Editor.Lines.Add('A295,313,0,4,1,1,N,"' + ref_interna + '"');
    Editor.Lines.Add('A415,343,0,2,1,1,N,"R$ ' + SgDados.Cells[3, L] + '"');
    Editor.Lines.Add('A295,32,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,20)) + '"');
    Editor.Lines.Add('A295,271,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,20)) + '"');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A574,13,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,19)) + '"');
    Editor.Lines.Add('A574,55,0,2,1,1,N,"'+numeroNota+'"');
    Editor.Lines.Add('B574,76,0,1,2,4,80,N,"' + ref_interna + '"');
    Editor.Lines.Add('A608,159,0,2,1,1,N,"' + ref_interna + '"');
    Editor.Lines.Add('A574,186,0,4,1,1,N,"' + ref_interna + '"');
    Editor.Lines.Add('A574,252,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,19)) + '"');
    Editor.Lines.Add('A574,290,0,2,1,1,N,"'+numeroNota+'"');
    Editor.Lines.Add('A574,313,0,4,1,1,N,"' + ref_interna + '"');
    Editor.Lines.Add('A694,343,0,2,1,1,N,"R$ ' + SgDados.Cells[3, L] + '"');
    Editor.Lines.Add('A574,32,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,20)) + '"');
    Editor.Lines.Add('A574,271,0,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,20)) + '"');
    Editor.Lines.Add('Q400,16');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('P1,' + FloatToStr(vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

function TFrmPrincipalPreVenda.MessageDlgDef(const Msg, MyCaption: string;
  AType: TMsgDlgType; AButtons: TMsgDlgButtons; DefButton: TModalResult;
  HelpCtx: Longint): Word;
var
  i: Integer;
begin
  with CreateMessageDialog(Msg, AType, AButtons) do
  begin
    try
      caption := MyCaption;
      HelpContext := HelpCtx;
      for i := 0 to ComponentCount - 1 do
      begin
        if (Components[i] is TButton) and
          (TButton(Components[i]).ModalResult = DefButton) then
          ActiveControl := TButton(Components[i]);
        if Components[i] is TButton then
        begin
          with TButton(Components[i]) do
          begin
            case ModalResult of
              mrYes:
                caption := 'Imprima';
              mrNo:
                caption := 'Não imprima';
              mrOK:
                caption := 'Pequena';
              mrCancel:
                caption := 'Grande';
              mrAbort:
                caption := 'Abortada';
              mrRetry:
                caption := 'Tente Novamente';
              mrIgnore:
                caption := 'Nada';
            end;
          end;
        end;
      end;
      result := ShowModal;
    finally
      Free;
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.MiCadastroAmbientesClick(Sender: TObject);
begin
  FrmCdAmbiente := TFrmCdAmbiente.Create(Application);
  FrmCdAmbiente.ShowModal;
  MontaComboAmbiente;
end;

procedure TFrmPrincipalPreVenda.consultarUltimasVendasDoProdutoAoCliente;
var
  Produto: TDOMProduto;
  codigoCliente: Integer;
  Cliente: TCliente;
begin

  // crio e preencho a lista de produtos q será passada para o form
  if (ADOSPConsulta.Active) and (ADOSPConsulta.RecordCount > 0) then
    Produto := TDOMProduto.Create(ADOSPConsulta.FieldByName('CÓDIGO').AsInteger,
      ADOSPConsulta.FieldByName('DESCRIÇÃO').AsString)
  else
  begin
    MessageDlg('Selecione um produto.', mtInformation, [mbOK], 0);
    exit;
  end;
  if TryStrToInt(copy_campo(CbxCliente.Text, '|', 2), codigoCliente) then
  begin
    Cliente := TCliente.Create;
    Cliente.codigo := codigoCliente;
    Cliente.nome := copy_campo(CbxCliente.Text, '|', 1);
  end
  else
  begin
    FreeAndNil(Produto);
    MessageDlg('Selecione um cliente.', mtInformation, [mbOK], 0);
    CbxCliente.Setfocus;
    exit;
  end;
  frmUltimasVendasDoProdutoAoCliente :=
    TfrmUltimasVendasDoProdutoAoCliente.Create(self, Produto, Cliente);
  frmUltimasVendasDoProdutoAoCliente.ShowModal;
  EdtConsulta.Setfocus;
end;

procedure TFrmPrincipalPreVenda.consultarProdutosVendidosJunto;
var
  produtos: TList<TDOMProduto>;
  produtoResultado: TDOMProduto;
  i, codigoProduto: Integer;
  descricaoProduto: string;
  Cliente: TCliente;
begin

  // crio e preencho a lista de produtos q será passada para o form
  produtos := TList<TDOMProduto>.Create;
  for i := 1 to (SgDados.RowCount - 1) do
    if TryStrToInt(SgDados.Cells[0, i], codigoProduto) then
    begin
      descricaoProduto := SgDados.Cells[1, i];
      produtos.Add(TDOMProduto.Create(codigoProduto, descricaoProduto));
    end
    else
      Break;
  if (produtos.Count > 0) then
  begin
    Cliente := TCliente.Create;
    Cliente.isAtacado := (vAtacadoVarejo = 'A');
    Cliente.descontoPercentual :=
      (1 - TNEGCliente.getPercentualDoPrecoComDescontoDecimal
      (StrToIntDef(EdtCdCliente.Text, 0))) * 100;
    formComprouJunto := TformComprouJunto.Create(self, produtos, Cliente,
      produtoResultado);
    formComprouJunto.ShowModal;
    if (produtoResultado <> nil) then
    begin
      case RadioGroup1.ItemIndex of
        0:
          EdtConsulta.Text := intToStr(produtoResultado.cdProduto);
        1:
          EdtConsulta.Text := produtoResultado.descricao;
      else
        RadioGroup1.ItemIndex := 0;
        EdtConsulta.Text := intToStr(produtoResultado.cdProduto);
      end;
      EdtConsultaChange(self);
      EdtConsulta.Setfocus;
    end;
  end
  else
  begin
    FreeAndNil(produtos);
    ShowMessage('Não existem produtos nesta prevenda.');
  end;
end;

procedure TFrmPrincipalPreVenda.Consultarprvendas1Click(Sender: TObject);
begin
  if FrmPrincipalPreVenda.vcdVendedor = '' then
  begin
    ShowMessage
      ('Necessário efetuar o login na prevenda para visualizar essa opção.');
    exit;
  end;
  Consulta_prevenca := TConsulta_prevenca.Create(Application);
  try
    FrmPrincipalPreVenda.Enabled := false;
    Consulta_prevenca.Show;
  except
    Consulta_prevenca.Free;
    FrmPrincipalPreVenda.Enabled := True;
  end;
end;

procedure TFrmPrincipalPreVenda.miProdutosVendidosJuntoClick(Sender: TObject);
begin
  consultarProdutosVendidosJunto;
end;

procedure TFrmPrincipalPreVenda.miÚltimasVendasDoProdutoAoClienteClick
  (Sender: TObject);
begin
  consultarUltimasVendasDoProdutoAoCliente;
end;

procedure TFrmPrincipalPreVenda.MontaComboAmbiente;
begin
  MontaComboListADO(AdoAmbiente, CbxAmbiente);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaGrandeDuploRural;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q696');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('A33,8,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A33,27,0,3,1,1,N,"' + 'Cod: ' + SgDados.Cells[0, L] +
      '"'); // descricao

    if SgDados.Cells[6, L] <> '' then
    begin
      Editor.Lines.Add('A84,159,0,3,1,1,N,"' + SgDados.Cells[6, L] + '"');
      // barra
      Editor.Lines.Add('B52,59,0,1,2,4,86,N,"' + SgDados.Cells[6, L] + '"');
      // barra
    end
    else
    begin
      Editor.Lines.Add('A84,159,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
      // barra
      Editor.Lines.Add('B52,59,0,1,2,4,86,N,"' +
        Formatar13Digitos(SgDados.Cells[0, L]) + '"'); // barra
    end;
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A369,8,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A369,27,0,3,1,1,N,"' + 'Cod: ' + SgDados.Cells[0, L] +
      '"'); // descricao
    if SgDados.Cells[6, L] <> '' then
    begin
      Editor.Lines.Add('A420,159,0,3,1,1,N,"' + SgDados.Cells[6, L] + '"');
      // barra
      Editor.Lines.Add('B388,59,0,1,2,4,86,N,"' + SgDados.Cells[6, L] + '"');
      // barra
    end
    else
    begin
      Editor.Lines.Add('A420,159,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
      // barra
      Editor.Lines.Add('B388,59,0,1,2,4,86,N,"' +
        Formatar13Digitos(SgDados.Cells[0, L]) + '"'); // barra
    end;

    Editor.Lines.Add('Q216,24');

    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;

  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaGrandeLayeVictor;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q460,24');
    Editor.Lines.Add('q1142');
    Editor.Lines.Add('');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    //Editor.Lines.Add('S2');

    Editor.Lines.Add('A204,362,2,2,1,1,N,"' + nmEmpresa + '"');
    Editor.Lines.Add('A262,320,2,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1, 19)) + '"');
    Editor.Lines.Add('A262,302,2,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20, 20)) + '"');
    Editor.Lines.Add('B240,224,2,E30,2,4,43,B,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('B238,116,2,E30,2,4,55,B,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A264,342,2,2,1,1,N,"' + 'Ref: ' + SgDados.Cells[7, L] + '"');
    Editor.Lines.Add('A262,282,2,3,2,2,N,"' + 'R$' + SgDados.Cells[3, L] + '"');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('A486,356,2,2,1,1,N,"' + nmEmpresa + '"');
    Editor.Lines.Add('A544,314,2,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1, 19)) + '"');
    Editor.Lines.Add('A544,296,2,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20, 20)) + '"');
    Editor.Lines.Add('B514,218,2,E30,2,4,43,B,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('B512,110,2,E30,2,4,55,B,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A546,336,2,2,1,1,N,"' + 'Ref: ' + SgDados.Cells[7, L] + '"');
    Editor.Lines.Add('A544,276,2,3,2,2,N,"' + 'R$' + SgDados.Cells[3, L] + '"');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('A770,356,2,2,1,1,N,"' + nmEmpresa + '"');
    Editor.Lines.Add('A818,314,2,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1, 19)) + '"');
    Editor.Lines.Add('A818,296,2,2,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20, 20)) + '"');
    Editor.Lines.Add('B796,218,2,E30,2,4,43,B,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('B794,110,2,E30,2,4,55,B,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A820,336,2,2,1,1,N,"' + 'Ref: ' + SgDados.Cells[7, L] + '"');
    Editor.Lines.Add('A818,276,2,3,2,2,N,"' + 'R$' + SgDados.Cells[3, L] + '"');
    Editor.Lines.Add('');

    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaGrandeTriploRural;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q856');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('A30,21,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A30,42,0,2,1,1,N,"' + 'Cod: ' + SgDados.Cells[0, L] +
      '"'); // descricao

    if SgDados.Cells[6, L] <> '' then
    begin
      Editor.Lines.Add('A66,152,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
      // barra
      Editor.Lines.Add('B45,68,0,3,1,2,80,N,"' + SgDados.Cells[6, L] + '"');
      // barra
    end
    else
    begin
      Editor.Lines.Add('A66,152,0,2,1,1,N,"' + SgDados.Cells[0, L] + '"');
      // barra
      Editor.Lines.Add('B45,68,0,3,1,2,80,N,"' +
        Formatar13Digitos(SgDados.Cells[0, L]) + '"'); // barra
    end;
    Editor.Lines.Add('A310,21,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A310,42,0,2,1,1,N,"' + 'Cod: ' + SgDados.Cells[0, L] +
      '"'); // descricao
    if SgDados.Cells[6, L] <> '' then
    begin
      Editor.Lines.Add('A346,152,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
      // barra
      Editor.Lines.Add('B325,68,0,3,1,2,80,N,"' + SgDados.Cells[6, L] + '"');
      // barra
    end
    else
    begin
      Editor.Lines.Add('A346,152,0,2,1,1,N,"' + SgDados.Cells[0, L] + '"');
      // barra
      Editor.Lines.Add('B325,68,0,3,1,2,80,N,"' +
        Formatar13Digitos(SgDados.Cells[0, L]) + '"'); // barra
    end;
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A589,21,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A589,42,0,2,1,1,N,"' + 'Cod: ' + SgDados.Cells[0, L] +
      '"'); // descricao
    if SgDados.Cells[6, L] <> '' then
    begin
      Editor.Lines.Add('A625,152,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
      // barra
      Editor.Lines.Add('B604,68,0,3,1,2,80,N,"' + SgDados.Cells[6, L] + '"');
      // barra
    end
    else
    begin
      Editor.Lines.Add('A625,152,0,2,1,1,N,"' + SgDados.Cells[0, L] + '"');
      // barra
      Editor.Lines.Add('B604,68,0,3,1,2,80,N,"' +
        Formatar13Digitos(SgDados.Cells[0, L]) + '"'); // barra
    end;
    Editor.Lines.Add('Q192,24');

    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;

  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);

end;

procedure TFrmPrincipalPreVenda.montaComboLote;
var
  query: TADOQuery;
  cdProduto, banco_deposito: string;
begin
  CbLote.Clear;
  cdProduto := ADOSPConsulta.FieldByName('Código').AsString;
  if Length(cdProduto) = 0 then
    exit;
  query := TADOQuery.Create(self);
  with query do
  begin
    Connection := DModulo.Conexao;
    sql.Text :=
      'SELECT DSOCULTARLOTE FROM PRODUTO WITH (NOLOCK) WHERE CDPRODUTO = :CDPRODUTO';
    Parameters.ParamByName('CDPRODUTO').Value := cdProduto;
    open;
    if FieldByName('dsOcultarLote').AsString = '1' then
    begin
      FreeAndNil(query);
      exit;
    end;
    Close;
    // if (UpperCase(vEmpresa) = 'PBFARMA') then
    // begin
    // Connection := DModulo.ADODeposito;
    // SQL.Text := 'SELECT DB_NAME() AS DataBaseName';
    // Open;
    // banco_deposito := '[' + fieldbyname('DataBaseName').asString + ']' + '.dbo.';
    // Connection := DModulo.Conexao;
    // SQL.Text := 'select LOTES.lote lote, LOTES.validade strValidade, sum(LOTES.nrqtd) nrqtd, LOTES.cdFabricante, LOTES.validade '+
    // 'from (select 	NRLOTE lote,                                                                 '+
    // '	CONVERT(VARCHAR(10),VALIDADE,103) strvalidade,                                             '+
    // '	nrqtd, cdFabricante,                                                                                    '+
    // '	validade                                                                                   '+
    // 'FROM ITELOTE where cdproduto = :CODIGO1 and nrqtd > 0                                       '+
    // 'union all                                                                                   '+
    // 'select 	NRLOTE lote,                                                                       '+
    // '	CONVERT(VARCHAR(10),                                                                       '+
    // '	VALIDADE,103) strvalidade,                                                                 '+
    // '	nrqtd, cdFabricante,                                                                                    '+
    // '	validade                                                                                   '+
    // 'FROM '+ banco_deposito +'ITELOTE where cdproduto = :CODIGO2 and nrqtd > 0) as LOTES         '+
    // 'group by LOTES.lote, LOTES.validade, LOTES.cdFabricante                                                         '+
    // 'order by validade                                                                           ';
    // Parameters.ParamByName('CODIGO1').Value:= cdproduto;
    // Parameters.ParamByName('CODIGO2').Value:= cdproduto;
    // end
    // else
    begin
      Connection := DModulo.Conexao;
      sql.Text := 'Select NRLOTE lote,                    ' +
        '	CONVERT(VARCHAR(10),VALIDADE,103) validade,     ' +
        '	CONVERT(VARCHAR(10),SUM(isnull(NRQTD,0))) nrqtd,' +
        '	cdFabricante fabricante,                        ' +
        '	validade                                        ' +
        'FROM ITELOTE WITH (NOLOCK)                       ' +
        'where (cdproduto=:CODIGO)                        ' +
        'group by ITELOTE.nrLote, ITELOTE.validade,       ' +
        'ITELOTE.cdFabricante, ITELOTE.validade           ' +
        'having (SUM(nrqtd) > 0)                          ' +
        'order by 5                                       ';
      Parameters.ParamByName('CODIGO').Value := cdProduto;
    end;
    MontaComboListComposto(query, CbLote, 4);
    CbLote.Enabled := True;
    CbLote.ItemIndex := -1;
    CbLote.Text := '';
  end;
  FreeAndNil(query);
  setLabel23(QuantidadeDispEmLotes(StrToIntDef(cdProduto, -1)));
end;

function TFrmPrincipalPreVenda.QuantidadeDispEmLotes(cdProduto: Integer): Real;
var
  query: TADOQuery;
  banco_deposito: string;
  resultado: Real;
  i: Integer;
begin
  resultado := 0;
  query := TADOQuery.Create(self);
  with query do
  begin
    // if (UpperCase(vEmpresa) = 'PBFARMA') then
    // begin
    // Connection := DModulo.ADODeposito;
    // SQL.Text := 'SELECT DB_NAME() AS DataBaseName';
    // Open;
    // banco_deposito := '[' + fieldbyname('DataBaseName').asString + ']';
    // Connection := DModulo.Conexao;
    // SQL.Text := 'select 	NRLOTE lote, cdFabricante cdFabricanteLote   '+
    // 'FROM ITELOTE where (cdproduto = :CODIGO1) and (nrqtd > 0) '+
    // 'union                                                 '+
    // 'select 	NRLOTE lote, cdFabricante cdFabricanteLote '+
    // 'FROM '+ banco_deposito +'.dbo.ITELOTE                 '+
    // 'where (cdproduto = :CODIGO2) and (nrqtd > 0)          ';
    // Parameters.ParamByName('CODIGO1').Value:= cdproduto;
    // Parameters.ParamByName('CODIGO2').Value:= cdproduto;
    // end
    // else
    begin
      Connection := DModulo.Conexao;
      sql.Text :=
        'select distinct NRLOTE lote, cdFabricante cdFabricanteLote       ' +
        'FROM ITELOTE WITH (NOLOCK) where (cdproduto =:CODIGO) and (nrqtd > 0) ';
      Parameters.ParamByName('CODIGO').Value := cdProduto;
    end;
    open;
    for i := 0 to (RecordCount - 1) do
    begin
      resultado := resultado + QuantidadeDispNoLote
        (FieldByName('lote').AsString, cdProduto,
        FieldByName('cdFabricanteLote').AsInteger);
      Next;
    end;
  end;
  FreeAndNil(query);
  result := resultado;
end;

procedure TFrmPrincipalPreVenda.Monta_Combo;
begin
  With ADOQryCliente do
  begin // monta a combo dos clientes
    { Sql.Text := 'SELECT P.nmPessoa,P.cdPessoa,E.nmLogradouro,E.dsUF,T.dsNaturalidade as Apelido,C.dsPreVenda,       '+
      'C.vlDescVista,C.vlDescPrazo,C.dsVista,C.DSLIMCREDITO        '+
      'FROM P_Fisica T WITH (NOLOCK) INNER JOIN Endereco E WITH (NOLOCK) ON T.cdPessoa = E.cdPessoa INNER '+
      'JOIN Pessoa P WITH (NOLOCK) ON T.cdPessoa = P.cdPessoa INNER JOIN Cliente C WITH (NOLOCK)           '+
      'ON C.cdPessoa = P.cdPessoa AND E.cdPessoa = P.cdPessoa Where P.ser = ''C'' and P.dsAtivo = ''S''    ';
      if ((UpperCase(vEmpresa) = 'CAMARATUBA')or(UpperCase(vEmpresa) = 'CARDOSOACESSORIOS')) then
      SQL.Add('and C.cdCodigo <> 2 ');
      SQL.Add('union ');
      SQL.Add('SELECT P.nmPessoa,P.cdPessoa,E.nmLogradouro,E.dsUF,T.nmContato as Apelido,C.dsPreVenda,          ');
      SQL.Add('C.vlDescVista,C.vlDescPrazo,C.dsVista,C.DSLIMCREDITO ');
      SQL.Add('FROM P_Juridica T WITH (NOLOCK) INNER JOIN Endereco E WITH (NOLOCK) ON T.cdPessoa = E.cdPessoa   ');
      SQL.Add('INNER JOIN Pessoa P WITH (NOLOCK) ON T.cdPessoa = P.cdPessoa INNER JOIN Cliente C WITH (NOLOCK)  ');
      SQL.Add('ON C.cdPessoa = P.cdPessoa AND E.cdPessoa = P.cdPessoa Where P.ser = ''C'' and P.dsAtivo = ''S'' ');
      if (UpperCase(vEmpresa) = 'CAMARATUBA')or(UpperCase(vEmpresa) = 'CARDOSOACESSORIOS') then
      SQL.Add('and C.cdCodigo <> 2 ');
      SQL.Add('Order By P.nmPessoa '); }
    sql.Text :=
    'SELECT P.nmPessoa,P.cdPessoa,E.nmLogradouro,E.dsUF,C.dsPreVenda,  ' +
    'C.vlDescVista,C.vlDescPrazo,C.dsVista,C.DSLIMCREDITO,             ' +
    'case P.Existir                                                    ' +
    '  when ''F'' then PF.dsNaturalidade                               ' +
    '  when ''J'' then PJ.nmContato                                    ' +
    'end as Apelido,C.cdTabelaPreco                                    ' +
    'FROM Pessoa P WITH (NOLOCK) Inner Join Endereco E WITH (NOLOCK) ON P.cdPessoa = E.cdPessoa '
    + 'INNER JOIN Cliente C WITH (NOLOCK)                                ' +
    'ON P.cdPessoa = C.cdPessoa                                        ' +
    'Left Join P_Fisica PF WITH (NOLOCK) ON P.cdpessoa = PF.cdPessoa   ' +
    'Left Join P_Juridica PJ WITH (NOLOCK) ON P.cdpessoa = PJ.cdPessoa ' +
    'Where P.ser = ''C'' and P.dsAtivo = ''S'' ';
    if (UpperCase(vEmpresa) = 'CAMARATUBA') or (UpperCase(vEmpresa) = 'CARDOSOACESSORIOS') then
      sql.Add('and C.cdCodigo <> 2 ');
    sql.Add('Order By P.nmPessoa ');
    MontaComboListComposto(ADOQryCliente, CbxCliente, 2);
  end;

  // claudio 10-09-2015
  // With ADOQryNome do begin     // monta a combo dos funcionarios
  // Sql.Text := 'Select UPPER(P.nmPessoa) AS nmPessoa,P.cdPessoa,F.vlDesconto From Pessoa '+
  // 'P WITH (NOLOCK),Funcionario F WITH (NOLOCK),Cargo C WITH (NOLOCK)        '+
  // 'Where P.cdPessoa = F.cdPessoa and F.cdCargo = C.cdCargo                  '+
  // 'and P.ser = ''U'' and P.dsAtivo = ''S'' and C.nmCargo in                 '+
  // '(''Vendedor'',''BALCONISTA'',''TÉCNICO'',''CHEFE CPD'',''FARMACEUTICA'') '+
  // 'Order By P.nmPessoa                                                      ';
  // MontaComboListBoolADO(ADOQryNome,CbxNome);
  // end;
end;

function TFrmPrincipalPreVenda.PegaDatabanco: TDateTime;
begin
  PegaDatabanco := strtodate(vData_Banco);
end;

function TFrmPrincipalPreVenda.pegaHoraBanco: String;
begin
  With DModulo.ADOQuery1 do
  begin
    sql.Text := 'Select CONVERT(CHAR(8),GETDATE(),14) as hora';
    open;
    pegaHoraBanco := FieldByName('hora').AsString;
  end;
end;

procedure TFrmPrincipalPreVenda.SalvaLogEventos(dsEvento: String;
  dtEvento: TDateTime; hrEvento, dsLancamento, dsDocumento: String;
  vlvalor: Real; cdUsuario: Integer; cdOpcao: String);
begin
  With DModulo.ADOQuery1 do
  begin
    sql.Text :=
      'INSERT INTO LogEventos(dtEvento,hrEvento,dsEvento,dsLancamento,  ' +
      'dsDocumento,vlValor,cdUsuario,cdOpcao)                            ' +
      'VALUES (:dtEvento,:hrEvento,:dsEvento,:dsLancamento,:dsDocumento,' +
      ':vlValor,:cdUsuario,:cdOpcao)                                    ';
    Parameters.ParamByName('dtEvento').Value := dtEvento;
    Parameters.ParamByName('hrEvento').Value := hrEvento;
    Parameters.ParamByName('dsEvento').Value := Copy(dsEvento, 1, 50);
    Parameters.ParamByName('dsLancamento').Value := Copy(dsLancamento, 1, 12);
    Parameters.ParamByName('dsDocumento').Value := Copy(dsDocumento, 1, 12);
    Parameters.ParamByName('vlValor').Value := vlvalor;
    Parameters.ParamByName('cdUsuario').Value := cdUsuario;
    Parameters.ParamByName('cdOpcao').Value := cdOpcao;
    ExecSQL;
  end;
end;

procedure TFrmPrincipalPreVenda.CadastrodeEscola1Click(Sender: TObject);
begin
  FrmCadEscola := TFrmCadEscola.Create(Application);
  CadastrodeEscola1.Enabled := false;
  FrmCadEscola.Show;
end;

procedure TFrmPrincipalPreVenda.CadastrodeSrie1Click(Sender: TObject);
begin
  FrmCadSerieEscola := TFrmCadSerieEscola.Create(Application);
  CadastrodeSrie1.Enabled := false;
  FrmCadSerieEscola.Show;
end;

procedure TFrmPrincipalPreVenda.CadastrodeLista1Click(Sender: TObject);
begin
  // Application.CreateForm(TFrmCadLista,FrmCadLista);
  // FrmCadLista.FormStyle := fsStayOnTop;
  if trim(copy_campo(CbxCliente.Text, '|', 2)) = '' then
  begin
    Application.MessageBox
      ('Selecione um cliente antes de abrir o cadastro de lista!', 'Atenção',
      mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
    CbxCliente.Setfocus;
    exit;
  end;
  FrmCadLista := TFrmCadLista.Create(Application);
  CadastrodeLista1.Enabled := false;
  FrmCadLista.Vform := 'C';
  FrmCadLista.Show;
end;

procedure TFrmPrincipalPreVenda.ConsultarListas1Click(Sender: TObject);
begin
  FrmCadLista := TFrmCadLista.Create(Application);
  FrmCadLista.Show;
end;

procedure TFrmPrincipalPreVenda.ConsultarporCdigoAdicional1Click
  (Sender: TObject);
begin
  RadioGroup1.ItemIndex := 6;
end;

procedure TFrmPrincipalPreVenda.SgDadosDrawCell(Sender: TObject;
  ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
begin
  // if not (gdSelected in state) then
  // begin

  if (ARow <> 0) and (SgDados.Cells[2, ARow] <> '') and
    (SgDados.Cells[8, ARow] <> '') then
  begin
    // if (SgDados.Cells[0,SgDados.Row]<>'')and(vEstqNegativo <> 'S') and (qtdInsuficienteParaPrevend(StrToInt(SgDados.Cells[0,SgDados.Row]), strToFloatDef(SgDados.Cells[2,SgDados.Row],0)) > 0) then BEGIN
    if ArraylinhasDestacadas[ARow] then
    begin
      SgDados.Canvas.Brush.Color := clYellow;
      SgDados.Canvas.Font.Color := clBlack;
      SgDados.Canvas.FillRect(Rect);
      SgDados.Canvas.TextOut(Rect.Left, Rect.Top, SgDados.Cells[ACol, ARow]);
    end
    else
    begin
      SgDados.Canvas.Brush.Color := clWhite;
      SgDados.Canvas.Font.Color := clBlack;
      SgDados.Canvas.FillRect(Rect);
      SgDados.Canvas.TextOut(Rect.Left, Rect.Top, SgDados.Cells[ACol, ARow]);
    end;
    // END;

    // comentei para não pintar mais de vermelho quando o estoque estiver menor q a quantidade lançada
    { if (StrToFloat(SgDados.Cells[2,ARow]) > StrToFloat(SgDados.Cells[8,ARow])) then
      begin
      SgDados.Canvas.Font.Color := clRed;
      DrawText(SgDados.Canvas.Handle,PAnsichar(SgDados.Cells[ACol,ARow]), - 1, Rect, DT_VCENTER or DT_LEFT or DT_SINGLELINE);
      end
      else
      if (StrToFloat(SgDados.Cells[2,ARow]) > StrToFloat(SgDados.Cells[8,ARow])) then
      begin
      SgDados.Canvas.Font.Color := clBlack;
      DrawText(SgDados.Canvas.Handle,PAnsichar(SgDados.Cells[ACol,ARow]), - 1, Rect, DT_VCENTER or DT_LEFT or DT_SINGLELINE);
      end;
    }
  end;
  // end;
end;

procedure TFrmPrincipalPreVenda.SalvarPreVenda(prevenda: TPrevenda;
  enviar_email: Boolean = false);
var
  Msg: string;
  sucesso: Boolean;
  liberacao : TLiveracao;
  i : integer;
begin
  With ADOQrySalvar do
  begin
    try
      Try
        DModulo.Conexao.BeginTrans;
        sucesso := false;
        if RgOpcoes.ItemIndex = 1 then
        begin // Se for alteração de um orçamento
          if TNEGPrevenda.isSimplesRemessa(prevenda.numeroPrevenda) then
            prevenda.simplesRemessa := 1
          else
            prevenda.simplesRemessa := 0;
          TNEGPrevenda.excluirPrevenda(prevenda.numeroPrevenda);
        end;
        if ((UpperCase(vEmpresa) = 'COPYART') and (possuiLivro = True)) then
        begin
          nrOrcamentoDia := TNEGLoja.getMaxSequencialLivros;
          possuiLivro := false;
          prevenda.turno := turno;
          prevenda.tipoForracao := tipoForro;
          prevenda.nrOrcamentoDia := nrOrcamentoDia;
        end;
        prevenda.vendedor := TNEGFuncionario.getFuncionario
          (StrToInt(EdtCdNome.Text));
        if vcdAutorizador > 0 then
          prevenda.Autorizador := TNEGFuncionario.getFuncionario(vcdAutorizador)
        else
          prevenda.Autorizador := TNEGFuncionario.getFuncionario
            (StrToInt(EdtCdNome.Text));
        prevenda.Cliente := TNEGCliente.getCliente
          (StrToInt(copy_campo(CbxCliente.Text, '|', 2)));
        if not liberaDigitacaoLancamento then
        begin
          if (RgOpcoes.ItemIndex = 0) or (RgOpcoes.ItemIndex = 2) or
            (RgOpcoes.ItemIndex = 4) then
          // or ((RgOpcoes.ItemIndex = 3)and((UpperCase( vEmpresa ) = 'AMBIENTAR')or(UpperCase( vEmpresa ) = 'PBFARMA')))
          begin // Se for salvar um orçamento
            prevenda.numeroPrevenda :=
              StrToInt(UltimoLancamentoBloqueandoTabela(ADOQrySalvar));
            sql.Text := 'Update Sequencial Set nrPedidos = nrPedidos + 1';
            ExecSQL;
          end;
        end
        else
          prevenda.numeroPrevenda := StrToInt(EdtLancto.Text);

        // if prevenda <> nil then begin
        // prevenda.Destroy;
        // prevenda:= nil;
        // end;
        // prevenda:= TPrevenda.Create();
        prevenda.dsReferencia := edtReferencia.Text;
        prevenda.isDescontoOculto := vOcultaDesconto;
        if vOrcamento = 'O' then
          prevenda.isOrcamento := True
        else
          prevenda.isOrcamento := false;
//        if (SoNumeros(dsCGC) = '03643774000129') then // TORRONE
//          prevenda.dataEmissao := DtLancto.DateTime
//        else
        prevenda.dataEmissao := strtodate(TNEGLoja.vData_Banco);
        prevenda.conferida := false;
        // prevenda.numeroPrevenda := StrtoInt(EdtLancto.Text);
        prevenda.dataEmissao := DtLancto.Date;
        TNEGPrevenda.inserirPrevenda(prevenda, chkbxBaixarEstoque.Checked);
        if listaLiberacoes <> nil then
        begin
          for liberacao in listaLiberacoes do
          begin
            TNEGLoja.SalvaLogEventos(liberacao._descricao, IntToStr(prevenda.numeroPrevenda),
                  '', liberacao._valor , liberacao._operador, '16');
          end;
        end;
        DModulo.Conexao.CommitTrans;
        sucesso := True;
      except
        on e: Exception do
        begin
          sucesso := false;
          DModulo.Conexao.RollbackTrans;
          ShowMessage(e.Message);
        end;
      End;
    finally
      try
        DModulo.Conexao.BeginTrans;
        sql.Text := 'Update Sequencial Set nrNotaGrande = nrNotaGrande';
        ExecSQL;
        DModulo.Conexao.CommitTrans;
      except
        DModulo.Conexao.RollbackTrans;
      end;
      if sucesso then
      begin
        try
          try
            if (listaProdutosAcrescimo <> nil) and (listaProdutosAcrescimo.Count > 0) then
            begin
              try
                DModulo.Conexao.BeginTrans;
                for i := 0 to listaProdutosAcrescimo.Count -1 do
                begin
                  TNEGLoja.SalvaLogEventos('Produto com Acréscimo Pré-Venda', IntToStr(prevenda.numeroPrevenda),
                  IntToStr(listaProdutosAcrescimo.Items[i]), 0 , prevenda.vendedor.codigo, '16');
                end;
                DModulo.Conexao.CommitTrans;
                listaProdutosAcrescimo.Clear;
              except
                DModulo.Conexao.RollbackTrans;
                listaProdutosAcrescimo.Clear;
              end;
            end;
            Application.OnMessage := FormPrincipal.NaoProcessaMsg;
            // if RgOpcoes.ItemIndex = 2 then //Orcamento
            MessageDlg('Pré-Venda/Orçamento salvo com sucesso! ' + #13#10 +
              'Nº ' + FrmPrincipalPreVenda.EdtLancto.Text, mtInformation,
              [mbOK], 0);
            if (chkbxOrcamentoExterno.Checked = True) then
              ImprimeOrcamentoExterno(enviar_email)
            else if (UpperCase(vEmpresa) = 'DELUC') then
              Application.MessageBox(PWideChar('Prevenda: ' + EdtLancto.Text +
                #13#10 + 'Valor: R$ ' + EdtSubTotal.Text), 'Atenção',
                mb_Ok + MB_ICONWARNING + MB_APPLMODAL)
            else if (UpperCase(vEmpresa) = 'COPYART') then
            begin
              if nrOrcamentoDia > 0 then
                Msg := 'Pré-Venda/Orçamento salvo com sucesso! ' + #13#10 +
                  'Nº ' + FrmPrincipalPreVenda.EdtLancto.Text + #13#10 + #13#10
                  + 'Sequencial: ' + intToStr(nrOrcamentoDia)
              else
                Msg := 'Pré-Venda/Orçamento salvo com sucesso! ' + #13#10 +
                  'Nº ' + FrmPrincipalPreVenda.EdtLancto.Text;
              if FrmPrincipalPreVenda.vPergunta_Apos_Comprovante = '1' then
              begin
                if (FrmPrincipalPreVenda.vImpressao_40 = 'S') then
                begin
                  if MessageDlg('Deseja imprimir a Pré-Venda \ Orçamento de nº '
                    + FrmPrincipalPreVenda.EdtLancto.Text + '?', mtConfirmation,
                    [mbYes, mbNo], 0) = mrYes then
                    FrmPrincipalPreVenda.ImprimeComprovante
                      (StrToInt(prevenda.codigoFormaPagamento));
                  MessageDlg(Msg, mtInformation, [mbOK], 0);
                end;
                if FrmPrincipalPreVenda.vImpressao_80 = 'S' then
                begin
                  if nrOrcamentoDia > 0 then
                  begin
                    if MessageDlg('Deseja imprimir a Pré-Venda \ Orçamento de nº ' + FrmPrincipalPreVenda.EdtLancto.Text + '?' + #13#10 +
                      #13#10 + 'Sequencial: ' + intToStr(nrOrcamentoDia), mtConfirmation, [mbYes, mbNo], 0) = mrYes then
                      FrmPrincipalPreVenda.ImprimeOrcamento(StrToInt(prevenda.codigoFormaPagamento));
                  end else
                  begin
                    if MessageDlg
                      ('Deseja imprimir a Pré-Venda \ Orçamento de nº ' +
                      FrmPrincipalPreVenda.EdtLancto.Text + '?', mtConfirmation,
                      [mbYes, mbNo], 0) = mrYes then
                      FrmPrincipalPreVenda.ImprimeOrcamento
                        (StrToInt(prevenda.codigoFormaPagamento));
                  end;
                end;
              end else
              begin
                if (FrmPrincipalPreVenda.vImpressao_40 = 'S') then
                  FrmPrincipalPreVenda.ImprimeComprovante
                    (StrToInt(prevenda.codigoFormaPagamento));
                if FrmPrincipalPreVenda.vImpressao_80 = 'S' then
                begin
                  if FrmPrincipalPreVenda.vPergunta_Apos_Comprovante = '1' then
                  begin
                    if MessageDlg('Deseja imprimir a Pré-Venda \ Orçamento de nº '
                      + FrmPrincipalPreVenda.EdtLancto.Text + '?', mtConfirmation,
                      [mbYes, mbNo], 0) = mrYes then
                    FrmPrincipalPreVenda.ImprimeOrcamento(StrToInt(prevenda.codigoFormaPagamento));
                  end else
                    FrmPrincipalPreVenda.ImprimeOrcamento(StrToInt(prevenda.codigoFormaPagamento));
                end;
              end;
            end else
            begin
              if FrmPrincipalPreVenda.vPergunta_Apos_Comprovante = '1' then
              begin
                if (FrmPrincipalPreVenda.vImpressao_40 = 'S') or
                  (UpperCase(vEmpresa) = 'PROAUTO') then
                begin
                  if MessageDlg('Deseja imprimir a Pré-Venda \ Orçamento de nº '
                    + FrmPrincipalPreVenda.EdtLancto.Text + ' em 40 colunas ?',
                    mtConfirmation, [mbYes, mbNo], 0) = mrYes then
                    FrmPrincipalPreVenda.ImprimeComprovante(StrToInt(prevenda.codigoFormaPagamento));
                end;
                if FrmPrincipalPreVenda.vImpressao_80 = 'S' then
                begin
                  if MessageDlg('Deseja imprimir a Pré-Venda \ Orçamento de nº '
                      + FrmPrincipalPreVenda.EdtLancto.Text + '?', mtConfirmation,
                      [mbYes, mbNo], 0) = mrYes then
                    FrmPrincipalPreVenda.ImprimeOrcamento(StrToInt(prevenda.codigoFormaPagamento), enviar_email);
                end;
                // if FrmPrincipalPreVenda.vImpressao_80 = 'S' then begin
                // if MessageDlg('Deseja imprimir a Pré-Venda \ Orçamento de nº '+ FrmPrincipalPreVenda.EdtLancto.Text + ' em 80 colunas ?',
                // mtConfirmation,[mbYes, mbNo],0) = mrYes then
                // FrmPrincipalPreVenda.ImprimeOrcamento(StrToInt(prevenda.codigoFormaPagamento));
                // end;
              end else
              begin
                if (FrmPrincipalPreVenda.vImpressao_40 = 'S') or (UpperCase(vEmpresa) = 'PROAUTO') then
                  FrmPrincipalPreVenda.ImprimeComprovante(StrToInt(prevenda.codigoFormaPagamento));
                if FrmPrincipalPreVenda.vImpressao_80 = 'S' then
                  FrmPrincipalPreVenda.ImprimeOrcamento(StrToInt(prevenda.codigoFormaPagamento), enviar_email);
              end;
              // if RgOpcoes.ItemIndex <> 2 then // diferente de orcamento
              // MessageDlg('Pré-Venda/Orçamento salvo com sucesso! ' + #13#10 + 'Nº ' + FrmPrincipalPreVenda.EdtLancto.Text, mtInformation,[mbOk],0);
            end;
          except
            //
          end;
        finally
          Application.OnMessage := FormPrincipal.ProcessaMsg;
          Limpar_Tela;
          // RgOpcoes.ItemIndex := 0;
          vlTotalAnterior := 0;
          liberouVenda := false;
          possuiPermissaoVenderAbaixoDoCusto := False;
          if vAutoLogoff then
            FrmPrincipalPreVenda.Solicitar_Login;
        end;
      end;
      EdtDesconto.ReadOnly := True;
      EdtSubTotal.ReadOnly := True;
      BtnAprazo.Enabled := True;
      BtnConfirmar.Enabled := True;
      Alteraquantidade1.Enabled := True;
      ListBox1.Clear;
      ListBox1.Visible := false;
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.SalvaTransferencia;
var
  L, vTeste: Integer;
  vIdent: String;
begin
  vIdent := InputBox('Observação', 'Observação da transferencia', '');
  With ADOQrySalvar do
  begin
    Try
      DModulo.Conexao.BeginTrans;
      // tem q atualizar o sequencial da pré-venda senão n faz 2 transferencias de vez
      // verificar o por que nao esta pegando o UltimoLancamento ANDRE
      sql.Text :=
        'Update Sequencial Set nrPedidos = nrPedidos + 1 Where cdCodigo = 1 ';
      ExecSQL;
      sql.Text :=
        'Insert Into Lancto (dsLancamento,cdPessoa,dsStatus,cdTipo,           '
        + 'dtEmissao,Dt_Efefiva_E_S,nrParcelas,vlValor,dsUf,                    '
        + 'vlDesconto,vlAcrescimo,dsCFOP,nrBaseCalculoIcms,nrValorIcms,         '
        + 'nrBaseIcmsSub,nrIcmsSub,nrAliquotaIcms,vlFrete,nrFrete,vlvalorProd,  '
        + 'CFOP_Estendido,AIDF,dsSerie,vlIpi_Nota,vlDesPAcessorias,dsEmitente,  '
        + 'cdComissao,vlComissao,dsObs,dsFlag)                                  '
        + 'Values (:dsLancamento,:cdPessoa,''L'',11,:DT1,:DT2,                  '
        + '1,:TOTAL,:DSUF,0,0,:CFOP,:CALCULO,:VALOR,:BASE,:SUB,:VL,:FRETE,      '
        + '''1'',:PROD,:FOP,:VAL,:SERIE,:IPI,:DESP,''P'',:NOME,:COMISSAO,:OBS,1)';
      Parameters.ParamByName('dsLancamento').Value := EdtLancto.Text;
      Parameters.ParamByName('cdPessoa').Value := EdtCdCliente.Text;
      Parameters.ParamByName('DT1').Value := DateToStr(DtLancto.Date);
      Parameters.ParamByName('DT2').Value := DateToStr(DtLancto.Date);
      Parameters.ParamByName('TOTAL').Value := StrToFloat(EdtTotal.Text);
      Parameters.ParamByName('DSUF').Value := 'SE';
      Parameters.ParamByName('CFOP').Value := Null;
      Parameters.ParamByName('CALCULO').Value := 0; // EdtBaseCalculoIcms.Text;
      Parameters.ParamByName('VALOR').Value := 0; // EdtValorIcms.Text;
      Parameters.ParamByName('BASE').Value := 0; // EdtBaseCalcIcmsSub.Text;
      Parameters.ParamByName('SUB').Value := 0; // EdtIcmsSub.Text;
      Parameters.ParamByName('VL').Value := 0; // SgDados.Cells[6,1];
      Parameters.ParamByName('FRETE').Value := 0;
      // FrmEntradas.EdtVlFrete.Text;
      Parameters.ParamByName('PROD').Value := EdtTotal.Text;
      Parameters.ParamByName('FOP').Value := Null;
      Parameters.ParamByName('VAL').Value := '0.00';
      Parameters.ParamByName('SERIE').Value := Null;
      Parameters.ParamByName('IPI').Value := '0.00';
      Parameters.ParamByName('DESP').Value := '0.00';
      Parameters.ParamByName('NOME').Value := EdtCdNome.Text;
      Parameters.ParamByName('COMISSAO').Value := '0.00';
      Parameters.ParamByName('OBS').Value := vIdent;
      ExecSQL;
      for L := 1 to SgDados.RowCount - 1 do
      begin
        if SgDados.Cells[0, L] = '' then
          Break;
        sql.Text :=
          'Insert Into IteLcto (cdIteLcto,cdProduto,dsLancamento,cdPessoa,dsStatus,                  '
          + 'CFOP_Estendido,vlUnitario_Desc,vlUnitario,nrQtd,dsCfop,nrNumeroItem,nrValorDesconto,      '
          + 'nrBaseCalculoIcms,nrBaseIcmsSub,nrValorIpi,nrAliquotaIcms,nrAliquotaIpi,vlUnitario_Bruto) '
          + 'Values (:cdIteLcto,:cdProduto,:dsLancamento,:cdPessoa,                                    '
          + '''L'',:FOPEX,:VAL1,:VAL2,:VAL3,:VAL4,:VAL5,:VAL6,:VAL7,:VAL8,:VAL9,:VAL10,:VAL11,:VAL12)  ';
        Parameters.ParamByName('FOPEX').Value := Null;
        Parameters.ParamByName('cdIteLcto').Value := intToStr(L);
        Parameters.ParamByName('cdProduto').Value := SgDados.Cells[0, L];
        Parameters.ParamByName('dsLancamento').Value := EdtLancto.Text;
        Parameters.ParamByName('cdPessoa').Value := EdtCdCliente.Text;
        Parameters.ParamByName('VAL1').Value :=
          FormatFloatQ(vCasasPreco, (StrToFloat(SgDados.Cells[3, L])));
        Parameters.ParamByName('VAL2').Value :=
          FormatFloatQ(vCasasPreco, (StrToFloat(SgDados.Cells[3, L])));
        Parameters.ParamByName('VAL3').Value := SgDados.Cells[2, L];
        Parameters.ParamByName('VAL4').Value := SgDados.Cells[15, L];
        Parameters.ParamByName('VAL5').Value := intToStr(L);
        Parameters.ParamByName('VAL6').Value := '0.00';
        Parameters.ParamByName('VAL7').Value := '0.00';
        Parameters.ParamByName('VAL8').Value := '0.00';
        Parameters.ParamByName('VAL9').Value := '0.00';
        Parameters.ParamByName('VAL10').Value := '0.00';
        Parameters.ParamByName('VAL11').Value := '0.00';
        Parameters.ParamByName('VAL12').Value :=
          FormatFloat('0.00', (StrToFloat(SgDados.Cells[3, L])));
        ExecSQL;
        sql.Text := 'Update Produto Set dsAtivo = ''S'', ' +
          'nrQtdreal = nrQtdreal - :nrQtdreal  ' + // quantidade
          'Where cdProduto = :cdProduto        ';
        Parameters.ParamByName('nrQtdreal').Value := SgDados.Cells[2, L];
        Parameters.ParamByName('cdProduto').Value := SgDados.Cells[0, L];
        ExecSQL;
      end; // for StringGrid
      DModulo.Conexao.CommitTrans;
      MessageDlg('Lançamento confirmado com sucesso!', mtInformation,
        [mbOK], 0);
      Application.OnMessage := FormPrincipal.ProcessaMsg;
    Except
      on e: Exception do
      begin
        DModulo.Conexao.RollbackTrans;
        Salvar_erro(vData_Banco + ' | ' + pegaHoraBanco, 'PREVENDA',
          'TFrmPrincipalPreVenda.SalvaTransferencia', e.Message,
          EdtLancto.Text);
        MessageDlg
          ('Não foi possivel salvar os dados. Já existe uma transferencia com o mesmo número de lançamento!',
          mterror, [mbOK], 0);
      end;
    end; // except
  end;
  // ImprimeTransferencia;
  ImprimeComprovanteTransferencia;
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  // RgOpcoes.ItemIndex := 0;
end;

procedure TFrmPrincipalPreVenda.ImprimeComprovanteTransferencia;
var
  Arq: TextFile;
  vcampo_1, vcampo_2, vcampo_3, vcampo_4, vcampo_5, vtitulo, vformapag,
    vvencimento: String;
  vTotal: Real;
  i, j: Integer;
  Year, Month, Day: Word;
  dtVenc: TDateTime;
  data, vTime: String[10];
begin
  if FileExists('Texto.txt') then
  begin // Caso não encontre o arquivo.
    vQtdPrint := '1';
    for j := 1 to StrToInt(vQtdPrint) do
    begin
      vformapag := '';
      vvencimento := '';
      vTime := TimeToStr(Time);
      With AdoQryLocaliza do
      begin
        sql.Text :=
          'Select P.nmProduto,P.dsUnidade,P.cdFabricante,P.dsReferencia,I.cdProduto,I.cdIteLcto,L.cdPessoa,'
          + 'I.nrQtd,I.vlUnitario,L.vlValor,L.vlDesconto,L.vlAcrescimo,L.dtEmissao,l.dsObs,I.nrAliquotaIpi,  '
          + 'L.dsStatus From Produto P WITH (NOLOCK),IteLcto I WITH (NOLOCK),Lancto L WITH (NOLOCK)          '
          + 'Where L.dsStatus in (''L'') and L.dsLancamento = I.dsLancamento and I.cdProduto = P.cdProduto   '
          + 'and L.dsStatus = I.dsStatus and I.dsLancamento = :dsLancamento and I.cdPessoa = :cdPessoa       ';
        Parameters.ParamByName('dsLancamento').Value := EdtLancto.Text;
        Parameters.ParamByName('cdPessoa').Value := EdtCdCliente.Text;
        open;
      end;
      Editor.Clear;
      Editor.Lines.Add(' ');
      Editor.Lines.Add('       **S E M  V A L O R  F I S C A L**');
      Editor.Lines.Add(' ');
      Editor.Lines.Add(' ============================================');
      Editor.Lines.Add('                 TRANSFERENCIA');
      if UpperCase(vMatrizFilial) = 'MATRIZ' THEN
        Editor.Lines.Add('   P R O A U T O    A U T O   P E C A S  (M)')
      else
        Editor.Lines.Add('   P R O A U T O    A U T O   P E C A S  (F)');
      Editor.Lines.Add(' ============================================');
      Editor.Lines.Add(' Filial:  ' + EdtCdCliente.Text + '-' +
        copy_campo(CbxCliente.Text, '|', 1));
      Editor.Lines.Add(' ' + EdtEndereco.Text);
      Editor.Lines.Add(' ============================================');
      Editor.Lines.Add(' Orcamento N. ' + EdtLancto.Text + ' Data: ' +
        DateToStr(Date) + ' ' + vTime);
      Editor.Lines.Add(' Vendedor:    ' + CbxNome.Text);
      Editor.Lines.Add(' ============================================');
      Editor.Lines.Add(' Cod    Descricao              Qtd    V.Total');
      for i := 1 to AdoQryLocaliza.RecordCount do
      begin
        vcampo_1 := AdoQryLocaliza.FieldByName('cdProduto').AsString;
        while Length(vcampo_1) < 5 do
          vcampo_1 := vcampo_1 + ' ';
        vcampo_2 := AdoQryLocaliza.FieldByName('nmproduto').AsString;
        while Length(vcampo_2) < 38 do
          vcampo_2 := vcampo_2 + ' ';
        vcampo_3 := FormatFloat('000',
          AdoQryLocaliza.FieldByName('nrqtd').AsFloat);
        while Length(vcampo_3) < 4 do
          vcampo_3 := vcampo_3 + ' ';
        vcampo_4 := FormatFloat('0.00', AdoQryLocaliza.FieldByName('nrqtd')
          .AsFloat * AdoQryLocaliza.FieldByName('vlUnitario').AsFloat);
        vTotal := vTotal + (AdoQryLocaliza.FieldByName('nrqtd').AsFloat *
          AdoQryLocaliza.FieldByName('vlUnitario').AsFloat);
        while Length(vcampo_4) < 6 do
          vcampo_4 := vcampo_4 + ' ';
        vcampo_5 := AdoQryLocaliza.FieldByName('dsReferencia').AsString;
        while Length(vcampo_5) < 15 do
          vcampo_5 := vcampo_5 + ' ';
        Editor.Lines.Add(' ' + vcampo_1 + '  ' + vcampo_2);
        Editor.Lines.Add('        Ref.:' + vcampo_5 + '   ' + vcampo_3 + '   ' +
          vcampo_4);
        AdoQryLocaliza.Next;
      end;
      Editor.Lines.Add(' ');
      Editor.Lines.Add(' Qtd itens: ' + intToStr(AdoQryLocaliza.RecordCount) +
        '               Total:  ' + FormatFloat('0.00', vTotal) + '');
      Editor.Lines.Add(' ===========================================');
      Editor.Lines.Add(' ');
      Editor.Lines.Add(' ');
      Editor.Lines.Add('  _______________________________________');
      Editor.Lines.Add('                    Visto');
      Editor.Lines.Add(' ');
      Editor.Lines.Add(' ');
      Editor.Lines.Add('** E X I J A  S E U  C U P O M  F I S C A L **');
      Editor.Lines.Add(' ');
      Editor.Lines.Add(' ');
      Editor.Lines.Add(' ');
      Editor.Lines.Add(' ');
      Editor.Lines.Add(' ');
      Editor.Lines.Add(' ');
      Editor.Lines.Add(' ');
      Editor.Lines.Add(' ');
      try
        AssignFile(Arq, 'Texto.txt');
        Erase(Arq);
        Rewrite(Arq);
        Writeln(Arq, Editor.Text);
      Finally
        CloseFile(Arq);
      end; // try
      if vPAFECF = false then
        WinExec('c:\Arquiv~1\Saef\bin\print.bat', sw_ShowNormal);
    end;
  end; // for
end;

procedure TFrmPrincipalPreVenda.ransferncia1Click(Sender: TObject);
begin
  if UpperCase(vEmpresa) = 'PROAUTO' then
    RgOpcoes.ItemIndex := 3;
end;

procedure TFrmPrincipalPreVenda.Consulta_Deposito;
begin
  if (UpperCase(vEmpresa) <> 'PBFARMA') and (UpperCase(vEmpresa) <> 'PTINTAS')
  then
    Label11.Text := '0,00'
  else
    LblReserva.Text := '0,00';
  if ADOSPConsulta.RecordCount > 0 then
  begin
    With ADOQryUltimoCodigo do
    begin // Pega da conexão depósito
      if (UpperCase(vEmpresa) = 'BELAVISTA') and (dsCGC <> '32738825000102') then // diferente do material de construções
        sql.Text := 'Select nrqtdReal From IteFilialProduto WITH (NOLOCK) WHERE cdFilial = '+vcdDeposito+' AND '
      else
        sql.Text := 'Select nrqtdReal From Produto WITH (NOLOCK) WHERE ';
      if (UpperCase(vEmpresa) = 'PROAUTO') then
      begin
        sql.Add('dsReferencia = :REFERENCIA ');
        Parameters.ParamByName('REFERENCIA').Value :=
          ADOSPConsulta.FieldByName('REFERÊNCIA').AsString;
      end
      else
      begin
        sql.Add('cdProduto = :CDPRODUTO ');
        Parameters.ParamByName('CDPRODUTO').Value :=
          ADOSPConsulta.FieldByName('Código').AsString;
      end;
      open;
    end;
    // if (UpperCase(vEmpresa) = 'PTINTAS') then
    // Label15.Text := FormatFloat('0.00',ADOQryUltimoCodigo.FieldByName('nrqtdreal').AsFloat)
    if (UpperCase(vEmpresa) <> 'PBFARMA') and (UpperCase(vEmpresa) <> 'PTINTAS')
    then
      Label11.Text := FormatFloat('0.00',
        ADOQryUltimoCodigo.FieldByName('nrqtdreal').AsFloat)
    else
      LblReserva.Text := FormatFloat('0.00',
        ADOQryUltimoCodigo.FieldByName('nrqtdreal').AsFloat); // PBFARMA
  end
  else
    Label11.Text := '0';
  if (UpperCase(vEmpresa) = 'NACIONAL') then
  begin
    Label15.Text := FormatFloat('0.00', ADOSPConsultaESTOQUE.AsFloat -
      StrToFloat(LblReserva.Text) - StrToFloat(Label11.Text));
  end;
  Label11.Refresh;
  Label15.Refresh;
end;

procedure TFrmPrincipalPreVenda.CriarIniSQLDeposito;
var
  Arquivo: TIniFile;
  Path: String;
  ConstBd: String;
begin
  { Procedimento para criar ou carregar configurações do BD }
  try { try finnaly }
    try
      Path := ExtractFilePath(Application.ExeName);
      ConstBd := '';
      if not FileExists(Path + 'ConfSQLDep.ini') then
      begin
        ShowMessage
          ('Configure a Conexão com o Banco SQL Server para o Depósito');
        Arquivo := TIniFile.Create(Path + 'ConfSQLDep.ini');
        DModulo.ADODeposito.ConnectionString := PromptDataSource(self.handle,
          'Provider=SQLOLEDB.1;Password=;' + 'Persist Security Info=True;' +
          'User ID=;Initial Catalog=;Data Source=');
        ConstBd := Cryptografia('C', DModulo.ADODeposito.ConnectionString);
        Arquivo.WriteString('BD', 'Path', ConstBd);
      end
      else
      begin
        Arquivo := TIniFile.Create(Path + 'ConfSQLDep.ini');
        ConstBd := Arquivo.ReadString('BD', 'Path', '');
      end;
    except
      ShowMessage('Erro ao carregar o arquivo de Inicialização. ' + #13 +
        'Entre em contato com o Suporte do Sistema!');
    end;
  finally
    if Arquivo <> nil then
      Arquivo.Free;
  end;
  try
    with DModulo.ADODeposito do
    begin
      Connected := false;
      ConnectionString := Cryptografia('D', ConstBd);
      Connected := True;
    end;
  except
    ShowMessage('Não foi possível conectar com o banco de dados.' + #13 +
      '   Entre em contato com o suporte do sistema');
    Application.Terminate; // TESTE
    FrmPrincipalPreVenda.Close;
    FrmPrincipalPreVenda := nil;
    FrmPrincipalPreVenda.Free;
    exit;
  end;
end;

procedure TFrmPrincipalPreVenda.ConsultarCrdito1Click(Sender: TObject);
begin
  if UpperCase(vEmpresa) = 'PROAUTO' then
  begin
    vFlag := '8';
    LiberaVanda;
  end;
end;

procedure TFrmPrincipalPreVenda.Especificao1Click(Sender: TObject);
begin
  RadioGroup1.ItemIndex := 5;
end;

procedure TFrmPrincipalPreVenda.Relatriodecontagem1Click(Sender: TObject);
begin
  if (UpperCase(vEmpresa) = 'NACIONAL') then
  begin
    FrmContagem := TFrmContagem.Create(Application);
    FrmContagem.ShowModal;
  end
  else
    ShowMessage('Disponível somete para o cliente Eletrônica Nacional!');
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasTemdeTudoSempre;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0475');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H09');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('1E1101500010010A' + SgDados.Cells[6, L] + ''); // barra
    Editor.Lines.Add('121100000570006' + trim(Copy(SgDados.Cells[1, L], 1, 19))
      + ''); // descricao
    Editor.Lines.Add('121100000320007' + 'R$' + SgDados.Cells[3, L] + '');
    // valor
    Editor.Lines.Add('1E1101500010159A' + SgDados.Cells[6, L] + ''); // barra
    Editor.Lines.Add('121100000580153' + trim(Copy(SgDados.Cells[1, L], 1, 19))
      + ''); // descricao
    Editor.Lines.Add('121100000330154' + 'R$' + SgDados.Cells[3, L] + '');
    // valor
    Editor.Lines.Add('1E1101500010295A' + SgDados.Cells[6, L] + ''); // barra
    Editor.Lines.Add('121100000570289' + trim(Copy(SgDados.Cells[1, L], 1, 19))
      + ''); // descricao
    Editor.Lines.Add('121100000320292' + 'R$' + SgDados.Cells[3, L] + '');
    // preco
    Editor.Lines.Add('121100000450006' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      + ''); // descricao 2
    Editor.Lines.Add('121100000460153' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      + ''); // descricao 2
    Editor.Lines.Add('121100000450289' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      + ''); // descricao 2
    Editor.Lines.Add('121100000690006' + 'Cod.' + SgDados.Cells[0, L] + '');
    // codigo
    Editor.Lines.Add('121100000680153' + 'Cod.' + SgDados.Cells[0, L] + '');
    // codigo
    Editor.Lines.Add('121100000680289' + 'Cod.' + SgDados.Cells[0, L] + '');
    // codigo
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('^' + FormatFloat('00', vqtd));
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasVarejao;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    if (vAtacarejo = True) and (Produto.nrQtdAtacarejo > 0) and
      (Produto.vlAtacado < Produto.vlPreco) then
    begin
      Editor.Lines.Add('N');
      Editor.Lines.Add('ZT');
      Editor.Lines.Add('q863');
      Editor.Lines.Add('Q240,24');
      Editor.Lines.Add('JB');
      Editor.Lines.Add('D9');
      Editor.Lines.Add('S2');
      Editor.Lines.Add('0');
      Editor.Lines.Add('A49,0,0,3,1,1,N,"' + SgDados.Cells[1, L] + '"');
      Editor.Lines.Add('A49,24,0,3,13,5,R," "');
      Editor.Lines.Add('A65,28,0,2,1,1,R,"A PARTIR DE"');
      Editor.Lines.Add('A116,49,0,4,1,2,R,"' +
        intToStr(Round(Produto.nrQtdAtacarejo)) + '"');
      Editor.Lines.Add('A75,104,0,2,1,1,R,"'+Uppercase(produto.unidade.dsDescricaoUnidade)+'"');
      Editor.Lines.Add('B49,128,0,3,2,4,51,B,"' + SgDados.Cells[6, L] + '"');
      Editor.Lines.Add('A211,24,0,3,15,5,R," "');
//    Roberto desistiu desse tipo de desconto
//      if UpperCase(produto.Grupo.nome) <> 'CEREAIS 2' then
//        Editor.Lines.Add('A258,39,0,4,1,3,R,"' + FormatFloat('0.00',
//          (produto.vlPreco*0.98)) + '"')
//      else
        Editor.Lines.Add('A258,39,0,4,1,3,R,"' + FormatFloat('0.00',
          produto.vlAtacado) + '"');
      Editor.Lines.Add('A530,65,0,4,1,2,N,"' + FormatFloat('0.00',
        produto.vlPreco) + '"');
      Editor.Lines.Add('A414,51,0,3,1,1,N,"R$"');
      Editor.Lines.Add('A473,28,0,3,1,1,N,"VAREJO"');
      Editor.Lines.Add('X394,24,2,615,123');
      Editor.Lines.Add('A463,158,0,3,1,1,N,"COD: ' + SgDados.Cells[0, L] + '"');
    end else
    begin
      Editor.Lines.Add('');
      Editor.Lines.Add('');
      Editor.Lines.Add('Q240,019');
      Editor.Lines.Add('q831');
      Editor.Lines.Add('rN');
      Editor.Lines.Add('S1');
      Editor.Lines.Add('D7');
      Editor.Lines.Add('ZT');
      Editor.Lines.Add('JB');
      Editor.Lines.Add('OD');
      Editor.Lines.Add('R56,0');
      Editor.Lines.Add('N');
      Editor.Lines.Add('B665,160,2,E30,3,6,116,B,"' + SgDados.Cells[6, L] +
        '"'); // barra
      Editor.Lines.Add('A271,88,2,2,1,1,N,"' + SgDados.Cells[0, L] + '"');
      // codigo
      Editor.Lines.Add('A343,88,2,2,1,1,N,"Cod.:"');
      Editor.Lines.Add('A343,160,2,4,2,2,N,"R$ ' + SgDados.Cells[3, L] + '"');
      Editor.Lines.Add('A679,208,2,4,1,1,N,"' + SgDados.Cells[1, L] + '"');
    end;
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + intToStr(Trunc(vqtd)));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasJUDASTADEU_L42;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q240,019');
    Editor.Lines.Add('q831');
    Editor.Lines.Add('rN');
    Editor.Lines.Add('S1');
    Editor.Lines.Add('D7');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('OD');
    Editor.Lines.Add('R56,0');
    Editor.Lines.Add('N');
    Editor.Lines.Add('B665,160,2,E30,3,6,116,B,"' + SgDados.Cells[6, L] + '"');
    // barra
    Editor.Lines.Add('A271,88,2,2,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // codigo
    Editor.Lines.Add('A343,88,2,2,1,1,N,"Cod.:"');
    Editor.Lines.Add('A343,160,2,4,2,2,N,"R$ ' + SgDados.Cells[3, L] + '"');
    Editor.Lines.Add('A679,208,2,4,1,1,N,"' + SgDados.Cells[1, L] + '"');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + intToStr(Trunc(vqtd)));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasGentePequena;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,A,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q160,024');
    Editor.Lines.Add('q831');
    Editor.Lines.Add('rN');
    Editor.Lines.Add('S4');
    Editor.Lines.Add('D7');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('OD');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('f100');
    Editor.Lines.Add('N');
    Editor.Lines.Add('A244,91,2,4,1,1,N,"' + 'R$' + SgDados.Cells[3, L] + '"');
    Editor.Lines.Add('A528,91,2,4,1,1,N,"' + 'R$' + SgDados.Cells[3, L] + '"');
    Editor.Lines.Add('A823,91,2,4,1,1,N,"' + 'R$' + SgDados.Cells[3, L] + '"');
    Editor.Lines.Add('B246,66,2,1,2,6,46,B,"' + (SgDados.Cells[6, L]) + '"');
    Editor.Lines.Add('B530,66,2,1,2,6,46,B,"' + (SgDados.Cells[6, L]) + '"');
    Editor.Lines.Add('B825,67,2,1,2,6,46,B,"' + (SgDados.Cells[6, L]) + '"');
    Editor.Lines.Add('A244,126,2,1,1,2,N,"' + trim(Copy(SgDados.Cells[1, L], 20,
      40)) + '"');
    Editor.Lines.Add('A526,126,2,1,1,2,N,"' + trim(Copy(SgDados.Cells[1, L], 20,
      40)) + '"');
    Editor.Lines.Add('A244,153,2,1,1,2,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '"');
    Editor.Lines.Add('A820,127,2,1,1,2,N,"' + trim(Copy(SgDados.Cells[1, L], 20,
      40)) + '"');
    Editor.Lines.Add('A526,153,2,1,1,2,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '"');
    Editor.Lines.Add('A821,154,2,1,1,2,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '"');
    Editor.Lines.Add('A245,18,2,2,1,1,N,"' + (SgDados.Cells[6, L]) + '"');
    Editor.Lines.Add('A528,18,2,2,1,1,N,"' + (SgDados.Cells[6, L]) + '"');
    Editor.Lines.Add('A822,18,2,2,1,1,N,"' + (SgDados.Cells[6, L]) + '"');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('P' + FloatToStr(vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasGoncalves;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,A,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q240,024');
    Editor.Lines.Add('q863');
    Editor.Lines.Add('rN');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('D7');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('O');
    Editor.Lines.Add('R32,0');
    Editor.Lines.Add('f100');
    Editor.Lines.Add('N');
    Editor.Lines.Add('A441,11,0,4,1,1,N,"Auto Peça Gonçales"');
    Editor.Lines.Add('A441,11,0,4,1,1,N,"Auto Peça Gonçales"');
    Editor.Lines.Add('A420,189,0,2,1,1,N,"Data: 14/12/2012"');
    Editor.Lines.Add('A1,189,0,2,1,1,N,"Data: 14/12/2012"');
    Editor.Lines.Add('A420,131,0,2,1,1,N,"Cod: ' + SgDados.Cells[0, L] +
      ' Fab: 1478963"');
    Editor.Lines.Add('A420,159,0,2,1,1,N,"Prateleira: ' + SgDados.Cells[5,
      L] + '"');
    Editor.Lines.Add('A419,84,0,3,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,
      40)) + '"');
    Editor.Lines.Add('A1,159,0,2,1,1,N,"Prateleira: ' + SgDados.Cells[5,
      L] + '"');
    Editor.Lines.Add('A1,131,0,2,1,1,N,"Cod: ' + SgDados.Cells[0, L] +
      ' Fab: 1478963"');
    Editor.Lines.Add('A0,83,0,3,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 20,
      40)) + '"');
    Editor.Lines.Add('A419,56,0,3,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '"');
    Editor.Lines.Add('A0,54,0,3,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '"');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('P' + FloatToStr(vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasDeluc;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('CT~~CD,~CC^~CT~');
    Editor.Lines.Add
      ('^XA~TA000~JSN^LT0^MNW^MTT^PON^PMN^LH0,0^JMA^PR5,5~SD15^JUS^LRN^CI0^XZ');
    Editor.Lines.Add('^XA');
    Editor.Lines.Add('^MMT');
    Editor.Lines.Add('^PW830');
    Editor.Lines.Add('^LL0160');
    Editor.Lines.Add('^LS0');
    Editor.Lines.Add('^FT582,36^ABN,11,7^FH\^FD' +
      trim(Copy(SgDados.Cells[1, L], 20, 40)) + '^FS');
    Editor.Lines.Add('^FT297,36^ABN,11,7^FH\^FD' +
      trim(Copy(SgDados.Cells[1, L], 20, 40)) + '^FS');
    Editor.Lines.Add('^FT582,20^ABN,11,7^FH\^FD' +
      trim(Copy(SgDados.Cells[1, L], 1, 19)) + '^FS');
    Editor.Lines.Add('^FT9,37^ABN,11,7^FH\^FD' + trim(Copy(SgDados.Cells[1, L],
      20, 40)) + '^FS');
    Editor.Lines.Add('^FT297,20^ABN,11,7^FH\^FD' +
      trim(Copy(SgDados.Cells[1, L], 1, 19)) + '^FS');
    Editor.Lines.Add('^FT9,21^ABN,11,7^FH\^FD' + trim(Copy(SgDados.Cells[1, L],
      1, 19)) + '^FS');
    Editor.Lines.Add('^BY2,3,49^FT579,136^BCN,,Y,N');
    Editor.Lines.Add('^FD>;' + Copy(SgDados.Cells[7, L], 1, 12) + '>6' +
      Copy(SgDados.Cells[7, L], 13, 13) + '^FS');
    Editor.Lines.Add('^BY2,3,49^FT292,136^BCN,,Y,N');
    Editor.Lines.Add('^FD>;' + Copy(SgDados.Cells[7, L], 1, 12) + '>6' +
      Copy(SgDados.Cells[7, L], 13, 13) + '^FS');
    Editor.Lines.Add('^BY2,3,49^FT3,137^BCN,,Y,N');
    Editor.Lines.Add('^FD>;' + Copy(SgDados.Cells[7, L], 1, 12) + '>6' +
      Copy(SgDados.Cells[7, L], 13, 13) + '^FS');
    { antes estava pelo codigo de barras
      Editor.Lines.Add('^FD>;'+Copy(SgDados.Cells[6,L],1,12)+'>6'+Copy(SgDados.Cells[6,L],13,13)+'^FS');
      Editor.Lines.Add('^BY2,3,49^FT292,136^BCN,,Y,N');
      Editor.Lines.Add('^FD>;'+Copy(SgDados.Cells[6,L],1,12)+'>6'+Copy(SgDados.Cells[6,L],13,13)+'^FS');
      Editor.Lines.Add('^BY2,3,49^FT3,137^BCN,,Y,N');
      Editor.Lines.Add('^FD>;'+Copy(SgDados.Cells[6,L],1,12)+'>6'+Copy(SgDados.Cells[6,L],13,13)+'^FS'); }
    Editor.Lines.Add('^FT583,74^A0N,28,28^FH\^FD' + 'R$' + SgDados.Cells[3,
      L] + '^FS');
    Editor.Lines.Add('^FT295,75^A0N,28,28^FH\^FD' + 'R$' + SgDados.Cells[3,
      L] + '^FS');
    Editor.Lines.Add('^FT8,75^A0N,28,28^FH\^FD' + 'R$' + SgDados.Cells[3,
      L] + '^FS');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('^PQ' + FloatToStr(vqtd) + ',0,1,Y^XZ');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.atualizaEditQtdItens;
var
  i, quantidade: Integer;
begin
  edtQtdItens.Clear;
  quantidade := 0;
  for i := 1 to SgDados.RowCount - 1 do
  begin
    if (SgDados.Cells[1, i] = '') then
      Break;
    if not item_cancelado(i) then
      Inc(quantidade);
  end;
  edtQtdItens.Text := intToStr(quantidade);
  edtQtdItens.Repaint;
  edtQtdItens.Refresh;
end;

function TFrmPrincipalPreVenda.ValidarVersaoExeVersaoBAnco: Boolean;
begin
  result := True;
  if (StrToInt(stringreplace(GetVersaoArq, '.', '', [rfReplaceAll])) >= 200687)
    and (TNEGLoja.getVersaoBanco < 9.21) then
  begin // ATACAREJO
    MessageDlg
      ('Favor entrar em contato com a Support Informática solicitando a atualização do RodaScript para continuar utilizando a Pré-Venda.',
      mtWarning, [mbOK], 0);
    result := false;
  end;
end;

function TFrmPrincipalPreVenda.VendedorValido: Boolean;
begin
  result := True;
  if (trim(EdtCdNome.Text) = '') then
  begin
    Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
    ShowMessage('O nome do vendedor está digitado errado!!');
    cbxUsuario.Setfocus;
    Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
    BtnConfirmar.Enabled := True;
    Alteraquantidade1.Enabled := True;
    result := false;
  end;
end;

function TFrmPrincipalPreVenda.Vender_Proibida_Fracionado: Boolean;
var
  i: Integer;
  resultado: Boolean;
begin
  resultado := false;
  if (RgOpcoes.ItemIndex = 0) then
  begin
    for i := 0 to prevenda.itens.Count - 1 do
    begin
      if (not Verifica_Se_Produto_Fracionado
        (intToStr(prevenda.itens[i].cdProduto))) and
        (Frac(prevenda.itens[i].quantidade) > 0) then
      begin
        Application.MessageBox
          (PWideChar('O produto ' + prevenda.itens[i].descricao +
          ' está com a quantidade zerada ou negativa.' + #13#10 +
          'Para excluí-lo da pré venda dê dois cliques no item!'), 'Atenção',
          mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
        resultado := True;
        Break;
      end;
    end;
  end;
  result := resultado;
end;

procedure TFrmPrincipalPreVenda.Verifica_Livro_Forracao;
var
  i: Integer;
begin
  if (trim(tipoForro) = '') or (RgOpcoes.ItemIndex = 1) then
  begin
    tipoForro := ChamaInputBoxTipoForracao('Forração',
      'Escolha um estilo de forro na lista abaixo:');
    while tipoForro = '' do
      tipoForro := ChamaInputBoxTipoForracao('Forração',
        'Escolha um estilo de forro na lista abaixo:');
  end;
  if (trim(turno) = '') or (RgOpcoes.ItemIndex = 1) then
  begin
    turno := intToStr(ChamaInputBoxTurno('Turno',
      'Escolha o turno do aluno na lista abaixo:'));
    while turno = '' do
    begin
      turno := intToStr(ChamaInputBoxTurno('Forração',
        'Escolha o turno do aluno na lista abaixo:'));
    end;
  end;
  // verifico se possui livros no meios dos produtos, pego o ultimo sequencial + 1
  if RgOpcoes.ItemIndex = 0 then
  begin
    nrOrcamentoDia := 0;
    possuiLivro := false;
    for i := 0 to prevenda.itens.Count - 1 do
    begin
      if prevenda.itens[i].Grupo.codigo = 19 then
      begin // se possuir pelo menos um produtop do grupo livros salvo o numero na tabela
        possuiLivro := True;
        Break;
      end;
    end;
  end
  else
    nrOrcamentoDia := prevenda.nrOrcamentoDia;
end;

function TFrmPrincipalPreVenda.Verifica_PREVENDA_SALVANOCAIXA: Boolean;
begin
  // verificar se a pre-venda ja foi confirmada pelo caixa
  With DModulo.ADOQuery1 do
  begin
    sql.Text := 'Select 0 ' +
      'From Orcamento O WITH (NOLOCK) INNER JOIN IteOrcamento I WITH (NOLOCK) '
      + 'ON O.nrOrcamento = I.nrOrcamento                                       '
      + 'Where O.nrOrcamento = :LANCTO and O.dsImpresso = ''S'' ';
    Parameters.ParamByName('LANCTO').Value :=
      FrmPrincipalPreVenda.EdtLancto.Text;
    open;
    if DModulo.ADOQuery1.RecordCount > 0 then
      result := false
    else
      result := True;
  end;
end;

procedure TFrmPrincipalPreVenda.Imprimir1Click(Sender: TObject);
var
  vTexto: String[50];
  L, vRequisicao: Integer;
begin
  // claudio 10-09-2015
  // if ADOQryNome.Locate('nmPessoa',CbxNome.Text,[]) then
  // EdtCdNome.Text := ADOQryNome.FieldbyName('cdPessoa').AsString
  // else
  // EdtCdNome.Clear;

  if (trim(EdtCdCliente.Text) = '') or (trim(EdtCdNome.Text) = '') then
  begin
    Application.OnMessage := FrmPrincipalPreVenda.NaoProcessaMsg;
    ShowMessage('O nome do cliente ou do vendedor está digitado errado!!');
    CbxCliente.Setfocus;
    Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
    exit;
  end;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para essa pré venda \ orçamento!',
      mtWarning, [mbOK], 0);
    EdtDesconto.Text := '0,00000';
    EdtSubTotal.Text := '0,00';
    edtQtdItens.Text := '0';
    EdtTotal.Text := '0,00';
    edtValorBruto.Text := '0,00';
    EdtConsulta.Setfocus;
    exit;
  end;
  Application.OnMessage := NaoProcessaMsg;
  vTexto := InputBox('Impressão de requisição',
    'Entre com o nome da empresa onde está solicitando o material!', '');
  Application.OnMessage := ProcessaMsg;
  With ADOQrySalvar do
  begin
    Try
      DModulo.Conexao.BeginTrans;
      sql.Text := 'Select max(nrRequisicao + 1) as Lancto From requisicao';
      open;
      vRequisicao := FieldByName('Lancto').AsInteger;
      for L := 1 to SgDados.RowCount - 1 do
      begin // Salvando os itens da pré-venda.
        if SgDados.Cells[0, L] = '' then
          Break;
        sql.Text :=
          'Insert Into Requisicao (nrRequisicao,dtrequisicao,cdVendedor,cdProduto,cdCliente,dsEmpresa) '
          + 'Values (:REQ,:DATA,:CODIGO,:PROD,:CLIENTE,:EMPRESA)                                         ';
        Parameters.ParamByName('REQ').Value := vRequisicao;
        Parameters.ParamByName('DATA').Value := vData_Banco;
        Parameters.ParamByName('PROD').Value := StrToIntDef(SgDados.Cells[0, L],
          3); // default é o primeiro vendedor, segundo herbert
        Parameters.ParamByName('CODIGO').Value := StrToInt(EdtCdNome.Text);
        Parameters.ParamByName('CLIENTE').Value :=
          StrToIntDef(EdtCdCliente.Text, 1); // default é venda a consumidor
        Parameters.ParamByName('EMPRESA').Value := vTexto;
        ExecSQL;
      end;
      DModulo.Conexao.CommitTrans;
      MessageDlg('Requisição OK!', mtConfirmation, [mbOK], 0);
      ImprimirRequisicao(vTexto, vRequisicao);
    Except
      on e: Exception do
      begin
        DModulo.Conexao.RollbackTrans;
        Salvar_erro(vData_Banco + ' | ' + pegaHoraBanco, 'PREVENDA',
          'TFrmPrincipalPreVenda.Imprimir1Click', e.Message, EdtLancto.Text);
        MessageDlg('Não foi possível salvar!', mterror, [mbOK], 0);
      end;
    end; // except
  end;
  Application.OnMessage := FrmPrincipalPreVenda.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  EdtDesconto.ReadOnly := True;
  EdtSubTotal.ReadOnly := True;
  BtnAprazo.Enabled := True;
  if FrmPrincipalPreVenda.Enabled = True then
    RgOpcoes.ItemIndex := 0;
end;

procedure TFrmPrincipalPreVenda.ImprimirRequisicao(vCliente: String;
  vRequisicao: Integer);
var
  Arq: TextFile;
  vcampo_1, vcampo_2, vcampo_3, vcampo_4, vcampo_5, vtitulo, vformapag,
    vvencimento: String;
  vTotal: Real;
  i, j, L: Integer;
  Year, Month, Day: Word;
  dtVenc: TDateTime;
  data: String[10];
begin
  if FileExists('Texto.txt') then
  begin // Caso não encontre o arquivo.
    Editor.Clear;
    Editor.Lines.Add(' ');
    Editor.Lines.Add('       **S E M  V A L O R  F I S C A L**');
    Editor.Lines.Add(' ');
    Editor.Lines.Add(' ============================================');
    Editor.Lines.Add('             REQUISICAO DE COMPRA            ');
    Editor.Lines.Add('          ' + UpperCase(nmEmpresa));
    // Editor.Lines.Add('            CAMARATUUBA AUTO PECAS           ');
    Editor.Lines.Add(' ============================================');
    Editor.Lines.Add(' Requisicao N. ' + intToStr(vRequisicao) + '   Data:   ' +
      DateToStr(Date));
    Editor.Lines.Add(' ============================================');
    Editor.Lines.Add(' Descricao                              Qtd');
    for L := 1 to SgDados.RowCount - 1 do
    begin // Salvando os itens da pré-venda.
      if SgDados.Cells[0, L] = '' then
        Break;
      vcampo_2 := SgDados.Cells[1, L];
      while Length(vcampo_2) < 38 do
        vcampo_2 := vcampo_2 + ' ';
      vcampo_3 := FormatFloat('000', StrToFloat(SgDados.Cells[2, L]));
      while Length(vcampo_3) < 4 do
        vcampo_3 := vcampo_3 + ' ';
      vcampo_4 := SgDados.Cells[7, L];
      Editor.Lines.Add(' ' + vcampo_2 + '  ' + vcampo_3);
      Editor.Lines.Add(' Ref.: ' + vcampo_4);
    end;
    Editor.Lines.Add(' ===========================================');
    Editor.Lines.Add(' ');
    Editor.Lines.Add('  _______________________________________');
    Editor.Lines.Add('                  Autorizacao');
    Editor.Lines.Add(' ');
    Editor.Lines.Add(' ');
    Editor.Lines.Add(' ');
    Editor.Lines.Add(' ');
    Editor.Lines.Add(' ');
    Editor.Lines.Add(' ');
    Editor.Lines.Add(' ');
    Editor.Lines.Add(' ');
    Editor.Lines.Add(' ');
    Editor.Lines.Add(' ');
    try
      AssignFile(Arq, 'Texto.txt');
      Erase(Arq);
      Rewrite(Arq);
      Writeln(Arq, Editor.Text);
    Finally
      CloseFile(Arq);
    end; // try
    if vPAFECF = false then
      WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
        'print.bat')), sw_ShowNormal);
    if not FileExists('Print.bat') then
    // Caso não encontre o arquivo tenta criar
      ShowMessage('Arquivo Print.bat não foi encontrado!');
  end;
end;

procedure TFrmPrincipalPreVenda.RodaScripts1;
begin
  { with DModulo.ADOCommand1 do begin
    CommandText := 'ALTER PROCEDURE SP_CON_ESTOQUE_RILDON' + #13#10 +
    '@DSATIVO VARCHAR(40) = NULL,@ATACADOVAREJO VARCHAR(1) = NULL,' + #13#10 +
    '@OPCAO VARCHAR(40) = NULL,@CDPRODUTO VARCHAR(40) = NULL,' + #13#10 +
    '@NMPRODUTO VARCHAR(40) = NULL,@DSREFERENCIA VARCHAR(40) = NULL,' + #13#10 +
    '@NMGRUPO VARCHAR(40) = NULL,@NMPRODUTO2 VARCHAR(40) = NULL,' + #13#10 +
    '@C_BARRAS VARCHAR(40) = NULL,@CDCODIGODIC VARCHAR(20) = NULL,' + #13#10 +
    '@LANCAMENTO VARCHAR(20) = NULL, @PESSOA VARCHAR(20) = NULL' + #13#10 +
    'AS' + #13#10 +
    'IF @OPCAO = 0 AND @ATACADOVAREJO = ''V'' BEGIN' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLPRECO      AS PRECO,' + #13#10 +
    'P.VLPRECO      AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock) ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock) ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE ( I.DSPROMOCAO <> ''S'' ) AND ( P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSREFERENCIA LIKE @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE = @C_BARRAS OR @C_BARRAS IS NULL)' + #13#10 +
    'UNION ALL' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLPRECO      AS PRECO,' + #13#10 +
    'I.VLPRECO      AS VALOR,P.CDCODIGODIC,P.DSPRATELEIRA AS PRATELEIRA,' + #13#10 +
    'P.NRQTDREAL    AS ESTOQUE,P.NRQTDCONTAB  AS PEDIDO,' + #13#10 +
    'P.DSUNIDADE    AS UNIDADE,P.DSEMBALAGEM  AS EMBALAGEM,' + #13#10 +
    'P.NRPESO       AS PESO,G.NMGRUPO      AS GRUPO,' + #13#10 +
    'P.CDPESSOA     AS FORNECEDOR,I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock) ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock) ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE( I.DSPROMOCAO = ''S'' ) AND ( P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO    LIKE @CDPRODUTO +''%''    OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO    LIKE @NMPRODUTO +''%''    OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSREFERENCIA LIKE @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%''  OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO     LIKE @NMGRUPO +''%''      OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO   LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE = @C_BARRAS OR @C_BARRAS IS NULL)' + #13#10 +
    'ORDER BY P.CDPRODUTO' + #13#10 +
    'END' + #13#10 +
    'IF (@OPCAO = 1 OR @OPCAO = 5) AND (@ATACADOVAREJO = ''V'') BEGIN' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLPRECO      AS PRECO,' + #13#10 +
    'P.VLPRECO      AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P     WITH (nolock) ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W      WITH (nolock) ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE( I.DSPROMOCAO <> ''S'' )' + #13#10 +
    'AND ( P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO    LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO    LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSESPECIFICACAO LIKE ''%''+ @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE ''%''+ @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE LIKE ''%''+ @C_BARRAS +''%'' OR @C_BARRAS IS NULL)' + #13#10 +
    'UNION ALL' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLPRECO      AS PRECO,' + #13#10 +
    'I.VLPRECO      AS VALOR,P.CDCODIGODIC,P.DSPRATELEIRA AS PRATELEIRA,' + #13#10 +
    'P.NRQTDREAL    AS ESTOQUE,P.NRQTDCONTAB AS PEDIDO,P.DSUNIDADE AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO    AS PESO,G.NMGRUPO     AS GRUPO,' + #13#10 +
    'P.CDPESSOA     AS FORNECEDOR,I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock)    ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)     ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE( I.DSPROMOCAO = ''S'' )' + #13#10 +
    'AND ( P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSESPECIFICACAO LIKE ''%''+ @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE ''%''+ @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE LIKE ''%''+ @C_BARRAS +''%'' OR @C_BARRAS IS NULL)' + #13#10 +
    'ORDER BY P.NMPRODUTO' + #13#10 +
    'END' + #13#10 +
    'IF @OPCAO = 2 AND @ATACADOVAREJO = ''V'' BEGIN' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLPRECO      AS PRECO,' + #13#10 +
    'P.VLPRECO      AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock)     ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)      ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE( I.DSPROMOCAO <> ''S'' )' + #13#10 +
    'AND ( P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSREFERENCIA LIKE @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE = @C_BARRAS OR @C_BARRAS IS NULL)' + #13#10 +
    'UNION ALL' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLPRECO      AS PRECO,' + #13#10 +
    'I.VLPRECO      AS VALOR,P.CDCODIGODIC,P.DSPRATELEIRA AS PRATELEIRA,' + #13#10 +
    'P.NRQTDREAL    AS ESTOQUE,P.NRQTDCONTAB  AS PEDIDO,' + #13#10 +
    'P.DSUNIDADE    AS UNIDADE,P.DSEMBALAGEM  AS EMBALAGEM,' + #13#10 +
    'P.NRPESO       AS PESO,G.NMGRUPO      AS GRUPO,' + #13#10 +
    'P.CDPESSOA     AS FORNECEDOR,I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock)     ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)      ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE( I.DSPROMOCAO = ''S'' )' + #13#10 +
    'AND ( P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSREFERENCIA LIKE @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE = @C_BARRAS OR @C_BARRAS IS NULL)' + #13#10 +
    'ORDER BY P.DSREFERENCIA' + #13#10 +
    'END' + #13#10 +
    'IF (@OPCAO = 3) AND (@ATACADOVAREJO = ''V'') BEGIN' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLPRECO      AS PRECO,' + #13#10 +
    'P.VLPRECO      AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock)     ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)      ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE (I.DSPROMOCAO <> ''S'' )' + #13#10 +
    'AND (P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSESPECIFICACAO LIKE ''%''+ @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE LIKE ''%''+ @C_BARRAS +''%'' OR @C_BARRAS IS NULL)' + #13#10 +
    'UNION ALL' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLPRECO      AS PRECO,' + #13#10 +
    'I.VLPRECO      AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock)     ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)      ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE( I.DSPROMOCAO = ''S'' )' + #13#10 +
    'AND ( P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSESPECIFICACAO LIKE ''%''+ @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE LIKE ''%''+ @C_BARRAS +''%'' OR @C_BARRAS IS NULL)' + #13#10 +
    'ORDER BY P.CDCODIGODIC' + #13#10 +
    'END' + #13#10 +
    'IF @OPCAO = 4 AND @ATACADOVAREJO = ''V'' BEGIN' + #13#10 +
    'SELECT DISTINCT P.CDPRODUTO AS CÓDIGO,' + #13#10 +
    'P.CDFABRICANTE AS CÓDIGO_BARRAS,P.DSREFERENCIA AS REFERÊNCIA,' + #13#10 +
    'P.NMPRODUTO    AS DESCRIÇÃO,W.NMPESSOA     AS FABRICANTE,' + #13#10 +
    'P.VLPRECO      AS PRECO,P.VLPRECO      AS VALOR,' + #13#10 +
    'P.CDCODIGODIC,P.DSPRATELEIRA AS PRATELEIRA,' + #13#10 +
    'P.NRQTDREAL    AS ESTOQUE,P.NRQTDCONTAB  AS PEDIDO,' + #13#10 +
    'P.DSUNIDADE    AS UNIDADE,P.DSEMBALAGEM  AS EMBALAGEM,' + #13#10 +
    'P.NRPESO   AS PESO,G.NMGRUPO  AS GRUPO,' + #13#10 +
    'P.CDPESSOA AS FORNECEDOR,I.DSPROMOCAO,' + #13#10 +
    'P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock) ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)  ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'INNER JOIN CODADICIONAL C ON P.CDPRODUTO = C.CDPRODUTO' + #13#10 +
    'WHERE (I.DSPROMOCAO <> ''S'') AND (C.CDADICIONAL LIKE @NMGRUPO + ''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'UNION ALL' + #13#10 +
    'SELECT DISTINCT P.CDPRODUTO AS CÓDIGO,' + #13#10 +
    'P.CDFABRICANTE AS CÓDIGO_BARRAS,P.DSREFERENCIA AS REFERÊNCIA,' + #13#10 +
    'P.NMPRODUTO    AS DESCRIÇÃO,W.NMPESSOA     AS FABRICANTE,' + #13#10 +
    'P.VLPRECO      AS PRECO,I.VLPRECO      AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO   AS PESO,' + #13#10 +
    'G.NMGRUPO  AS GRUPO,P.CDPESSOA AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock) ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)  ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'INNER JOIN CODADICIONAL C ON P.CDPRODUTO = C.CDPRODUTO' + #13#10 +
    'WHERE ( I.DSPROMOCAO = ''S'' ) AND (C.CDADICIONAL LIKE @NMGRUPO + ''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'ORDER BY  P.NMPRODUTO' + #13#10 +
    'END' + #13#10 +
    'IF @OPCAO = 6 AND @ATACADOVAREJO = ''V'' BEGIN' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLPRECO      AS PRECO,' + #13#10 +
    'P.VLPRECO      AS VALOR,P.CDCODIGODIC,P.DSPRATELEIRA AS PRATELEIRA,' + #13#10 +
    'P.NRQTDREAL    AS ESTOQUE,P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO AS PESO,G.NMGRUPO      AS GRUPO,' + #13#10 +
    'P.CDPESSOA     AS FORNECEDOR,I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock) ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)  ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE( I.DSPROMOCAO <> ''S'' ) AND (P.CDPRODUTO = @CDPRODUTO)' + #13#10 +
    'OR (P.CDPRODUTO IN(SELECT CDSIMILAR FROM SIMILAR WHERE CDPRODUTO = @CDPRODUTO))' + #13#10 +
    'OR (P.CDPRODUTO IN(SELECT CDPRODUTO FROM SIMILAR WHERE CDSIMILAR = @CDPRODUTO))' + #13#10 +
    'UNION ALL' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLPRECO      AS PRECO,' + #13#10 +
    'I.VLPRECO      AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock) ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W       ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE (I.DSPROMOCAO = ''S'' ) AND (P.CDPRODUTO = @CDPRODUTO OR @CDPRODUTO IS NULL)' + #13#10 +
    'ORDER BY  P.NMPRODUTO' + #13#10 +
    'END' + #13#10 +
    'IF @OPCAO = 0 AND @ATACADOVAREJO = ''A'' BEGIN' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLATACADO    AS PRECO,' + #13#10 +
    'P.VLATACADO    AS VALOR,P.CDCODIGODIC,P.DSPRATELEIRA AS PRATELEIRA,' + #13#10 +
    'P.NRQTDREAL    AS ESTOQUE,P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO   AS PESO,G.NMGRUPO  AS GRUPO,' + #13#10 +
    'P.CDPESSOA AS FORNECEDOR,I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock) ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)  ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE ( I.DSPROMOCAO <> ''S'' )' + #13#10 +
    'AND (P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSREFERENCIA LIKE @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE = @C_BARRAS OR @C_BARRAS IS NULL)' + #13#10 +
    'UNION ALL' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLATACADO    AS PRECO,' + #13#10 +
    'I.VLATACADO    AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO   AS PESO,' + #13#10 +
    'G.NMGRUPO  AS GRUPO,P.CDPESSOA AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock) ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)  ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE ( I.DSPROMOCAO = ''S'' )' + #13#10 +
    'AND (P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSREFERENCIA LIKE @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE = @C_BARRAS OR @C_BARRAS IS NULL)' + #13#10 +
    'ORDER BY  P.CDPRODUTO' + #13#10 +
    'END' + #13#10 +
    'IF (@OPCAO = 1 OR @OPCAO = 5) AND (@ATACADOVAREJO = ''A'') BEGIN' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLATACADO    AS PRECO,' + #13#10 +
    'P.VLATACADO    AS VALOR,P.CDCODIGODIC,P.DSPRATELEIRA AS PRATELEIRA,' + #13#10 +
    'P.NRQTDREAL    AS ESTOQUE,P.NRQTDCONTAB  AS PEDIDO,' + #13#10 +
    'P.DSUNIDADE    AS UNIDADE,P.DSEMBALAGEM  AS EMBALAGEM,' + #13#10 +
    'P.NRPESO       AS PESO,G.NMGRUPO      AS GRUPO,' + #13#10 +
    'P.CDPESSOA     AS FORNECEDOR,I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock) ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE ( I.DSPROMOCAO <> ''S'' )' + #13#10 +
    'AND (P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSESPECIFICACAO LIKE ''%''+ @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE LIKE ''%''+ @C_BARRAS +''%'' OR @C_BARRAS IS NULL)' + #13#10 +
    'UNION ALL' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLATACADO    AS PRECO,' + #13#10 +
    'I.VLATACADO    AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock) ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE ( I.DSPROMOCAO = ''S'' )' + #13#10 +
    'AND (P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSESPECIFICACAO LIKE ''%''+ @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE LIKE ''%''+ @C_BARRAS +''%'' OR @C_BARRAS IS NULL)' + #13#10 +
    'ORDER BY P.NMPRODUTO' + #13#10 +
    'END' + #13#10 +
    'IF @OPCAO = 2 AND @ATACADOVAREJO = ''A'' BEGIN' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLATACADO    AS PRECO,' + #13#10 +
    'P.VLATACADO    AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock)     ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)      ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE ( I.DSPROMOCAO <> ''S'' )' + #13#10 +
    'AND( P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSREFERENCIA LIKE @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE = @C_BARRAS OR @C_BARRAS IS NULL)' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLATACADO    AS PRECO,' + #13#10 +
    'I.VLATACADO    AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock)     ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)      ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE ( I.DSPROMOCAO = ''S'' )' + #13#10 +
    'AND( P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSREFERENCIA LIKE @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE = @C_BARRAS OR @C_BARRAS IS NULL)' + #13#10 +
    'ORDER BY P.DSREFERENCIA' + #13#10 +
    'END' + #13#10 +
    'IF @OPCAO = 3 AND @ATACADOVAREJO = ''A'' BEGIN' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLATACADO    AS PRECO,' + #13#10 +
    'P.VLATACADO    AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock)     ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)      ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE (I.DSPROMOCAO <> ''S'' )' + #13#10 +
    'AND( P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSREFERENCIA LIKE @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE = @C_BARRAS OR @C_BARRAS IS NULL)' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLATACADO    AS PRECO,' + #13#10 +
    'I.VLATACADO    AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock)     ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)      ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE (I.DSPROMOCAO = ''S'' )' + #13#10 +
    'AND( P.DSATIVO = @DSATIVO OR @DSATIVO IS NULL )' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSREFERENCIA LIKE @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE = @C_BARRAS OR @C_BARRAS IS NULL)' + #13#10 +
    'ORDER BY P.CDCODIGODIC' + #13#10 +
    'END' + #13#10 +
    'IF @OPCAO = 4 AND @ATACADOVAREJO = ''A'' BEGIN' + #13#10 +
    'SELECT DISTINCT P.CDPRODUTO AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLATACADO    AS PRECO,' + #13#10 +
    'P.VLATACADO    AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock)     ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)      ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'INNER JOIN CODADICIONAL C ON P.CDPRODUTO = C.CDPRODUTO' + #13#10 +
    'WHERE (I.DSPROMOCAO <> ''S'') AND (C.CDADICIONAL LIKE @NMGRUPO + ''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'UNION ALL' + #13#10 +
    'SELECT DISTINCT P.CDPRODUTO AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLATACADO    AS PRECO,' + #13#10 +
    'I.VLATACADO    AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock)     ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)      ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'INNER JOIN CODADICIONAL C ON P.CDPRODUTO = C.CDPRODUTO' + #13#10 +
    'WHERE (I.DSPROMOCAO = ''S'') AND (C.CDADICIONAL LIKE @NMGRUPO + ''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'ORDER BY  P.NMPRODUTO' + #13#10 +
    'END' + #13#10 +
    'IF @OPCAO = 6 AND @ATACADOVAREJO = ''A'' BEGIN' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLATACADO    AS PRECO,' + #13#10 +
    'P.VLATACADO    AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock)     ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)      ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE (I.DSPROMOCAO <> ''S'') AND(P.CDPRODUTO = @CDPRODUTO)' + #13#10 +
    'OR (P.CDPRODUTO IN(SELECT CDSIMILAR FROM SIMILAR WHERE CDPRODUTO = @CDPRODUTO))' + #13#10 +
    'OR (P.CDPRODUTO IN(SELECT CDPRODUTO FROM SIMILAR WHERE CDSIMILAR = @CDPRODUTO))' + #13#10 +
    'UNION ALL' + #13#10 +
    'SELECT P.CDPRODUTO    AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,' + #13#10 +
    'P.DSREFERENCIA AS REFERÊNCIA,P.NMPRODUTO    AS DESCRIÇÃO,' + #13#10 +
    'W.NMPESSOA     AS FABRICANTE,P.VLATACADO    AS PRECO,' + #13#10 +
    'I.VLATACADO    AS VALOR,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL    AS ESTOQUE,' + #13#10 +
    'P.NRQTDCONTAB  AS PEDIDO,P.DSUNIDADE    AS UNIDADE,' + #13#10 +
    'P.DSEMBALAGEM  AS EMBALAGEM,P.NRPESO       AS PESO,' + #13#10 +
    'G.NMGRUPO      AS GRUPO,P.CDPESSOA     AS FORNECEDOR,' + #13#10 +
    'I.DSPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM ((GRUPO G WITH (nolock)' + #13#10 +
    'INNER JOIN PRODUTO P WITH (nolock)     ON G.CDGRUPO = P.CDGRUPO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10'')))' + #13#10 +
    'INNER JOIN PESSOA W WITH (nolock)      ON P.CDPESSOA_1 = W.CDPESSOA)' + #13#10 +
    'INNER JOIN ITEPROMOCAO I WITH (nolock) ON P.CDPRODUTO = I.CDPRODUTO' + #13#10 +
    'WHERE (I.DSPROMOCAO = ''S'') AND(P.CDPRODUTO = @CDPRODUTO)' + #13#10 +
    'OR (P.CDPRODUTO IN(SELECT CDSIMILAR FROM SIMILAR WHERE CDPRODUTO = @CDPRODUTO))' + #13#10 +
    'OR (P.CDPRODUTO IN(SELECT CDPRODUTO FROM SIMILAR WHERE CDSIMILAR = @CDPRODUTO))' + #13#10 +
    'ORDER BY  P.NMPRODUTO' + #13#10 +
    'END' + #13#10 +
    'IF @OPCAO = 7' + #13#10 +
    'BEGIN' + #13#10 +
    'SELECT  P.CDPRODUTO AS CÓDIGO,P.CDFABRICANTE AS CÓDIGO_BARRAS,P.DSREFERENCIA AS REFERÊNCIA,' + #13#10 +
    'P.NMPRODUTO AS DESCRIÇÃO,W.NMPESSOA AS FABRICANTE,P.VLATACADO AS VALOR,P.VLPRECO AS PRECO,P.CDCODIGODIC,' + #13#10 +
    'P.DSPRATELEIRA AS PRATELEIRA,P.NRQTDREAL AS ESTOQUE,P.NRQTDCONTAB AS PEDIDO,' + #13#10 +
    'P.DSUNIDADE AS UNIDADE,P.DSEMBALAGEM AS EMBALAGEM,P.NRPESO AS PESO,G.NMGRUPO AS GRUPO,' + #13#10 +
    'P.CDPESSOA AS FORNECEDOR,P.DSPROMOCAO,P.DSPROMOCAOVAREJO,P.NRQTDPROMOCAO,P.dsAtivo,P.dsCFOPD,P.dsCFOPF' + #13#10 +
    'FROM 	LANCTO L WITH (NOLOCK)  INNER JOIN ITELCTO I WITH (NOLOCK)' + #13#10 +
    'ON I.DSLANCAMENTO = L.DSLANCAMENTO' + #13#10 +
    'AND I.CDPESSOA = L.CDPESSOA' + #13#10 +
    'INNER JOIN PRODUTO P WITH (NOLOCK) ON P.CDPRODUTO = I.CDPRODUTO AND NOT(P.DSTIPO_ITEM IN (''07'',''08'',''10''))' + #13#10 +
    'INNER JOIN GRUPO G WITH(nolock) ON G.CDGRUPO = P.CDGRUPO' + #13#10 +
    'INNER JOIN PESSOA W WITH (NOLOCK) ON P.CDPESSOA_1 = W.CDPESSOA' + #13#10 +
    'WHERE 	(L.DSSTATUS IN (''E'',''F'',''X''))' + #13#10 +
    'AND (I.DSSTATUS IN (''E'',''F'',''X''))' + #13#10 +
    'AND (L.dsCancelado is null or L.dsCancelado in (''G'',''D''))' + #13#10 +
    'AND L.DSLANCAMENTO = @LANCAMENTO' + #13#10 +
    'AND L.CDPESSOA = @PESSOA' + #13#10 +
    'AND (P.CDPRODUTO LIKE @CDPRODUTO +''%'' OR @CDPRODUTO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE @NMPRODUTO +''%'' OR @NMPRODUTO IS NULL)' + #13#10 +
    'AND (P.DSREFERENCIA LIKE @DSREFERENCIA +''%'' OR @DSREFERENCIA IS NULL)' + #13#10 +
    'AND (P.CDCODIGODIC LIKE @CDCODIGODIC +''%'' OR @CDCODIGODIC IS NULL)' + #13#10 +
    'AND (G.NMGRUPO LIKE @NMGRUPO +''%'' OR @NMGRUPO IS NULL)' + #13#10 +
    'AND (P.NMPRODUTO LIKE ''%''+ @NMPRODUTO2 +''%'' OR @NMPRODUTO2 IS NULL)' + #13#10 +
    'AND (P.CDFABRICANTE = @C_BARRAS OR @C_BARRAS IS NULL) AND I.DSCANCELADO IS NULL' + #13#10 +
    'ORDER BY P.CDPRODUTO' + #13#10 +
    'END';
    Execute;
    end; }
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasJALVES_Grande;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0808');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('1F4407600120090' + SgDados.Cells[6, L] + ''); // barra
    Editor.Lines.Add('192300101680102' + trim(Copy(SgDados.Cells[1, L], 1, 19))
      + ''); // descricao
    Editor.Lines.Add('191100602000139' + 'R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + ''); // valor
    Editor.Lines.Add('191100501110145' + 'Cod.' + SgDados.Cells[0, L] + '');
    // codigo
    Editor.Lines.Add('192200202360111' + 'HIPER J. ALVES'); // codigo
    Editor.Lines.Add('192300101350102' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      + ''); // descricao
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('^' + FormatFloat('0', vqtd));
    Editor.Lines.Add('Q' + FormatFloat('000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasDIEGOCUNHA_GONDOLA;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    // Editor.Lines.Add('N');
    // Editor.Lines.Add('R0,0');
    // Editor.Lines.Add('ZB');
    // Editor.Lines.Add('I8,0,001');
    // Editor.Lines.Add('q840');
    // Editor.Lines.Add('JY0000Kf00D11');
    // Editor.Lines.Add('S3');
    // Editor.Lines.Add('O');
    // Editor.Lines.Add('JB');
    // Editor.Lines.Add('JF');
    // Editor.Lines.Add('A144,36,0,4,1,1,N,"'+SgDados.Cells[1,L]+'"'); //descricao
    // Editor.Lines.Add('A438,178,0,3,1,1,N,"R$"');
    // Editor.Lines.Add('A476,178,0,5,1,1,N,"'+formatfloat('0.00',strtofloat(SgDados.Cells[3,L]))+'"'); //valor
    // Editor.Lines.Add('Q200,0');
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A114,5,0,2,1,1,N,"' + 'Codigo: ' + SgDados.Cells[0, L] +
      '"'); // codigo
    Editor.Lines.Add('A114,25,0,1,2,2,N,"' + SgDados.Cells[1, L] + '"');
    // descricao
    // Editor.Lines.Add('A114,42,0,4,1,1,N,"'+SgDados.Cells[10,L]+'"'); //unidade
    Editor.Lines.Add('A333,125,0,5,1,1,N,"R$"');
    Editor.Lines.Add('A405,81,0,5,1,2,N,"' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    // Editor.Lines.Add('B110,70,0,1,3,6,95,N,"'+SgDados.Cells[6,L]+'"');//codigo de barras
    // Editor.Lines.Add('A207,169,0,3,1,1,N,"'+SgDados.Cells[6,L]+'"');
    Editor.Lines.Add('Q200,24');

    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasDIEGOCUNHA_3COLUNAS;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q856');
    Editor.Lines.Add('JY0000Kf00D11');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('B20,61,0,1,3,6,55,N,"' + SgDados.Cells[0, L] + '"');
    // codigo
    Editor.Lines.Add('A16,0,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A16,30,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 20) +
      '"'); // descricao
    Editor.Lines.Add('A16,121,0,2,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // codigo
    Editor.Lines.Add('A16,140,0,3,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor

    Editor.Lines.Add('B300,61,0,1,3,6,55,N,"' + SgDados.Cells[0, L] + '"');
    // codigo
    Editor.Lines.Add('A296,0,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A296,30,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 20) +
      '"'); // descricao
    Editor.Lines.Add('A296,121,0,2,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // codigo
    Editor.Lines.Add('A296,140,0,3,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('JF');

    Editor.Lines.Add('B579,61,0,1,3,6,55,N,"' + SgDados.Cells[0, L] + '"');
    // codigo
    Editor.Lines.Add('A575,0,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A575,30,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 20) +
      '"'); // descricao
    Editor.Lines.Add('A575,121,0,2,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // codigo
    Editor.Lines.Add('A575,140,0,3,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor

    Editor.Lines.Add('Q176,24');

    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;

    // vQtd := StrToFloat(SgDados.Cells[2,L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasVIVA_GONDOLA_PEQUENA;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q560');
    Editor.Lines.Add('JY0000Kf00');
    Editor.Lines.Add('D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A133,8,0,4,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A133,42,0,4,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 20) +
      '"'); // descricao
    Editor.Lines.Add('A389,146,0,3,1,1,N,"' + 'R$ '+'"'); // valor
    Editor.Lines.Add('A425,125,0,4,1,2,N,"' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B133,89,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // barra
    Editor.Lines.Add('A159,176,0,3,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // barra

    Editor.Lines.Add('Q240,16');

    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0', vqtd));
    Editor.Lines.Add('');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
      'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasVIVA_3COLUNAS;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');

    Editor.Lines.Add('A29,23,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A29,51,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 20) +
      '"'); // descricao
    Editor.Lines.Add('A29,76,0,3,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A27,2,0,2,1,1,N,"' + SgDados.Cells[0, L] + '"'); // codigo
    Editor.Lines.Add('B24,97,0,1,2,4,49,N,"' + SgDados.Cells[6, L] + '"');
    // barra
    Editor.Lines.Add('A65,150,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // barra

    Editor.Lines.Add('A309,23,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A309,51,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 20) +
      '"'); // descricao
    Editor.Lines.Add('A309,76,0,3,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A307,2,0,2,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // codigo
    Editor.Lines.Add('B304,97,0,1,2,4,49,N,"' + SgDados.Cells[6, L] + '"');
    // barra
    Editor.Lines.Add('A345,150,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // barra

    Editor.Lines.Add('JF');

    Editor.Lines.Add('A588,23,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A588,51,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 20) +
      '"'); // descricao
    Editor.Lines.Add('A588,76,0,3,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A586,2,0,2,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // codigo
    Editor.Lines.Add('B583,97,0,1,2,4,49,N,"' + SgDados.Cells[6, L] + '"');
    // barra
    Editor.Lines.Add('A624,150,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // barra

    Editor.Lines.Add('Q184,24');

    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;

  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasAquarium;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''20.0 mm''></xpml>n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('D');
    Editor.Lines.Add
      ('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''20.0 mm''></xpml>L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('1911A0600680015' +
      Copy(trim(SgDados.Cells[1, L]), 1, 19));
    Editor.Lines.Add('1911A0600590015' +
      Copy(trim(SgDados.Cells[1, L]), 20, 40));
    Editor.Lines.Add('1911A0800400015R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('1f4202800120020' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1911A0600020012' + Copy(SgDados.Cells[6, L], 1, 1));
    // coloquei essa linha para testar o cod barras - kenneth
    Editor.Lines.Add('1911A0600020025' + Copy(SgDados.Cells[6, L], 2, 1));
    Editor.Lines.Add('1911A0600020032' + Copy(SgDados.Cells[6, L], 3, 1));
    Editor.Lines.Add('1911A0600020039' + Copy(SgDados.Cells[6, L], 4, 1));
    Editor.Lines.Add('1911A0600020046' + Copy(SgDados.Cells[6, L], 5, 1));
    Editor.Lines.Add('1911A0600020053' + Copy(SgDados.Cells[6, L], 6, 1));
    Editor.Lines.Add('1911A0600020060' + Copy(SgDados.Cells[6, L], 7, 1));
    Editor.Lines.Add('1911A0600020070' + Copy(SgDados.Cells[6, L], 8, 1));
    Editor.Lines.Add('1911A0600020077' + Copy(SgDados.Cells[6, L], 9, 1));
    Editor.Lines.Add('1911A0600020084' + Copy(SgDados.Cells[6, L], 10, 1));
    Editor.Lines.Add('1911A0600020091' + Copy(SgDados.Cells[6, L], 11, 1));
    Editor.Lines.Add('1911A0600020099' + Copy(SgDados.Cells[6, L], 12, 1));
    Editor.Lines.Add('1911A0600020105' + Copy(SgDados.Cells[6, L], 13, 1));
    // Editor.Lines.Add('1911A0600020012'+Copy(SgDados.Cells[6,L],1,1));   //comentei essa linha
    Editor.Lines.Add('1911A0600680158' +
      Copy(trim(SgDados.Cells[1, L]), 1, 19));
    Editor.Lines.Add('1911A0600590158' +
      Copy(trim(SgDados.Cells[1, L]), 20, 40));
    Editor.Lines.Add('1f4202800120164' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1911A0600020155' + Copy(SgDados.Cells[6, L], 1, 1));
    // coloquei
    Editor.Lines.Add('1911A0600020168' + Copy(SgDados.Cells[6, L], 2, 1));
    Editor.Lines.Add('1911A0600020175' + Copy(SgDados.Cells[6, L], 3, 1));
    Editor.Lines.Add('1911A0600020182' + Copy(SgDados.Cells[6, L], 4, 1));
    Editor.Lines.Add('1911A0600020190' + Copy(SgDados.Cells[6, L], 5, 1));
    Editor.Lines.Add('1911A0600020197' + Copy(SgDados.Cells[6, L], 6, 1));
    Editor.Lines.Add('1911A0600020203' + Copy(SgDados.Cells[6, L], 7, 1));
    Editor.Lines.Add('1911A0600020214' + Copy(SgDados.Cells[6, L], 8, 1));
    Editor.Lines.Add('1911A0600020221' + Copy(SgDados.Cells[6, L], 9, 1));
    Editor.Lines.Add('1911A0600020228' + Copy(SgDados.Cells[6, L], 10, 1));
    Editor.Lines.Add('1911A0600020234' + Copy(SgDados.Cells[6, L], 11, 1));
    Editor.Lines.Add('1911A0600020242' + Copy(SgDados.Cells[6, L], 12, 1));
    Editor.Lines.Add('1911A0600020249' + Copy(SgDados.Cells[6, L], 13, 1));
    // Editor.Lines.Add('1911A0600020155'+Copy(SgDados.Cells[6,L],1,1));  //comentei
    Editor.Lines.Add('1911A0600680299' +
      Copy(trim(SgDados.Cells[1, L]), 1, 19));
    Editor.Lines.Add('1911A0600590299' +
      Copy(trim(SgDados.Cells[1, L]), 20, 40));
    Editor.Lines.Add('1f4202800120308' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1911A0600020299' + Copy(SgDados.Cells[6, L], 1, 1));
    // coloquei essa linha
    Editor.Lines.Add('1911A0600020312' + Copy(SgDados.Cells[6, L], 2, 1));
    Editor.Lines.Add('1911A0600020319' + Copy(SgDados.Cells[6, L], 3, 1));
    Editor.Lines.Add('1911A0600020326' + Copy(SgDados.Cells[6, L], 4, 1));
    Editor.Lines.Add('1911A0600020334' + Copy(SgDados.Cells[6, L], 5, 1));
    Editor.Lines.Add('1911A0600020340' + Copy(SgDados.Cells[6, L], 6, 1));
    Editor.Lines.Add('1911A0600020348' + Copy(SgDados.Cells[6, L], 7, 1));
    Editor.Lines.Add('1911A0600020358' + Copy(SgDados.Cells[6, L], 8, 1));
    Editor.Lines.Add('1911A0600020365' + Copy(SgDados.Cells[6, L], 9, 1));
    Editor.Lines.Add('1911A0600020371' + Copy(SgDados.Cells[6, L], 10, 1));
    Editor.Lines.Add('1911A0600020378' + Copy(SgDados.Cells[6, L], 11, 1));
    Editor.Lines.Add('1911A0600020386' + Copy(SgDados.Cells[6, L], 12, 1));
    Editor.Lines.Add('1911A0600020393' + Copy(SgDados.Cells[6, L], 13, 1));
    // Editor.Lines.Add('1911A0600020299'+Copy(SgDados.Cells[6,L],1,1)); //comentei
    Editor.Lines.Add('1911A0800400158R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('1911A0800400300R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('1Y1100000360060PB1');
    Editor.Lines.Add('1Y1100000360205PB1');
    Editor.Lines.Add('1Y1100000360346PB1');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('^' + FormatFloat('0', vqtd));
    Editor.Lines.Add('Q' + FormatFloat('000', vqtd));
    Editor.Lines.Add('E');
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasFarofaChicBijoux;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''21.0 mm''></xpml>I8,A');
    Editor.Lines.Add('q831');
    Editor.Lines.Add('OD');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q168,25');
    Editor.Lines.Add
      ('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''21.0 mm''></xpml>N');
    Editor.Lines.Add('A744,115,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A809,36,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 20)+'"');
    Editor.Lines.Add('B817,87,2,1,2,4,40,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A809,147,2,1,1,2,N,"FAROFA CHIC BIJOUX"');
    Editor.Lines.Add('A456,115,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A521,36,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 20)+'"');
    Editor.Lines.Add('B529,87,2,1,2,4,40,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A521,147,2,1,1,2,N,"FAROFA CHIC BIJOUX"');
    Editor.Lines.Add('A169,115,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A234,36,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 20)+'"');
    Editor.Lines.Add('B245,87,2,1,2,4,40,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A234,147,2,1,1,2,N,"FAROFA CHIC BIJOUX"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('000', vqtd));
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasCasaDasPickups;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''30.0 mm''></xpml>I8,A');
    Editor.Lines.Add('q831');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q240,25');
    Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''30.0 mm''></xpml>N');
    Editor.Lines.Add('A776,146,2,4,2,2,N,"COD: '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A776,218,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 27)+'"');
    Editor.Lines.Add('A776,191,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 28, 20)+'"');
    Editor.Lines.Add('A776,39,2,1,1,2,N,"PRAT: '+p.prateleira+'"');
    Editor.Lines.Add('A776,73,2,1,1,2,N,"REF: '+p.referenciaInterna+'"');
    Editor.Lines.Add('A350,146,2,4,2,2,N,"COD: '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A350,218,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 27)+'"');
    Editor.Lines.Add('A350,191,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 28, 20)+'"');
    Editor.Lines.Add('A350,39,2,1,1,2,N,"PRAT: '+p.prateleira+'"');
    Editor.Lines.Add('A350,73,2,1,1,2,N,"REF: '+p.referenciaInterna+'"');
    FreeAndNil(p);
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 2) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 2
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 2) + 1;
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasJNUNES_Gondola;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''30.0 mm''></xpml>I8,1,001');
    Editor.Lines.Add('q819');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q240,25');
    Editor.Lines.Add
      ('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''30.0 mm''></xpml>N');
    Editor.Lines.Add('A768,141,2,4,1,1,N,"'+SgDados.Cells[1, L]+'"');
    Editor.Lines.Add('A768,104,2,4,1,1,N,"CODIGO: '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A389,100,2,4,2,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A389,36,2,4,1,1,N,"REF.: '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('A712,196,2,4,1,1,N,"JNUNES MATERIAL DE CONSTRUCAO - FILIAL"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('000', vqtd));
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasJNUNES_3COL;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q160,25');
    Editor.Lines.Add('N');
    Editor.Lines.Add('A796,158,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 20)+'"');
    Editor.Lines.Add('A796,129,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 21, 20)+'"');
    Editor.Lines.Add('A662,51,2,1,1,2,N,"C. '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A812,96,2,1,1,2,N,"REF: '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('A812,63,2,3,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A508,158,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 20)+'"');
    Editor.Lines.Add('A508,129,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 21, 20)+'"');
    Editor.Lines.Add('A374,51,2,1,1,2,N,"C. '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A524,96,2,1,1,2,N,"REF: '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('A524,63,2,3,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A221,158,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 20)+'"');
    Editor.Lines.Add('A221,129,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 21, 20)+'"');
    Editor.Lines.Add('A87,51,2,1,1,2,N,"C. '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A237,96,2,1,1,2,N,"REF: '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('A237,63,2,3,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('000', vqtd));

//    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''15.0 mm''></xpml>I8,1,001');
//    Editor.Lines.Add('q715');
//    Editor.Lines.Add('OD');
//    Editor.Lines.Add('JF');
//    Editor.Lines.Add('WN');
//    Editor.Lines.Add('D15');
//    Editor.Lines.Add('ZT');
//    Editor.Lines.Add('Q120,25');
//    Editor.Lines.Add
//      ('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''15.0 mm''></xpml>N');
//    Editor.Lines.Add('A679,114,2,3,1,1,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 15)+'"');
//    Editor.Lines.Add('A679,73,2,3,1,1,N,"COD. '+SgDados.Cells[0, L]+'"');
//    Editor.Lines.Add('A679,50,2,3,1,1,N,"REF. '+SgDados.Cells[7, L]+'"');
//    Editor.Lines.Add('A679,31,2,3,1,1,N,"R$ '+SgDados.Cells[3, L]+'"');
//    Editor.Lines.Add('A679,96,2,3,1,1,N,"'+Copy(trim(SgDados.Cells[1, L]), 16, 15)+'"');
//    Editor.Lines.Add('A444,114,2,3,1,1,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 15)+'"');
//    Editor.Lines.Add('A444,73,2,3,1,1,N,"COD. '+SgDados.Cells[0, L]+'"');
//    Editor.Lines.Add('A444,50,2,3,1,1,N,"REF. '+SgDados.Cells[7, L]+'"');
//    Editor.Lines.Add('A444,31,2,3,1,1,N,"R$ '+SgDados.Cells[3, L]+'"');
//    Editor.Lines.Add('A444,96,2,3,1,1,N,"'+Copy(trim(SgDados.Cells[1, L]), 16, 15)+'"');
//    Editor.Lines.Add('A209,114,2,3,1,1,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 15)+'"');
//    Editor.Lines.Add('A209,73,2,3,1,1,N,"COD. '+SgDados.Cells[0, L]+'"');
//    Editor.Lines.Add('A209,50,2,3,1,1,N,"REF. '+SgDados.Cells[7, L]+'"');
//    Editor.Lines.Add('A209,31,2,3,1,1,N,"R$ '+SgDados.Cells[3, L]+'"');
//    Editor.Lines.Add('A209,96,2,3,1,1,N,"'+Copy(trim(SgDados.Cells[1, L]), 16, 15)+'"');
//    vqtd := StrToFloat(SgDados.Cells[2, L]);
//    Editor.Lines.Add('P' + FormatFloat('000', vqtd));
//    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;


procedure TFrmPrincipalPreVenda.ImprimeEtiquetasRITMOS;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''24.0 mm''></xpml>I8,1,001');
    Editor.Lines.Add('q827');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('D8');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q192,25');
    Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''24.0 mm''></xpml>N');
    Editor.Lines.Add('A798,177,2,4,1,1,N,"RITMOS"');
    Editor.Lines.Add('A798,145,2,2,1,1,N,"CD'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A798,126,2,2,1,1,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 19)+'"');
    Editor.Lines.Add('A798,107,2,2,1,1,N,"'+Copy(trim(SgDados.Cells[1, L]), 20, 19)+'"');
    Editor.Lines.Add('A702,152,2,4,1,1,N,"R$'+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('B777,84,2,3,2,5,53,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A712,26,2,2,1,1,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A520,177,2,4,1,1,N,"RITMOS"');
    Editor.Lines.Add('A520,145,2,2,1,1,N,"CD'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A520,126,2,2,1,1,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 19)+'"');
    Editor.Lines.Add('A520,107,2,2,1,1,N,"'+Copy(trim(SgDados.Cells[1, L]), 20, 19)+'"');
    Editor.Lines.Add('A424,152,2,4,1,1,N,"R$'+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('B499,84,2,3,2,5,53,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A434,26,2,2,1,1,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A241,177,2,4,1,1,N,"RITMOS"');
    Editor.Lines.Add('A241,145,2,2,1,1,N,"CD'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A241,126,2,2,1,1,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 19)+'"');
    Editor.Lines.Add('A241,107,2,2,1,1,N,"'+Copy(trim(SgDados.Cells[1, L]), 20, 19)+'"');
    Editor.Lines.Add('A145,152,2,4,1,1,N,"R$'+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('B220,84,2,3,2,5,53,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A155,26,2,2,1,1,N,"'+SgDados.Cells[0, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('000', vqtd));
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasSA;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''30.0 mm''></xpml>n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('D');
    Editor.Lines.Add
      ('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''30.0 mm''></xpml>L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('1911A1000940015' +
      Copy(trim(SgDados.Cells[1, L]), 1, 19));
    Editor.Lines.Add('1911A1000780015' +
      Copy(trim(SgDados.Cells[1, L]), 20, 40));

    Editor.Lines.Add('1f6303600230015' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1911A1000060015' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1911A1000060226' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1f6303600230226' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1911A1200610015R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('1911A1200610226R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('Q' + FormatFloat('000', vqtd));
    Editor.Lines.Add('E');
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasCruzeiro;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('q819');
    Editor.Lines.Add('Q240,25');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('A140,8,0,2,1,2,N,"'+(SgDados.Cells[0, L])+'"');
    Editor.Lines.Add('A208,8,0,2,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 40)+'"');
    Editor.Lines.Add('A140,48,0,2,1,2,N,"'+Produto.unidade.dsDescricaoUnidade+'"');
    Editor.Lines.Add('B238,136,0,1,3,5,40,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A304,186,0,4,1,1,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A315,48,0,2,2,5,N,"R$ '+FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    //Editor.Lines.Add('E');
    //Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasMiniMercadoBemBaratinho;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q240,12');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('A64,0,0,4,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 40)+'"');
    Editor.Lines.Add('A64,52,0,4,1,2,N,"'+Produto.unidade.dsDescricaoUnidade+'"');
    Editor.Lines.Add('A240,85,0,4,2,4,N,"R$ '+FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    //Editor.Lines.Add('E');
    //Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasCOISABOA;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('q460');
    Editor.Lines.Add('Q240,2');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('');
    Editor.Lines.Add('A24,16,0,4,1,1,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 19)+'"');
    Editor.Lines.Add('A24,48,0,4,1,1,N,"'+Copy(trim(SgDados.Cells[1, L]), 20, 40)+'"');
    Editor.Lines.Add('A24,80,0,4,1,1,N,"'+Produto.unidade.dsDescricaoUnidade+'"');
    Editor.Lines.Add('A74,112,0,5,1,2,N,"R$ '+FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    //Editor.Lines.Add('E');
    //Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasCHALOC_Lingerie;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q168,25');
    Editor.Lines.Add('N');
    Editor.Lines.Add('A791,164,2,1,1,2,N,"'+SgDados.Cells[1, L]+'"');
    Editor.Lines.Add('A791,136,2,1,1,2,N,"COD. '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A672,136,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A791,106,2,1,1,2,N,"FAB. '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('B777,72,2,E30,2,4,39,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A731,30,2,1,1,1,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A501,164,2,1,1,2,N,"'+SgDados.Cells[1, L]+'"');
    Editor.Lines.Add('A501,136,2,1,1,2,N,"COD. '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A382,136,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A501,106,2,1,1,2,N,"FAB. '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('B487,72,2,E30,2,4,39,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A441,30,2,1,1,1,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A210,164,2,1,1,2,N,"'+SgDados.Cells[1, L]+'"');
    Editor.Lines.Add('A210,136,2,1,1,2,N,"COD. '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A91,136,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A210,106,2,1,1,2,N,"FAB. '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('B205,72,2,E30,2,4,39,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A150,30,2,1,1,1,N,"'+SgDados.Cells[6, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    //Editor.Lines.Add('E');
    //Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasCHALOC_Tecidos;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q168,25');
    Editor.Lines.Add('N');
    Editor.Lines.Add('A792,161,2,1,1,2,N,"'+SgDados.Cells[1, L]+'"');
    Editor.Lines.Add('A792,123,2,1,1,2,N,"COD. '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A792,83,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A792,43,2,1,1,2,N,"FAB. '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('A502,161,2,1,1,2,N,"'+SgDados.Cells[1, L]+'"');
    Editor.Lines.Add('A502,123,2,1,1,2,N,"COD. '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A502,83,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A502,43,2,1,1,2,N,"FAB. '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('A211,161,2,1,1,2,N,"'+SgDados.Cells[1, L]+'"');
    Editor.Lines.Add('A211,123,2,1,1,2,N,"COD. '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A211,83,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A211,43,2,1,1,2,N,"FAB. '+SgDados.Cells[7, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    //Editor.Lines.Add('E');
    //Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasSaboresDaVila;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('q660');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q200,25');
    Editor.Lines.Add('N');
    Editor.Lines.Add('A469,125,2,2,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A641,195,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 19)+'"');
    Editor.Lines.Add('A634,120,2,1,1,2,N,"VAL. '+SgDados.Cells[5, L]+'"');
    Editor.Lines.Add('B668,73,2,E30,3,6,39,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A566,26,2,1,1,1,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A641,166,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 20, 40)+'"');
    Editor.Lines.Add('A297,195,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 1, 19)+'"');
    Editor.Lines.Add('A125,125,2,2,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A290,120,2,1,1,2,N,"VAL. '+SgDados.Cells[5, L]+'"');
    Editor.Lines.Add('B324,73,2,E30,3,6,39,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A222,26,2,1,1,1,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A297,166,2,1,1,2,N,"'+Copy(trim(SgDados.Cells[1, L]), 20, 40)+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    //Editor.Lines.Add('E');
    //Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasLaCasaDecor;
var
  L, I, pont: Integer;
  Arq: TextFile;
  vqtd: Real;
  prodEtiq : TProdutoEtiqueta;
  lstEtiqueta : TList<TProdutoEtiqueta>;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  lstEtiqueta := TList<TProdutoEtiqueta>.Create;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    for I := 1 to Round(StrtoFloat(SgDados.Cells[2, L])) do begin
      prodEtiq := TProdutoEtiqueta.Create;
      prodEtiq.cdProduto := StrtoInt(SgDados.Cells[0, L]);
      prodEtiq.nmProduto := Copy(trim(SgDados.Cells[1, L]), 1, 20);
      prodEtiq.vlPreco := StrToCurr(FormatFloat('0.00',StrToFloat(SgDados.Cells[3, L])));
      prodEtiq.dsReferencia := SgDados.Cells[7, L];
      lstEtiqueta.Add(prodEtiq);
    end;
  end;
  pont := 0;
  for L := 0 to lstEtiqueta.Count - 1 do
  begin // Salvando os itens da pré-venda.
    if L < pont then continue;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q168,25');
    Editor.Lines.Add('N');

    Editor.Lines.Add('A802,154,2,1,1,2,N,"'+lstEtiqueta[L].nmProduto+'"');
    Editor.Lines.Add('A802,101,2,1,1,2,N,"COD: '+IntToStr(lstEtiqueta[pont].cdProduto)+'"');
    Editor.Lines.Add('A802,51,2,1,1,2,N,"REF. FAB: '+lstEtiqueta[pont].dsReferencia+'"');
    Editor.Lines.Add('A676,101,2,1,1,2,N,"R$ '+FloattoStr(lstEtiqueta[pont].vlPreco)+'"');
    try
      if lstEtiqueta[pont+1] <> nil then begin
        Editor.Lines.Add('A512,51,2,1,1,2,N,"REF. FAB: '+lstEtiqueta[pont+1].dsReferencia+'"');
        Editor.Lines.Add('A512,154,2,1,1,2,N,"'+lstEtiqueta[pont+1].nmProduto+'"');
        Editor.Lines.Add('A512,101,2,1,1,2,N,"COD: '+IntToStr(lstEtiqueta[pont+1].cdProduto)+'"');
        Editor.Lines.Add('A386,101,2,1,1,2,N,"R$ '+FloattoStr(lstEtiqueta[pont+1].vlPreco)+'"');
      end;
    except

    end;
    try
      if lstEtiqueta[pont+2] <> nil then begin
        Editor.Lines.Add('A223,51,2,1,1,2,N,"REF. FAB: '+lstEtiqueta[pont+2].dsReferencia+'"');
        Editor.Lines.Add('A223,154,2,1,1,2,N,"'+lstEtiqueta[pont+2].nmProduto+'"');
        Editor.Lines.Add('A223,101,2,1,1,2,N,"COD: '+IntToStr(lstEtiqueta[pont+2].cdProduto)+'"');
        Editor.Lines.Add('A97,101,2,1,1,2,N,"R$ '+FloattoStr(lstEtiqueta[pont+2].vlPreco)+'"');
      end;
    except

    end;

//    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
//      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
//    else
//      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
//        div 3) + 1;
//    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1');
    pont := pont + 3;
    //Editor.Lines.Add('E');
    //Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasLosSantos;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('q832');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q216,25');
    Editor.Lines.Add('N');
    //Editor.Lines.Add('A2');
    Editor.Lines.Add('B753,118,2,E30,4,8,60,N,"' + SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A634,38,2,4,1,1,N,"' + SgDados.Cells[6, L]+'"');
    //Editor.Lines.Add('1e6304300200207C' + Copy(trim(SgDados.Cells[6, L]), 1, 12)+'&E'+Copy(trim(SgDados.Cells[6, L]), 13, 1));
    //Editor.Lines.Add('1911A1200010238' + SgDados.Cells[6, L]);
    Editor.Lines.Add('A302,110,2,4,2,2,N,"R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('A721,200,2,4,1,1,N,"' + Copy(trim(RetirarAcento(SgDados.Cells[1, L])), 1, 40)+'"');
    Editor.Lines.Add('A721,164,2,4,1,1,N,"' + SgDados.Cells[10, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    //Editor.Lines.Add('E');
    //Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasLosSantos_3Colunas;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('q819');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q184,25');
    Editor.Lines.Add('N');
    Editor.Lines.Add('A789,173,2,1,1,2,N,"'+Copy(trim(RetirarAcento(SgDados.Cells[1, L])), 1, 20)+'"');
    Editor.Lines.Add('A789,141,2,1,1,2,N,"COD. '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A670,141,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A789,106,2,1,1,2,N,"FAB. '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('B800,74,2,E30,2,4,39,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A754,28,2,1,1,1,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A511,173,2,1,1,2,N,"'+Copy(trim(RetirarAcento(SgDados.Cells[1, L])), 1, 20)+'"');
    Editor.Lines.Add('A511,141,2,1,1,2,N,"COD. '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A392,141,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A511,106,2,1,1,2,N,"FAB. '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('B522,74,2,E30,2,4,39,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A476,28,2,1,1,1,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A232,173,2,1,1,2,N,"'+Copy(trim(RetirarAcento(SgDados.Cells[1, L])), 1, 20)+'"');
    Editor.Lines.Add('A232,141,2,1,1,2,N,"COD. '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A113,141,2,1,1,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A232,106,2,1,1,2,N,"FAB. '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('B243,74,2,E30,2,4,39,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A197,28,2,1,1,1,N,"'+SgDados.Cells[6, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    //Editor.Lines.Add('E');
    //Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasSUAQUITANDA;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('D');
    Editor.Lines.Add('L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    //Editor.Lines.Add('1911A1200850030' + Copy(trim(SgDados.Cells[1, L]), 1, 19));
    //Editor.Lines.Add('1e6304300200207C' + Copy(trim(SgDados.Cells[6, L]), 1, 12)+'&E'+Copy(trim(SgDados.Cells[6, L]), 13, 1));
    //Editor.Lines.Add('1911A1200010238' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1922A1800140197R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('1911A1200740032' + Copy(trim(RetirarAcento(SgDados.Cells[1, L])), 1, 40));
    Editor.Lines.Add('1911A1400510032' + SgDados.Cells[10, L]);
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + FormatFloat('000', vqtd));
    Editor.Lines.Add('E');
    //Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasJABUTIANA;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f326');
    Editor.Lines.Add('D');
    Editor.Lines.Add('L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('1912A0800810046'+Copy(trim(RetirarAcento(SgDados.Cells[1, L])), 1, 40));
    Editor.Lines.Add('1912A1800140246R$ '+FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('1912A0800610046'+SgDados.Cells[10, L]);
    Editor.Lines.Add('1e6302700250045C' + Copy(trim(SgDados.Cells[6, L]), 1, 12)+'&E'+Copy(trim(SgDados.Cells[6, L]), 13, 1));
    Editor.Lines.Add('1911A1000090086' + SgDados.Cells[6, L]);
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + FormatFloat('000', vqtd));
    Editor.Lines.Add('E');
    //Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasSA_Gondola;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''30.0 mm''></xpml>n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('D');
    Editor.Lines.Add
      ('<xpml></page></xpml><xpml><page quantity=''4'' pitch=''30.0 mm''></xpml>L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    //Editor.Lines.Add('1911A1200850030' + Copy(trim(SgDados.Cells[1, L]), 1, 19));
    Editor.Lines.Add('1e6304300200207C' + Copy(trim(SgDados.Cells[6, L]), 1, 12)+'&E'+Copy(trim(SgDados.Cells[6, L]), 13, 1));
    Editor.Lines.Add('1911A1200010238' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1911A1800120030R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('1911A1200670030' + Copy(trim(SgDados.Cells[1, L]), 1, 40));
    Editor.Lines.Add('1911A1200440030COD.' + SgDados.Cells[0, L]);
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + FormatFloat('000', vqtd));
    Editor.Lines.Add('E');
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasAsaBranca_Gondola;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f326');
    Editor.Lines.Add('D');
    Editor.Lines.Add('L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('');
    Editor.Lines.Add('131100000830024'+SgDados.Cells[1, L]);
    Editor.Lines.Add('131100000670024'+Produto.unidade.unidade);
    Editor.Lines.Add('');
    Editor.Lines.Add('102200000640083Pr. Varejo');
    Editor.Lines.Add('141200000180056R$ '+FormatFloat('0.00',StrtoFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('');
    Editor.Lines.Add('102200000640243Pr. Atacado');
    Editor.Lines.Add('141200000180215R$ '+FormatFLoat('0.00',Produto.vlAtacado));
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + FormatFloat('000', vqtd));
    Editor.Lines.Add('E');
    //Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasAsaBranca_Gondola_Varejo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f326');
    Editor.Lines.Add('D');
    Editor.Lines.Add('L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('');
    Editor.Lines.Add('131100000830024'+SgDados.Cells[1, L]);
    Editor.Lines.Add('131100000670024'+Produto.unidade.unidade);
    Editor.Lines.Add('');
    Editor.Lines.Add('102200000640170Pr. Varejo');
    Editor.Lines.Add('141200000180142R$ '+FormatFloat('0.00',StrtoFloat(SgDados.Cells[3, L])));
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + FormatFloat('000', vqtd));
    Editor.Lines.Add('E');
    //Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasDulalar;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0425');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('131100000810028' + trim(SgDados.Cells[1, L]) + '');
    // descricao
    Editor.Lines.Add('131100000600028COD.:' + SgDados.Cells[0, L] + '');
    // codigo
    Editor.Lines.Add('1F4405300010209' + SgDados.Cells[6, L] + ''); // barra
    Editor.Lines.Add('141100000330028R$.:' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + ''); // valor
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('^' + FormatFloat('0', vqtd));
    Editor.Lines.Add('Q' + FormatFloat('000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasFRUTARIA;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0425');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('131100000810028' + trim(SgDados.Cells[1, L]) + '');
    // descricao
    Editor.Lines.Add('131100000600028COD.:' + SgDados.Cells[0, L] + '');
    // codigo
    Editor.Lines.Add('1F4405300010150' + SgDados.Cells[6, L] + ''); // barra
    Editor.Lines.Add('141100000330028R$.:' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + ''); // valor
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('^' + FormatFloat('0', vqtd));
    Editor.Lines.Add('Q' + FormatFloat('000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasJALVES_Gondola;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q856');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A279,11,0,4,1,1,N,"' + 'HIPER J. ALVES' + '"');
    Editor.Lines.Add('A42,55,0,1,2,2,N,"' + Copy(SgDados.Cells[1, L], 1, 39) +
      '"'); // descricao
    Editor.Lines.Add('A42,80,0,3,1,1,N,"' + 'Cod. ' + SgDados.Cells[0, L] +
      '"'); // CODIGO DO PRODUTO
    Editor.Lines.Add('A44,106,0,3,2,2,N,"' + 'R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B224,150,0,1,3,6,44,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A336,199,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('Q240,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));

    // Editor.Lines.Add('');
    // Editor.Lines.Add('');
    // Editor.Lines.Add('c0000');
    // Editor.Lines.Add('KI503');
    // Editor.Lines.Add('O0220');
    // Editor.Lines.Add('f220');
    // Editor.Lines.Add('KW0416');
    // Editor.Lines.Add('KI7');
    // Editor.Lines.Add('V0');
    // Editor.Lines.Add('L');
    // Editor.Lines.Add('H12');
    // Editor.Lines.Add('PC');
    // Editor.Lines.Add('A2');
    // Editor.Lines.Add('D11');
    // Editor.Lines.Add('1F3302500070118'+SgDados.Cells[6,L]+'');     //barra
    // Editor.Lines.Add('191100400750034'+Trim(Copy(SgDados.Cells[1,L],1,19))+'');     //descricao
    // Editor.Lines.Add('191100500410036'+'R$'+FormatFloat('0.00',strtofloat(SgDados.Cells[3,L]))+'');   //valor
    // Editor.Lines.Add('191100300610035'+'Cod.'+SgDados.Cells[0,L]+''); //codigo
    // Editor.Lines.Add('191100400890139'+'HIPER J. ALVES'); //codigo
    // Cálculo para imprimir a qtd de etiquetas certo
    // if Frac(StrToFloat(SgDados.Cells[2,L])/3) = 0.00 then
    // vQtd := StrToFloat(SgDados.Cells[2,L])/3
    // else vQtd := (StrToint(FormatFloat('0000',StrToFloat(SgDados.Cells[2,L]))) div 3) + 1;
    // Editor.Lines.Add('^'+FormatFloat('0',vQtd));
    // Editor.Lines.Add('Q'+FormatFloat('000',vQtd));
    // Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasONIX_FOLHEADOS;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('      n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('D');
    Editor.Lines.Add('L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('1912A0600360023'+trim(Copy(SgDados.Cells[1, L], 1, 19)));
    Editor.Lines.Add('1912A0800300194R$ '+SgDados.Cells[3, L]);
    Editor.Lines.Add('1912A0600020056COD: '+SgDados.Cells[0, L]);
    Editor.Lines.Add('1912A0600140201'+FormatDateTime('dd/MM/yyyy',Produto.dtCompra));
    Editor.Lines.Add('1912A0600210023'+trim(Copy(SgDados.Cells[1, L], 19, 20)));
//    Editor.Lines.Add('PUTBMP 642,73,"LOGO.BMP"');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q000'+intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasONIX_OURO;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('      n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('D');
    Editor.Lines.Add('L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('1912A0600360023'+trim(Copy(SgDados.Cells[1, L], 1, 19)));
    Editor.Lines.Add('1912A0800300194R$ '+SgDados.Cells[3, L]);
    Editor.Lines.Add('1912A0600020056COD: '+SgDados.Cells[0, L]);
    Editor.Lines.Add('1912A0600140201'+Produto.referenciaInterna);
    Editor.Lines.Add('1912A0600210023'+trim(Copy(SgDados.Cells[1, L], 19, 20)));
//    Editor.Lines.Add('PUTBMP 642,73,"LOGO.BMP"');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q000'+intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
    FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasDONA_SANTA;
var
  L, y: Integer;
  Arq: TextFile;
  vqtd: Real;
  cont: Integer;
  produto : TDOMProduto;
  pessoa : TPessoa;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then

  // SalvaEtiquetas;
  cont := 0;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    cont := cont + 1;
  end;
  if Frac(cont / 2) = 0.00 then
    vqtd := cont / 2
  else
    vqtd := (StrToInt(FormatFloat('0000', cont)) div 2) + 1;
  cont := Trunc(vqtd);
  if cont <= 0 then
    cont := 1;
  Editor.Lines.Clear;
  L := 1;
  for y := 1 to cont do
  begin // Salvando os itens da pré-venda.
    // if SgDados.Cells[0,L] = '' then Break;
    produto := TNEGProduto.buscarProduto(StrtoInt(SgDados.Cells[0,L]));
    Editor.Lines.Add('n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('KI71');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f324');
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('e');
    Editor.Lines.Add('Arglabel 400 30');
    Editor.Lines.Add('exit');
    Editor.Lines.Add('KI81');
    Editor.Lines.Add('D');
    Editor.Lines.Add('L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('1911A1201340030DONA SANTA');
    Editor.Lines.Add('1912A0601150025'+trim(Copy(SgDados.Cells[1, L], 1, 19))+'');
    Editor.Lines.Add('1912A0600980025'+trim(Copy(SgDados.Cells[1, L], 20, 19))+'');
    Editor.Lines.Add('1912A0800690025REF: '+Produto.referenciaFabrica+'');
    Editor.Lines.Add('1912A0800430025R$ '+SgDados.Cells[3, L]+'');
    Editor.Lines.Add('1e4202000210049C'+SgDados.Cells[0, L]+'');
    Editor.Lines.Add('1912A0600030068'+SgDados.Cells[0, L]+'');
    //Editor.Lines.Add('1X1100000330208B189041001001');
    //Editor.Lines.Add('1X1100000340300L001039');

    if SgDados.Cells[0,L+1] <> '' then begin
      produto := TNEGProduto.buscarProduto(StrtoInt(SgDados.Cells[0,L+1]));
      Editor.Lines.Add('1911A1201340196DONA SANTA');
      Editor.Lines.Add('1912A0601150191'+trim(Copy(SgDados.Cells[1, L+1], 1, 19))+'');
      Editor.Lines.Add('1912A0600980191'+trim(Copy(SgDados.Cells[1, L+1], 20, 19))+'');
      Editor.Lines.Add('1912A0800690191REF: '+Produto.referenciaFabrica+'');
      Editor.Lines.Add('1912A0800430191R$ '+SgDados.Cells[3, L+1]+'');
      Editor.Lines.Add('1e4202000210214C'+SgDados.Cells[0, L+1]+'');
      Editor.Lines.Add('1912A0600030234'+SgDados.Cells[0, L+1]+'');
    end;
    Editor.Lines.Add('Q0001');
    Editor.Lines.Add('E');
    L := L + 2;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
  begin
    ShowMessage('Não foi encontrado o arquivo Print.bat');
    exit;
  end;
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasBOXXE;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('q308');
    Editor.Lines.Add('');
    Editor.Lines.Add('D16');
    Editor.Lines.Add('');
    Editor.Lines.Add('OD');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A90,15,0,3,1,2,N,"BOXXE JEANS"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A48,66,0,2,1,1,N,"'+trim(Copy(SgDados.Cells[1, L], 1, 20))+'"');
    Editor.Lines.Add('A48,88,0,2,1,1,N,"'+trim(Copy(SgDados.Cells[1, L], 21, 20))+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('B40,110,0,1,2,4,96,N,"'+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('A118,214,0,2,1,1,N,"Cod. '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A76,246,0,3,1,2,N,"R$ '+FormatFloat('0.00',StrtoFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('A76,286,0,3,1,1,N,"Ref. '+SgDados.Cells[7, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + intToStr(Trunc(vqtd)));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  //GetAndAddLogomarca('ONE');
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasMIXTUDO;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q240,25');
    Editor.Lines.Add('q819');
    Editor.Lines.Add('');
    Editor.Lines.Add('D15');
    Editor.Lines.Add('');
    Editor.Lines.Add('OD');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A230,31,0,4,1,2,N,"'+trim(Copy(SgDados.Cells[1, L], 1, 30))+'"');
    Editor.Lines.Add('A230,82,0,4,1,2,N,"'+trim(Copy(SgDados.Cells[1, L], 31, 10))+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A500,146,0,2,1,2,N,"R$"');
    Editor.Lines.Add('A530,114,0,3,2,4,N,"'+FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('B230,130,0,1,2,4,48,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A286,184,0,1,1,2,N,"'+SgDados.Cells[6, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + intToStr(Trunc(vqtd)));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  GetAndAddLogomarca('ONE');
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasJALVES_Pequena;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0475');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H09');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');

    Editor.Lines.Add('121100000600006' + trim(Copy(SgDados.Cells[1, L], 1, 19))
      + ''); // descricao
    Editor.Lines.Add('121100000490006' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      + ''); // descricao
    Editor.Lines.Add('121100000610150' + trim(Copy(SgDados.Cells[1, L], 1, 19))
      + ''); // descricao
    Editor.Lines.Add('121100000510150' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      + ''); // descricao
    Editor.Lines.Add('121100000610293' + trim(Copy(SgDados.Cells[1, L], 1, 19))
      + ''); // descricao
    Editor.Lines.Add('121100000510293' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      + ''); // descricao
    Editor.Lines.Add('1F2201500050011' + SgDados.Cells[6, L] + ''); // barra
    Editor.Lines.Add('1F2201500050151' + SgDados.Cells[6, L] + ''); // barra
    Editor.Lines.Add('1F2201500050295' + SgDados.Cells[6, L] + ''); // barra
    Editor.Lines.Add('121100000380005' + 'R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + ''); // valor
    Editor.Lines.Add('121100000390150' + 'R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + ''); // valor
    Editor.Lines.Add('121100000390293' + 'R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + ''); // valor
    Editor.Lines.Add('111100000300006' + 'Cod.' + SgDados.Cells[0, L] + '');
    // codigo
    Editor.Lines.Add('111100000310150' + 'Cod.' + SgDados.Cells[0, L] + '');
    // codigo
    Editor.Lines.Add('111100000300293' + 'Cod.' + SgDados.Cells[0, L] + '');
    // codigo
    Editor.Lines.Add('121100000750015' + 'HIPER J. ALVES'); // codigo
    Editor.Lines.Add('121100000750160' + 'HIPER J. ALVES'); // codigo
    Editor.Lines.Add('121100000750304' + 'HIPER J. ALVES'); // codigo
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('^' + FormatFloat('0', vqtd));
    Editor.Lines.Add('Q' + FormatFloat('000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.Visualizarapelidodocliente1Click
  (Sender: TObject);
begin
  if Length(EdtCdCliente.Text) = 0 then
    exit;
  with DModulo.ADOQuery1 do
  begin
    sql.Text :=
      'SELECT dsNaturalidade FROM P_Fisica WITH (NOLOCK) WHERE cdPessoa = :CODIGO';
    Parameters.ParamByName('CODIGO').Value := EdtCdCliente.Text;
    open;
    if (DModulo.ADOQuery1.RecordCount > 0) and
      (trim(DModulo.ADOQuery1.FieldByName('dsNaturalidade').AsString) <> '')
    then
      ShowMessage('O apelido do cliente é: ' + #13#10 +
        DModulo.ADOQuery1.FieldByName('dsNaturalidade').AsString)
    else
    begin
      sql.Text :=
        'SELECT nmContato FROM P_juridica WITH (NOLOCK) WHERE cdPessoa = :CODIGO';
      Parameters.ParamByName('CODIGO').Value := EdtCdCliente.Text;
      open;
      if (DModulo.ADOQuery1.RecordCount > 0) and
        (trim(DModulo.ADOQuery1.FieldByName('nmContato').AsString) <> '') then
        ShowMessage('O apelido do cliente é: ' + #13#10 +
          DModulo.ADOQuery1.FieldByName('nmContato').AsString)
      else
        ShowMessage('O apelido do cliente não encontrado!');
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.Voltarparaotemaoriginal1Click(Sender: TObject);
begin
  { if SkinData1.Active then
    SkinData1.Active := False
    else SkinData1.Active := True; }
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasCaribe;
var
  L, y: Integer;
  Arq: TextFile;
  vqtd: Real;
  cont: Integer;
  imprimir_Com_Preco: Boolean;
  qry: TADOQuery;
  function BuscaPeso(qry: TADOQuery; cdProduto: Integer): Real;
  begin
    with qry do
    begin
      sql.Text :=
        'select nrPeso from produto with(nolock) where cdProduto = :cdProduto ';
      Parameters.ParamByName('cdProduto').Value := cdProduto;
      open;
      result := FieldByName('nrPeso').AsFloat;
      Close;
    end;
  end;

begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  if Application.MessageBox
    ('Imprimir etiqueta com o Preço? (SIM) ou com o Peso? (NAO)', 'Confirmação',
    Mb_YesNo + MB_ICONQUESTION + MB_APPLMODAL) = id_yes then
    imprimir_Com_Preco := True;

  if not imprimir_Com_Preco then
  begin
    qry := TADOQuery.Create(nil);
    qry.Connection := DModulo.Conexao;
  end;
  // SalvaEtiquetas;
  cont := 0;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    cont := cont + 1;
  end;
  if Frac(cont / 3) = 0.00 then
    vqtd := cont / 3
  else
    vqtd := (StrToInt(FormatFloat('0000', cont)) div 3) + 1;
  cont := Trunc(vqtd);
  if cont <= 0 then
    cont := 1;
  Editor.Lines.Clear;
  L := 1;
  for y := 1 to cont do
  begin // Salvando os itens da pré-venda.
    // if SgDados.Cells[0,L] = '' then Break;

    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0394');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    if SgDados.Cells[1, L + 2] <> '' then
      Editor.Lines.Add('211100000540363KARIB')
    else
      Editor.Lines.Add('211100000540363');
    if SgDados.Cells[1, L + 1] <> '' then
      Editor.Lines.Add('211100000540233KARIB')
    else
      Editor.Lines.Add('211100000540233KARIB');
    if SgDados.Cells[1, L + 2] <> '' then
    begin // barras
      // Editor.Lines.Add('^BY2,3,62^FT627,149^BCB,,Y,N');
      Editor.Lines.Add('221100000600326' + FormatFloat('000000',
        StrToFloatDef(SgDados.Cells[0, L + 2], 0))); // barra
      Editor.Lines.Add('4d6302300040361' + FormatFloat('000000',
        StrToFloatDef(SgDados.Cells[0, L + 2], 0))); // barra
    end;
    if SgDados.Cells[1, L + 2] <> '' then
      Editor.Lines.Add('1X1100000060320l00010077'); // palito

    if imprimir_Com_Preco then
      Editor.Lines.Add('421100000400313' + SgDados.Cells[3, L + 2])
    else if SgDados.Cells[0, L + 2] <> '' then
      Editor.Lines.Add('421100000400313' + FormatFloat('0.00',
        BuscaPeso(qry, StrToIntDef(SgDados.Cells[0, L + 2], 0))));
    Editor.Lines.Add('211100000540103KARIB');
    ADOVarejo.Close;
    ADOVarejo.Parameters.ParamByName('cdProduto').Value :=
      StrToIntDef(SgDados.Cells[0, L + 2], 0);
    ADOVarejo.open;

    if imprimir_Com_Preco then // só mostra a ref. se for imprimir com peso
      if SgDados.Cells[1, L + 2] <> '' then
        Editor.Lines.Add('421100000220300REF.' + SoNumeros(FormatFloat('0.00',
          StrToFloatDef(ADOVarejo.FieldByName('vlAtacado').AsString, 0))))
      else
        Editor.Lines.Add('421100000220300');
    if SgDados.Cells[1, L + 1] <> '' then
    begin
      // Editor.Lines.Add('^BY2,3,62^FT371,149^BCB,,Y,N');
      Editor.Lines.Add('221100000590196' + FormatFloat('000000',
        StrToFloatDef(SgDados.Cells[0, L + 1], 0))); // barra
      Editor.Lines.Add('4d6302300040232' + FormatFloat('000000',
        StrToFloatDef(SgDados.Cells[0, L + 1], 0))); // barra
    end;
    Editor.Lines.Add('411100000030273' +
      trim(Copy(SgDados.Cells[1, L + 2], 1, 18)));
    if SgDados.Cells[1, L + 1] <> '' then // palito
      Editor.Lines.Add('1X1100000060191l00010077');
    Editor.Lines.Add('411100000030282' + trim(Copy(SgDados.Cells[1, L + 2],
      18, 18)));
    if imprimir_Com_Preco then
      Editor.Lines.Add('421100000400185' + SgDados.Cells[3, L + 1])
    else if SgDados.Cells[0, L + 1] <> '' then
      Editor.Lines.Add('421100000400185' + FormatFloat('0.00',
        BuscaPeso(qry, StrToIntDef(SgDados.Cells[0, L + 1], 0))));
    Editor.Lines.Add('1X1100000060060l00010077'); // palito
    ADOVarejo.Close;
    ADOVarejo.Parameters.ParamByName('cdProduto').Value :=
      StrToIntDef(SgDados.Cells[0, L + 1], 0);
    ADOVarejo.open;
    if imprimir_Com_Preco then // só mostra a ref. se for imprimir com peso
      if SgDados.Cells[1, L + 1] <> '' then
        Editor.Lines.Add('421100000220172REF.' + SoNumeros(FormatFloat('0.00',
          StrToFloatDef(ADOVarejo.FieldByName('vlAtacado').AsString, 0))))
      else
        Editor.Lines.Add('421100000220172');
    // Editor.Lines.Add('^BY2,3,62^FT107,150^BCB,,Y,N');
    Editor.Lines.Add('221100000610066' + FormatFloat('000000',
      StrToFloatDef(SgDados.Cells[0, L], 0))); // barra
    Editor.Lines.Add('4d6302300040102' + FormatFloat('000000',
      StrToFloatDef(SgDados.Cells[0, L], 0))); // barra
    Editor.Lines.Add('411100000030146' +
      trim(Copy(SgDados.Cells[1, L + 1], 1, 18)));
    if imprimir_Com_Preco then
      Editor.Lines.Add('421100000400054' + SgDados.Cells[3, L])
    else if SgDados.Cells[0, L] <> '' then
      Editor.Lines.Add('421100000400054' + FormatFloat('0.00',
        BuscaPeso(qry, StrToIntDef(SgDados.Cells[0, L], 0))));
    Editor.Lines.Add('411100000030155' + trim(Copy(SgDados.Cells[1, L + 1],
      18, 18)));
    ADOVarejo.Close;
    ADOVarejo.Parameters.ParamByName('cdProduto').Value :=
      StrToIntDef(SgDados.Cells[0, L], 0);
    ADOVarejo.open;
    if imprimir_Com_Preco then // só mostra a ref. se for imprimir com peso
      Editor.Lines.Add('421100000220042REF.' + SoNumeros(FormatFloat('0.00',
        StrToFloatDef(ADOVarejo.FieldByName('vlAtacado').AsString, 0))));
    Editor.Lines.Add('411100000030015' + trim(Copy(SgDados.Cells[1, L],
      1, 18)));
    Editor.Lines.Add('411100000030024' + trim(Copy(SgDados.Cells[1, L],
      18, 18)));
    // Editor.Lines.Add('^PQ1,0,1,Y^XZ');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloatDef(SgDados.Cells[2, L], 0) / 3) = 0.00 then
      vqtd := StrToFloatDef(SgDados.Cells[2, L], 0) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('^01'); // FloatToStr(vQtd)  no lugar do '1'
    Editor.Lines.Add('Q0001');
    Editor.Lines.Add('E');
    L := L + 3;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
  begin
    ShowMessage('Não foi encontrado o arquivo Print.bat');
    exit;
  end;
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  FreeAndNil(qry);
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasJoalheriaFontes;
var
  L, y: Integer;
  Arq: TextFile;
  vqtd: Real;
  cont: Integer;
  produto : TDOMProduto;
  pessoa : TPessoa;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then

  // SalvaEtiquetas;
  cont := 0;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    cont := cont + 1;
  end;
  if Frac(cont / 2) = 0.00 then
    vqtd := cont / 2
  else
    vqtd := (StrToInt(FormatFloat('0000', cont)) div 2) + 1;
  cont := Trunc(vqtd);
  if cont <= 0 then
    cont := 1;
  Editor.Lines.Clear;
  L := 1;
  for y := 1 to cont do
  begin // Salvando os itens da pré-venda.
    // if SgDados.Cells[0,L] = '' then Break;
    produto := TNEGProduto.buscarProduto(StrtoInt(SgDados.Cells[0,L]));
    pessoa := TNEGPEssoa.getPessoa(produto.Fornecedor.codigo);
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''20.0 mm''></xpml>n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('D');
    Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''20.0 mm''></xpml>L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    //Editor.Lines.Add('1X1100000030011B189040001001');
    //Editor.Lines.Add('1X1100000040103L001039');
    Editor.Lines.Add('1911A0600330014REF '+TRIM(produto.referenciaFabrica));
    Editor.Lines.Add('1911A0600230014='+TRIM(pessoa.dsObservacao)+'=');
    Editor.Lines.Add('1911A0600230048'+TRIM(produto.dsEmbalagem));
    Editor.Lines.Add('1911A1000100014FT: '+FormatFloat('0.00',produto.nrPeso));
    Editor.Lines.Add('1911A0600030014'+TRIM(produto.especificacao));
    Editor.Lines.Add('1e4201900200112C'+InttoStr(produto.cdProduto));
    Editor.Lines.Add('1911A0800050113'+TRIM(produto.prateleira)+' '+(produto.referenciaInterna));
    //Editor.Lines.Add('1X1100000330208B189041001001');
    //Editor.Lines.Add('1X1100000340300L001039');

    if SgDados.Cells[0,L+1] <> '' then begin
      produto := TNEGProduto.buscarProduto(StrtoInt(SgDados.Cells[0,L+1]));
      pessoa := TNEGPEssoa.getPessoa(produto.Fornecedor.codigo);
      Editor.Lines.Add('1911A0600630211REF '+TRIM(produto.referenciaFabrica));
      Editor.Lines.Add('1911A0600540211='+TRIM(pessoa.dsObservacao)+'=');
      Editor.Lines.Add('1911A0600540246'+TRIM(produto.dsEmbalagem));
      Editor.Lines.Add('1911A1000400211FT: '+FormatFloat('0.00',produto.nrPeso));
      Editor.Lines.Add('1911A0600340211'+TRIM(produto.especificacao));
      Editor.Lines.Add('1e4201900500310C'+InttoStr(produto.cdProduto));
      Editor.Lines.Add('1911A0800350315'+TRIM(produto.prateleira)+' '+(produto.referenciaInterna));
    end;

    Editor.Lines.Add('Q0001');
    Editor.Lines.Add('E');
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');

    L := L + 2;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
  begin
    ShowMessage('Não foi encontrado o arquivo Print.bat');
    exit;
  end;
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasCaribe2;
var
  L, y: Integer;
  Arq: TextFile;
  vqtd: Real;
  cont: Integer;
  imprimir_Com_Preco: Boolean;
  qry: TADOQuery;
  function BuscaPeso(qry: TADOQuery; cdProduto: Integer): Real;
  begin
    with qry do
    begin
      sql.Text :=
        'select nrPeso from produto with(nolock) where cdProduto = :cdProduto ';
      Parameters.ParamByName('cdProduto').Value := cdProduto;
      open;
      result := FieldByName('nrPeso').AsFloat;
      Close;
    end;
  end;

begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  if Application.MessageBox
    ('Imprimir etiqueta com o Preço? (SIM) ou com o Peso? (NAO)', 'Confirmação',
    Mb_YesNo + MB_ICONQUESTION + MB_APPLMODAL) = id_yes then
    imprimir_Com_Preco := True;

  if not imprimir_Com_Preco then
  begin
    qry := TADOQuery.Create(nil);
    qry.Connection := DModulo.Conexao;
  end;
  // SalvaEtiquetas;
  cont := 0;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    cont := cont + 1;
  end;

  if cont <= 0 then
    cont := 1;
  Editor.Lines.Clear;
  L := 1;
  for y := 1 to cont do
  begin // Salvando os itens da pré-venda.
    // if SgDados.Cells[0,L] = '' then Break;

    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0219');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');

    // Editor.Lines.Add('^^BY2,3,42^FT87,55^BCN,,N,N');
    Editor.Lines.Add('3d6301600310091' + FormatFloat('000000',
      StrToFloatDef(SgDados.Cells[0, L], 0)));

    ADOVarejo.Close;
    ADOVarejo.Parameters.ParamByName('cdProduto').Value :=
      StrToIntDef(SgDados.Cells[0, L], 0);
    ADOVarejo.open;
    if imprimir_Com_Preco then // só mostra a ref. se for imprimir com peso
      Editor.Lines.Add('121100000090118REF.' + SoNumeros(FormatFloat('0.00',
        StrToFloatDef(ADOVarejo.FieldByName('vlAtacado').AsString, 0))));

    if imprimir_Com_Preco then
      Editor.Lines.Add('121100000090166R$' + SgDados.Cells[3, L])
    else if SgDados.Cells[0, L] <> '' then
      Editor.Lines.Add('121100000090166' + FormatFloat('0.00',
        BuscaPeso(qry, StrToIntDef(SgDados.Cells[0, L], 0))));
    Editor.Lines.Add('111100000330132' + trim(Copy(SgDados.Cells[1, L],
      1, 18)));
    Editor.Lines.Add('111100000330042KARIB');
    Editor.Lines.Add('111100000240132' + trim(Copy(SgDados.Cells[1, L],
      18, 18)));
    Editor.Lines.Add('121100000030040' + FormatFloat('000000',
      StrToFloatDef(SgDados.Cells[0, L], 0)));
    vqtd := 1;
    // Editor.Lines.Add('^PQ1,0,1,Y^XZ');
    // Cálculo para imprimir a qtd de etiquetas certo
    // if Frac(StrToFloatdef(SgDados.Cells[2,L],0)/3) = 0.00 then
    // vQtd := StrToFloatdef(SgDados.Cells[2,L],0)/3
    // else vQtd := (StrToint(FormatFloat('0000',StrToFloat(SgDados.Cells[2,L]))) div 3) + 1;
    Editor.Lines.Add('^01'); // FloatToStr(vQtd)  no lugar do '1'
    Editor.Lines.Add('Q0001');
    Editor.Lines.Add('E');
    L := L + 1;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
  begin
    ShowMessage('Não foi encontrado o arquivo Print.bat');
    exit;
  end;
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  FreeAndNil(qry);
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.Button1Click(Sender: TObject);
begin
  Application.Minimize;
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaLayeVictorOS214;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0485');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('111100000710010' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('111100000710154' + trim(Copy(SgDados.Cells[1, L], 1, 20))
      ); // Descricao part 1
    Editor.Lines.Add('111100000710298' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('112300000050015' + 'R$ ' + SgDados.Cells[3, L]); // preco
    Editor.Lines.Add('1F2201700290010' + trim(SgDados.Cells[6, L]));
    Editor.Lines.Add('1F2201700300152' + trim(SgDados.Cells[6, L]));
    // Cod. Barra
    Editor.Lines.Add('1F2201700290298' + trim(SgDados.Cells[6, L]));
    Editor.Lines.Add('111100000610010' + trim(Copy(SgDados.Cells[1, L],
      20, 40)));
    Editor.Lines.Add('111100000620154' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      ); // Descricao part 2
    Editor.Lines.Add('111100000620298' + trim(Copy(SgDados.Cells[1, L],
      20, 40)));
    Editor.Lines.Add('112300000060153' + 'R$ ' + SgDados.Cells[3, L]); // preco
    Editor.Lines.Add('112300000060299' + 'R$ ' + SgDados.Cells[3, L]);
    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.EdtPrecoEnter(Sender: TObject);
begin
  if StrToFloatDef(EdtQtd.Text, 0) <= 0 then
  begin
    MessageDlg('Digite uma quantidade maior que zero para este produto.',
      mtWarning, [mbOK], 0);
    EdtQtd.Setfocus;
    exit;
  end;
  EdtDescUnit.Text := FormatFloat('0.00', StrToFloat(EdtDescUnit.Text));
  EdtPreco.Text := FormatFloatQ(vCasasPreco, StrToFloat(EdtPreco.Text) -
    (StrToFloat(EdtPreco.Text) * StrToFloat(EdtDescUnit.Text) / 100));
  EdtPreco.SelectAll;
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaSantoAntonio;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('n');
    Editor.Lines.Add('M0500');
    Editor.Lines.Add('KI71');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f318');
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('e');
    Editor.Lines.Add('D');
    Editor.Lines.Add('L');
    Editor.Lines.Add('');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('');
    Editor.Lines.Add('1912A0801090008'+trim(Copy(SgDados.Cells[1, L], 21, 20)));
    Editor.Lines.Add('1912A0801290008'+trim(Copy(SgDados.Cells[1, L], 1, 20)));
    Editor.Lines.Add('1912A0800840008COD: '+ SgDados.Cells[0, L]);
    Editor.Lines.Add('1912A0600610008REF:');
    Editor.Lines.Add('1912A0600610035'+p.referenciaFabrica);
    Editor.Lines.Add('1912A0600610088'+p.referenciaInterna);
    Editor.Lines.Add('1912A1000180035R$ '+ SgDados.Cells[3, L]);
    Editor.Lines.Add('');
    Editor.Lines.Add('1912A0801090174'+trim(Copy(SgDados.Cells[1, L], 21, 20)));
    Editor.Lines.Add('1912A0801290174'+trim(Copy(SgDados.Cells[1, L], 1, 20)));
    Editor.Lines.Add('1912A0800840174COD: '+ SgDados.Cells[0, L]);
    Editor.Lines.Add('1912A0600610174REF:');
    Editor.Lines.Add('1912A0600610201'+p.referenciaFabrica);
    Editor.Lines.Add('1912A0600610253'+p.referenciaInterna);
    Editor.Lines.Add('1912A1000180200R$ '+ SgDados.Cells[3, L]);
    Editor.Lines.Add('');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 2) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 2
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 2) + 1;
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaSuperDelli;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add(' JY0000Kf00D8');
    Editor.Lines.Add('S2');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A61,89,0,4,1,1,N,"' +
      RetirarAcento(trim(Copy(SgDados.Cells[1, L], 1, 45))) + '"');
    Editor.Lines.Add('B66,125,0,1,2,4,55,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A336,44,0,4,1,1,N,"SUPERDELLI"');
    Editor.Lines.Add('A461,154,0,5,1,1,N,"R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"');
    Editor.Lines.Add('A112,188,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');

    Editor.Lines.Add('Q24,0');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);

    Editor.Lines.Add('P' + intToStr(Trunc(vqtd)));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaSaoJudasTadeus2;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0417');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H13');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');

    Editor.Lines.Add('141100000670017' +
      RetirarAcento(trim(Copy(SgDados.Cells[1, L], 1, 34))));
    Editor.Lines.Add('121100000900017Codigo:');
    Editor.Lines.Add('121100000900066' + SgDados.Cells[0, L]);
    Editor.Lines.Add('192200600050130R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('141100000420017' +
      RetirarAcento(trim(Copy(SgDados.Cells[1, L], 35, 6))));

    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);

    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaSaoMiguel;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  Editor.Lines.Clear;
  if Application.MessageBox
    ('Deseja imprimir o modelo grande (SIM) ou pequeno (NÃO)?', 'Confirmação',
    Mb_YesNo + MB_ICONQUESTION + MB_APPLMODAL) = id_yes then
  begin // grande
    for L := 1 to SgDados.RowCount - 1 do
    begin // Salvando os itens da pré-venda.
      if SgDados.Cells[0, L] = '' then
        Break;
      Editor.Lines.Add('c0000');
      Editor.Lines.Add('KI503');
      Editor.Lines.Add('O0220');
      Editor.Lines.Add('f220');
      Editor.Lines.Add('KW0417');
      Editor.Lines.Add('KI7');
      Editor.Lines.Add('V0');
      Editor.Lines.Add('L');
      Editor.Lines.Add('H12');
      Editor.Lines.Add('PC');
      Editor.Lines.Add('A2');
      Editor.Lines.Add('D11');

      Editor.Lines.Add('1F3304500090055' + trim(SgDados.Cells[6, L]));
      Editor.Lines.Add('131100000790064' +
        RetirarAcento(trim(SgDados.Cells[1, L])));
      Editor.Lines.Add('192200500160253' + FormatFloat('0.00',
        StrToFloat(SgDados.Cells[3, L])));
      Editor.Lines.Add('192200200440213R$');

      Editor.Lines.Add('^01');
      // Cálculo para imprimir a qtd de etiquetas certo
      vqtd := StrToFloat(SgDados.Cells[2, L]);

      Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
      Editor.Lines.Add('E');
    end;
  end
  else
  begin
    for L := 1 to SgDados.RowCount - 1 do
    begin // Salvando os itens da pré-venda.
      if SgDados.Cells[0, L] = '' then
        Break;
      Editor.Lines.Add('c0000');
      Editor.Lines.Add('KI503');
      Editor.Lines.Add('O0220');
      Editor.Lines.Add('f220');
      Editor.Lines.Add('KW0417');
      Editor.Lines.Add('KI7');
      Editor.Lines.Add('V0');
      Editor.Lines.Add('L');
      Editor.Lines.Add('H12');
      Editor.Lines.Add('PC');
      Editor.Lines.Add('A2');
      Editor.Lines.Add('D11');

      Editor.Lines.Add('1F3303000240029' + trim(SgDados.Cells[6, L]));
      Editor.Lines.Add('131100000870029' +
        RetirarAcento(trim(Copy(SgDados.Cells[1, L], 1, 21))));
      Editor.Lines.Add('131100000700029' +
        RetirarAcento(trim(Copy(SgDados.Cells[1, L], 22, 21))));
      Editor.Lines.Add('192200100040124R$ ' + FormatFloat('0.00',
        StrToFloat(SgDados.Cells[3, L])));

      Editor.Lines.Add('^01');
      // Cálculo para imprimir a qtd de etiquetas certo
      vqtd := StrToFloat(SgDados.Cells[2, L]);

      Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
      Editor.Lines.Add('E');
    end;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

function TFrmPrincipalPreVenda.Solicitar_Login(forcarLogin
  : String = 'N'): Boolean;
{ forcarLogin = N-nao S-sim e B-vindo do clique do botao }
begin
  if (FrmPrincipalPreVenda.GetFlagEmpresa = 'TREVO') and (forcarLogin = 'N')
  then
  begin
    cbxUsuario.Text := '';
    EdtUsuario.Text := '';
    edtLogin.Text := '';
    // Application.OnMessage := FormPrincipal.ProcessaMsg;
    // CbxCliente.SelectAll;
    PostMessage(CbxCliente.handle, WM_SETFOCUS, 0, 0);
    // CbxCliente.SetFocus;
    exit;
  end;
  if FrmPedeSenha = nil then
    if (FrmPrincipalPreVenda.GetFlagEmpresa = 'TREVO') and (forcarLogin = 'S')
    then
      FrmPedeSenha := TFrmPedeSenha.Create(Application, false)
    else
      FrmPedeSenha := TFrmPedeSenha.Create(Application);
  FrmPedeSenha.editUsuario.Text := cbxUsuario.Text;
  FrmPedeSenha.ShowModal;
  result := trim(edtLogin.Text) <> '';
end;

function TFrmPrincipalPreVenda.SoNumeros(Const Texto: String): String;
//
// Remove caracteres de uma string deixando apenas numeros
//
var
  i: Integer;
  S: string;
begin
  S := '';
  for i := 1 To Length(Texto) Do
  begin
    if (Texto[i] in ['0' .. '9']) then
    begin
      S := S + Copy(Texto, i, 1);
    end;
  end;
  result := S;
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaAliceDiniz;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0394');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('191100302340013Cod.: ' + SgDados.Cells[0, L]);
    Editor.Lines.Add('191100302140013' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('191100301960013' + trim(Copy(SgDados.Cells[1, L],
      21, 40)));
    Editor.Lines.Add('191100600430013R$');
    Editor.Lines.Add('1F3305401150011' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1F3305401150212' + SgDados.Cells[6, L]);
    Editor.Lines.Add('191100302340217Cod.: ' + SgDados.Cells[0, L]);
    Editor.Lines.Add('191100302140217' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('191100301960217' + trim(Copy(SgDados.Cells[1, L],
      21, 40)));
    Editor.Lines.Add('181100000420053' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('191100600430213R$');
    Editor.Lines.Add('181100000420250' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('191100302660055Alice Diniz');
    Editor.Lines.Add('191100302660258Alice Diniz');
    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaAmorBebe;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0394');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('191100202230026Desc..:');
    Editor.Lines.Add('191100202220200Desc..:');
    Editor.Lines.Add('191100202100029' + trim(Copy(SgDados.Cells[1, L], 1, 20))
      ); // Descricao part 1
    Editor.Lines.Add('191100201970029' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      ); // Descricao part 1
    Editor.Lines.Add('191100202090204' + trim(Copy(SgDados.Cells[1, L], 1, 20))
      ); // Descricao part 1
    Editor.Lines.Add('191100201960204' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      ); // Descricao part 1
    Editor.Lines.Add('191100500040025R$ ' + SgDados.Cells[9, L]); // preco
    Editor.Lines.Add('191100001330026Data da compra');
    Editor.Lines.Add('191100001210026Prazo de troca de 30 dias.');
    Editor.Lines.Add('1E3303600310024A' + SgDados.Cells[0, L]);
    Editor.Lines.Add('1E3303600320201A' + SgDados.Cells[0, L]);
    Editor.Lines.Add('191100500040202R$ ' + SgDados.Cells[9, L]); // preco
    Editor.Lines.Add('191100001090026Pecas em promocao, troca apenas');
    Editor.Lines.Add('191100000970026durante o periodo promocional.');
    Editor.Lines.Add('191100001330200Data da compra');
    Editor.Lines.Add('191100001210200Prazo de troca de 30 dias.');
    Editor.Lines.Add('191100001090200Pecas em promocao, troca apenas');
    Editor.Lines.Add('191100000970200durante o periodo promocional.');
    Editor.Lines.Add('1Y1100002190316PB19');
    Editor.Lines.Add('1Y1100001300094PB20');
    Editor.Lines.Add('1E3303601460025A' + SgDados.Cells[0, L]);
    Editor.Lines.Add('1Y1100001300300PB22');
    Editor.Lines.Add('1E3303601460200A' + SgDados.Cells[0, L]);
    Editor.Lines.Add('1Y1100002270124PB1');
    Editor.Lines.Add('1Y1100002280290PB2');
    Editor.Lines.Add('^01');
    Editor.Lines.Add('Q0001');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaRosaMenina;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0354');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('121100001800041' + trim(Copy(SgDados.Cells[1, L], 1, 20))
      ); // Descricao part 1
    Editor.Lines.Add('121100001690041' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      ); // Descricao part 1
    Editor.Lines.Add('131100001120041R$ ' + SgDados.Cells[9, L]); // preco
    Editor.Lines.Add('1e2202501410041B' + SgDados.Cells[0, L]);
    Editor.Lines.Add('1e2202500430042B' + SgDados.Cells[0, L]);
    Editor.Lines.Add('121100000820042' + trim(Copy(SgDados.Cells[1, L], 1, 20))
      ); // Descricao part 1
    Editor.Lines.Add('121100000700042' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      ); // Descricao part 1
    Editor.Lines.Add('121100001300041' + SgDados.Cells[0, L]);
    Editor.Lines.Add('131100000100043R$ ' + SgDados.Cells[9, L]); // preco
    Editor.Lines.Add('121100000300043' + SgDados.Cells[0, L]);
    Editor.Lines.Add('1e2202500440210B' + SgDados.Cells[0, L]);
    Editor.Lines.Add('121100000830210' + trim(Copy(SgDados.Cells[1, L], 1, 20))
      ); // Descricao part 1
    Editor.Lines.Add('121100000710210' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      ); // Descricao part 1
    Editor.Lines.Add('131100000110211R$ ' + SgDados.Cells[9, L]); // preco
    Editor.Lines.Add('121100000310211' + SgDados.Cells[0, L]);
    Editor.Lines.Add('111100001060040Troca somente peca com defeito');
    Editor.Lines.Add('11110000099004130 dias da data da compra');
    Editor.Lines.Add('121100001800207' + trim(Copy(SgDados.Cells[1, L], 1, 20))
      ); // Descricao part 1
    Editor.Lines.Add('121100001690207' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      ); // Descricao part 1
    Editor.Lines.Add('131100001120207R$ ' + SgDados.Cells[9, L]); // preco
    Editor.Lines.Add('1e2202501410207B' + SgDados.Cells[0, L]);
    Editor.Lines.Add('121100001300207' + SgDados.Cells[0, L]);
    Editor.Lines.Add('111100001060207Troca somente peca com defeito');
    Editor.Lines.Add('11110000099020830 dias da data da compra');
    Editor.Lines.Add('1Y1100001910031PB25');
    Editor.Lines.Add('1Y1100001920198PB26');
    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaListo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('I8,A,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q184,024');
    Editor.Lines.Add('q831');
    Editor.Lines.Add('rN');
    Editor.Lines.Add('S4');
    Editor.Lines.Add('D7');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('OD');
    Editor.Lines.Add('R16,0');
    Editor.Lines.Add('f100');
    Editor.Lines.Add('N');
    Editor.Lines.Add('A240,106,2,4,1,1,N,"R$ ' + SgDados.Cells[9, L] + '"');
    Editor.Lines.Add('A787,106,2,4,1,1,N,"R$ ' + SgDados.Cells[9, L] + '"');
    Editor.Lines.Add('A515,107,2,4,1,1,N,"R$ ' + SgDados.Cells[9, L] + '"');
    Editor.Lines.Add('B242,80,2,1,2,6,46,B,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A784,168,2,1,1,2,N,"' + SgDados.Cells[0, L] + '-' +
      trim(Copy(SgDados.Cells[1, L], 1, 16)) + '"'); // Descricao part 1
    Editor.Lines.Add('B515,82,2,1,2,6,46,B,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A514,169,2,1,1,2,N,"' + SgDados.Cells[0, L] + '-' +
      trim(Copy(SgDados.Cells[1, L], 1, 16)) + '"'); // Descricao part 1
    Editor.Lines.Add('B788,81,2,1,2,6,46,B,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A240,167,2,1,1,2,N,"' + SgDados.Cells[0, L] + '-' +
      trim(Copy(SgDados.Cells[1, L], 1, 16)) + '"'); // Descricao part 1
    Editor.Lines.Add('A240,141,2,1,1,2,N,"' + trim(Copy(SgDados.Cells[1, L], 17,
      36)) + '"'); // Descricao part 1
    Editor.Lines.Add('A784,142,2,1,1,2,N,"' + trim(Copy(SgDados.Cells[1, L], 17,
      36)) + '"'); // Descricao part 1
    Editor.Lines.Add('A514,142,2,1,1,2,N,"' + trim(Copy(SgDados.Cells[1, L], 17,
      36)) + '"'); // Descricao part 1
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasBijouArtsOS214TT;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0354');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('111100000490025' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '');
    Editor.Lines.Add('111100000410025' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '');
    Editor.Lines.Add('1d6301800190148' + SgDados.Cells[0, L] + '');
    Editor.Lines.Add('111100000490143' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '');
    Editor.Lines.Add('111100000410143' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '');
    Editor.Lines.Add('1d6301800200267' + SgDados.Cells[0, L] + '');
    Editor.Lines.Add('111100000490261' + trim(Copy(SgDados.Cells[1, L], 1,
      19)) + '');
    Editor.Lines.Add('111100000410261' + trim(Copy(SgDados.Cells[1, L], 20,
      20)) + '');
    Editor.Lines.Add('1d6301800190029' + SgDados.Cells[0, L] + '');
    Editor.Lines.Add('131100000010039' + SgDados.Cells[0, L] + '');
    Editor.Lines.Add('131100000010160' + SgDados.Cells[0, L] + '');
    Editor.Lines.Add('131100000010281' + SgDados.Cells[0, L] + '');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('^' + FormatFloat('00', vqtd));
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.EdtCFOPKeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = Char(42)) then
  begin // 42 -> *
    Application.OnMessage := FormPrincipal.NaoProcessaMsg;
    // Form1.WindowState := wsMinimized;
    FrmCFOP := TFrmCFOP.Create(Application); // Cria o formulário
    // FrmCFOP.Position := poMainFormCenter; comentei porque estava dando erro com o VCLSKIN
    FrmCFOP.Show;
    FrmCFOP.AtualizaQryConsulta;
    exit;
  end;
  ValidarInteiro(Key);
end;

function TFrmPrincipalPreVenda.SugereCFOP: string;
begin
  // pega o cfop cadastrado previamente no cadastro de produtos
  if vUF <> vUF_Cliente then
  begin
    if RgOpcoes.ItemIndex <> 4 then // PBFARMA SIMPLES REMESSA
      result := ADOSPConsultadsCFOPF.AsString
    else
      result := '6949';
  end
  else
  begin
    if RgOpcoes.ItemIndex <> 4 then // PBFARMA SIMPLES REMESSA
      result := ADOSPConsultadsCFOPD.AsString
    else
      result := '5949';
  end;
end;

procedure TFrmPrincipalPreVenda.btnMensagemClick(Sender: TObject);
var
  query: TADOQuery;
  i: Integer;
  Produto: TDOMProduto;
begin
  vExibir := NOT vExibir;
  if vExibir = false then
  begin
    FrmInfo.Close;
    exit;
  end;
  Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, SgDados.Row]));
  if Produto.tipoComposicao = composto then
  begin
    frmConsultaComposicao := TfrmConsultaComposicao.Create(Application);
    frmConsultaComposicao.codigoProduto :=
      StrToInt(SgDados.Cells[0, SgDados.Row]);
    frmConsultaComposicao.lblNome.caption := 'Produto: ' + SgDados.Cells
      [1, SgDados.Row];
    frmConsultaComposicao.LblCodigo.caption := 'Código  : ' + SgDados.Cells
      [0, SgDados.Row];
    frmConsultaComposicao.ShowModal;
    exit;
  end;
  FrmInfo := TFrmInfo.Create(Application);
  // FrmInfo.Parent := FrmPrincipalPreVenda;
  FrmInfo.Top := btnMensagem.ClientOrigin.y;
  FrmInfo.Left := btnMensagem.ClientOrigin.x + btnMensagem.width;
  FrmInfo.Show;
  query := TADOQuery.Create(self);
  query.Connection := DModulo.Conexao;
  { memoMensagem.Text :=   'Código do produto.......: ' + SgDados.Cells[0,SgDados.Row];
    memoMensagem.Lines.Add('Faltam..........................: ' + FloatToStr(qtdInsuficienteParaPrevend(StrToInt(SgDados.Cells[0,SgDados.Row]), strToFloatDef(SgDados.Cells[2,SgDados.Row],0))));
    memoMensagem.Lines.Add('Quantidade em reserva: ' + FloatToStr(quantidadeEmReserva(StrToInt(SgDados.Cells[0,SgDados.Row]))));
    memoMensagem.Lines.Add('Prevenda | Quantidade | Data '); }
  FrmInfo.LblCodigo.caption := SgDados.Cells[0, SgDados.Row];
  FrmInfo.lblFaltam.caption :=
    FloatToStr(qtdInsuficienteParaPrevend(StrToInt(SgDados.Cells[0, SgDados.Row]
    ), StrToFloatDef(SgDados.Cells[2, SgDados.Row], 0)));
  FrmInfo.lblQtd.caption :=
    FloatToStr(quantidadeEmReserva(StrToInt(SgDados.Cells[0, SgDados.Row])));
  with query do
  begin
    sql.Text :=
      'SELECT Distinct O.nrOrcamento as prevenda, O.dtEmissao as data, I.nrQtd as quantidade '
      + 'FROM Orcamento O WITH (NOLOCK) INNER JOIN IteOrcamento I                              '
      + 'WITH (NOLOCK) ON O.nrOrcamento = I.nrOrcamento                                        '
      + 'Where I.cdproduto = :CDPRODUTO and I.dsSituacao <> ''C'' and  O.dsImpresso <> ''O'' and    ';
    // if (UpperCase(vEmpresa) = 'NACIONAL') or (UpperCase(vEmpresa) = 'REIDOFIAT') or
    // (UpperCase(vEmpresa) = 'AUTOCAR') or (UpperCase(vEmpresa) = 'TOPLINE') or
    // (UpperCase(vEmpresa) = 'TREVO') or (UpperCase(vEmpresa) = 'MECATTRON') or (UpperCase(vEmpresa) = 'LAMARAO')
    // then
    if ((vAutoPecas = 'A') OR (UpperCase(vEmpresa) = 'NACIONAL')) then
      sql.Add('O.dsImpresso <> ''S''  ')
      // and O.nrObjeto <> 0 testar para ver se o sistema mostra as prevendas e os em aberto
    else
      sql.Add('O.dsImpresso = ''N'' ');
    Parameters.ParamByName('CDPRODUTO').Value := SgDados.Cells[0, SgDados.Row];
    open;
    for i := 0 to RecordCount - 1 do
    begin
      // memoMensagem.Lines.Add(Format('%-10s', [fieldbyname('prevenda').asstring]) + ' | ' + Format('%18s',[FloatToStr(fieldbyname('quantidade').AsFloat)]) + ' | ' + DateToStr(fieldbyname('data').AsDateTime));
      FrmInfo.mmInfo.Lines.Add(Format('%-12s',
        [FieldByName('prevenda').AsString]) + ' | ' + Format('%20s',
        [FloatToStr(FieldByName('quantidade').AsFloat)]) + ' | ' +
        DateToStr(FieldByName('data').AsDateTime));
      Next;
    end;
  end;
  Ativa := 'N';
  // memoMensagem.Visible := not memoMensagem.Visible;
end;

procedure TFrmPrincipalPreVenda.exibirExclamacao;
begin
  btnMensagem.Top := SgDados.Top + ((SgDados.Row - SgDados.TopRow) * 20) + 25;
  // memoMensagem.Top := btnMensagem.Top;
  btnMensagem.Left := 2;
  btnMensagem.Visible := True;
  // memoMensagem.Visible := False;
  vExibir := false;
end;

procedure TFrmPrincipalPreVenda.ocultarExclamacao;
begin
  btnMensagem.Visible := false;
  if FrmInfo <> nil then
    FrmInfo.Close;
  // memoMensagem.Visible := False;
end;

function TFrmPrincipalPreVenda.qtdInsuficienteParaPrevend(cdProduto: Integer;
  qtdSolicitada: Real): Real;
var
  query: TADOQuery;
  qtdEstoque, qtdEmReserva, qtdResta, qtdFalta: Real;
begin
  query := TADOQuery.Create(self);
  query.Connection := DModulo.Conexao;
  with query do
  begin
    sql.Text :=
      'select nrqtdreal,dsTIPO_ITEM from produto WITH (NOLOCK) where cdproduto = :CODIGO';
    Parameters.ParamByName('CODIGO').Value := cdProduto;
    open;
    if (FieldByName('dsTIPO_ITEM').AsString = '09') then
    begin // nao valida servico
      result := 0;
      exit;
    end;
    if (RecordCount > 0) then
      qtdEstoque := FieldByName('nrqtdreal').AsFloat
    else
      qtdEstoque := 0;
  end;
  if (vDestacarItensOcupados) then
    qtdEmReserva := quantidadeEmReserva(cdProduto)
  else
    qtdEmReserva := 0;
  qtdResta := qtdEstoque - qtdEmReserva;
  qtdFalta := qtdSolicitada - qtdResta;
  FreeAndNil(query);
  if qtdFalta > 0 then
    result := qtdFalta
  else
    result := 0;
end;

procedure TFrmPrincipalPreVenda.pintarLinhaStringGrid(Grid: TStringGrid;
  linha: Integer; cor: TColor);
var
  i: Integer;
  Rect: TRect;
begin
  for i := 0 to Grid.ColCount - 1 do
  begin
    Rect := Grid.CellRect(i, linha);
    Grid.Canvas.Brush.Color := cor;
    Grid.Canvas.FillRect(Rect);
    Grid.Canvas.Font.Color := Grid.Font.Color;
    DrawTextW(Grid.Canvas.handle, PWideChar(Grid.Cells[i, linha]),
      Length(Grid.Cells[i, linha]), Rect, DT_VCENTER or DT_LEFT or
      DT_SINGLELINE);
  end;
end;

function TFrmPrincipalPreVenda.PossuiEstoque: Boolean;
{ *** Valida o estoque desde que esteja setado tal validacao nas configuracoes do sistema }
var
  i: Integer;
  resultado: Boolean;
begin
  resultado := True;
  if (RgOpcoes.ItemIndex = 0) or ((transformarOrcamentoPrevenda = True) and
    (RgOpcoes.ItemIndex = 1)) then
  begin
    if (vEstqNegativo <> 'S') then
    begin // ***
      for i := 0 to prevenda.itens.Count - 1 do
      begin
        if (((prevenda.itens[i].quantidade > prevenda.itens[i].nrQtdReal) and
          (prevenda.itens[i].tipoComposicao <> composto)) or
          ((prevenda.itens[i].tipoComposicao = composto) and
          (TNEGProduto.getEstoquePossivelProdutoComposto(prevenda.itens[i]
          .cdProduto, 1) <= 0))) and (prevenda.itens[i].dsTIPO_ITEM <> '09')
        then
        begin
          Application.MessageBox
            (PWideChar('O produto ' + prevenda.itens[i].descricao +
            ' não possui estoque suficiente!'), 'Atenção',
            mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
          resultado := false;
          Break;
        end;
      end;
    end;
  end;
  result := resultado;
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaTecno;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0400');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('191100000730007' + trim(Copy(SgDados.Cells[1, L], 1, 20))
      ); // Descricao part 1
    Editor.Lines.Add('191100000580007' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      ); // Descricao part 1
    Editor.Lines.Add('191100300010014R$' + SgDados.Cells[9, L]); // preco
    Editor.Lines.Add('191100300010151R$' + SgDados.Cells[9, L]); // preco
    Editor.Lines.Add('191100300020287R$' + SgDados.Cells[9, L]); // preco
    Editor.Lines.Add('191100000730144' + trim(Copy(SgDados.Cells[1, L], 1, 20))
      ); // Descricao part 1
    Editor.Lines.Add('191100000580144' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      ); // Descricao part 1
    Editor.Lines.Add('191100000730281' + trim(Copy(SgDados.Cells[1, L], 1, 20))
      ); // Descricao part 1
    Editor.Lines.Add('191100000580281' + trim(Copy(SgDados.Cells[1, L], 20, 40))
      ); // Descricao part 1
    Editor.Lines.Add('1D4202500200013' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('1D4202500200150' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('1D4202500200287' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('^01');
    // Editor.Lines.Add('Q0001');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

function TFrmPrincipalPreVenda.quantidadeEmReserva(cdProduto: Integer): Real;
var
  query: TADOQuery;
  resultado: Real;
begin
  query := TADOQuery.Create(self);
  query.Connection := DModulo.Conexao;
  resultado := 0;
  with query do
  begin // Vou pegar o q está reservado  ( OU SEJA NAS OS )
    sql.Text :=
      'SELECT Sum(I.nrQtd) as Qtd FROM Orcamento O WITH (NOLOCK) INNER JOIN IteOrcamento I '
      + 'WITH (NOLOCK) ON O.nrOrcamento = I.nrOrcamento Where I.cdproduto = :CDPRODUTO '
      + 'and I.dsSituacao <> ''C'' and ';
    // if (UpperCase(vEmpresa) = 'NACIONAL') or (UpperCase(vEmpresa) = 'REIDOFIAT') or (UpperCase(vEmpresa) = 'AUTOCAR') then
    // SQL.Add('O.dsImpresso <> ''S'' and O.nrObjeto <> 0 ')
    // else
    sql.Add('O.dsImpresso = ''N'' ');
    Parameters.ParamByName('CDPRODUTO').Value := cdProduto;
    open;
    if RecordCount > 0 then
      resultado := FieldByName('Qtd').AsFloat;
  end;
  FreeAndNil(query);
  result := resultado;
end;

procedure TFrmPrincipalPreVenda.DesbloquearPrVenda1Click(Sender: TObject);
var
  qry: TADOQuery;
begin
  if EdtLancto.Text = '' then
  begin
    Application.MessageBox('Digite o número da Pré Venda / OS!', 'Atenção',
      mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
    EdtLancto.Setfocus;
    exit;
  end;

  qry := TADOQuery.Create(nil);
  qry.Connection := DModulo.Conexao;

  with qry do
  begin
    try
      DModulo.Conexao.BeginTrans;
      sql.Text :=
        'Update orcamento set dsEmUso = ''N'' where nrOrcamento = :nrOrcamento ';
      Parameters.ParamByName('nrOrcamento').Value := EdtLancto.Text;
      ExecSQL;
      DModulo.Conexao.CommitTrans;
      Application.MessageBox('Pré Venda / OS desbloqueada com sucesso!',
        'Informação', mb_Ok + MB_ICONINFORMATION + MB_APPLMODAL);
    except
      DModulo.Conexao.RollbackTrans;
    end;
  end;
  qry.Free;
end;

procedure TFrmPrincipalPreVenda.Declaraodedevoluodecliente1Click
  (Sender: TObject);
begin
  if trim(CbxNome.Text) <> '' then
  begin
    frmdeclaracao := TfrmDeclaracao.Create(self);
    frmdeclaracao.ShowModal;
  end
  else
    ShowMessage('Selecione o vendedor corretamente!');
end;

function TFrmPrincipalPreVenda.ChamaInputBoxTipoForracao(const ACaption,
  APrompt: string): string;
var
  Form: TForm;
  Prompt: TLabel;
  cbxFornecedor: TComboBox;
  DialogUnits: TPoint;
  ButtonTop, ButtonWidth, ButtonHeight: Integer;
  Value: string;
  i: Integer;
  Buffer: array [0 .. 51] of Char;
begin
  result := '';
  Form := TForm.Create(Application);
  with Form do
  begin
    try
      Canvas.Font := Font;
      for i := 0 to 25 do
        Buffer[i] := Chr(i + Ord('A'));
      for i := 0 to 25 do
        Buffer[i + 26] := Chr(i + Ord('a'));
      GetTextExtentPoint(Canvas.handle, Buffer, 52, TSize(DialogUnits));
      DialogUnits.x := DialogUnits.x div 52;
      BorderStyle := bsDialog;
      caption := ACaption;
      ClientWidth := MulDiv(380, DialogUnits.x, 4);
      ClientHeight := MulDiv(63, DialogUnits.y, 8);
      Position := poScreenCenter;
      Prompt := TLabel.Create(Form);
      with Prompt do
      begin
        Parent := Form;
        AutoSize := True;
        Left := MulDiv(8, DialogUnits.x, 4);
        Top := MulDiv(8, DialogUnits.y, 8);
        caption := APrompt;
      end;
      cbxFornecedor := TComboBox.Create(Form);
      with cbxFornecedor do
      begin
        Parent := Form;
        ItemIndex := 5;
        Left := Prompt.Left;
        Top := MulDiv(19, DialogUnits.y, 8);
        width := MulDiv(340, DialogUnits.x, 4);
        Style := csDropDownList;
        // MaxLength := 255;
        // aqui vc pode adicionar a data de como vai ser exibida no input:
        // EditMask := '99/99/9999';
        // PasswordChar := '*';
        // SelectAll;
        cbxFornecedor.Items.Add('Vinitac');
        cbxFornecedor.Items.Add('NF/NE');
        cbxFornecedor.Items.Add('Só Forrar');
        cbxFornecedor.Items.Add('Só etiquetar');
        cbxFornecedor.Items.Add('Observação');
        cbxFornecedor.Items.Add('Personalizado');
        cbxFornecedor.Items.Add('Nenhuma');
      end;
      ButtonTop := MulDiv(41, DialogUnits.y, 8);
      ButtonWidth := MulDiv(50, DialogUnits.x, 4);
      ButtonHeight := MulDiv(14, DialogUnits.y, 8);
      with TButton.Create(Form) do
      begin
        Parent := Form;
        caption := 'OK';
        ModalResult := mrOK;
        Default := True;
        SetBounds(MulDiv(38, DialogUnits.x, 4), ButtonTop, ButtonWidth,
          ButtonHeight);
      end;
      with TButton.Create(Form) do
      begin
        Parent := Form;
        caption := 'Cancel';
        ModalResult := mrCancel;
        Cancel := True;
        SetBounds(MulDiv(92, DialogUnits.x, 4), ButtonTop, ButtonWidth,
          ButtonHeight);
      end;
      cbxFornecedor.ItemIndex := 0;
      if ShowModal = mrOK then
      begin
        Value := cbxFornecedor.Text;
        result := Value;
      end;
    finally
      Form.Free;
      Form := nil;
    end;
  end;
end;

function TFrmPrincipalPreVenda.ChamaInputBoxEtiquetaCAMPOS(const ACaption,
  APrompt: string): integer;
var
  Form: TForm;
  Prompt: TLabel;
  cbxFornecedor: TComboBox;
  DialogUnits: TPoint;
  ButtonTop, ButtonWidth, ButtonHeight: Integer;
  Value: integer;
  i: Integer;
  Buffer: array [0 .. 51] of Char;
begin
  result := -1;
  Form := TForm.Create(Application);
  with Form do
  begin
    try
      Canvas.Font := Font;
      for i := 0 to 25 do
        Buffer[i] := Chr(i + Ord('A'));
      for i := 0 to 25 do
        Buffer[i + 26] := Chr(i + Ord('a'));
      GetTextExtentPoint(Canvas.handle, Buffer, 52, TSize(DialogUnits));
      DialogUnits.x := DialogUnits.x div 52;
      BorderStyle := bsDialog;
      caption := ACaption;
      ClientWidth := MulDiv(380, DialogUnits.x, 4);
      ClientHeight := MulDiv(63, DialogUnits.y, 8);
      Position := poScreenCenter;
      Prompt := TLabel.Create(Form);
      with Prompt do
      begin
        Parent := Form;
        AutoSize := True;
        Left := MulDiv(8, DialogUnits.x, 4);
        Top := MulDiv(8, DialogUnits.y, 8);
        caption := APrompt;
      end;
      cbxFornecedor := TComboBox.Create(Form);
      with cbxFornecedor do
      begin
        Parent := Form;
        ItemIndex := 5;
        Left := Prompt.Left;
        Top := MulDiv(19, DialogUnits.y, 8);
        width := MulDiv(340, DialogUnits.x, 4);
        Style := csDropDownList;
        // MaxLength := 255;
        // aqui vc pode adicionar a data de como vai ser exibida no input:
        // EditMask := '99/99/9999';
        // PasswordChar := '*';
        // SelectAll;
        cbxFornecedor.Items.Add('1 Coluna Varejo');
        cbxFornecedor.Items.Add('1 Coluna Varejo Atacado');
        cbxFornecedor.Items.Add('2 Colunas Descrição Menor');
        cbxFornecedor.Items.Add('2 Colunas Descrição Maior');
        cbxFornecedor.Items.Add('2 Colunas 1 Subgrupo');
        cbxFornecedor.Items.Add('2 Colunas 2 Subgrupos');
        cbxFornecedor.Items.Add('2 Colunas 3 Subgrupos');
        cbxFornecedor.Items.Add('2 Colunas 4 Subgrupos');
        cbxFornecedor.Items.Add('2 Colunas Gaveta');
        cbxFornecedor.Items.Add('2 Colunas Atacado Varejo');
        cbxFornecedor.Items.Add('Logomarca 1 Coluna Varejo');
        cbxFornecedor.Items.Add('Logomarca 1 Coluna VarejoAtacado');
        cbxFornecedor.Items.Add('Logomarca 1 Coluna Sem Descricao Varejo');
        cbxFornecedor.Items.Add('Logomarca 2 Colunas Sem Descricao');
        cbxFornecedor.Items.Add('Logomarca 1 Coluna Sem Descricao Varejo Atacado');
        cbxFornecedor.Items.Add('Logomarca 3 Colunas Mini');
      end;
      ButtonTop := MulDiv(41, DialogUnits.y, 8);
      ButtonWidth := MulDiv(50, DialogUnits.x, 4);
      ButtonHeight := MulDiv(14, DialogUnits.y, 8);
      with TButton.Create(Form) do
      begin
        Parent := Form;
        caption := 'OK';
        ModalResult := mrOK;
        Default := True;
        SetBounds(MulDiv(38, DialogUnits.x, 4), ButtonTop, ButtonWidth,
          ButtonHeight);
      end;
      with TButton.Create(Form) do
      begin
        Parent := Form;
        caption := 'Cancel';
        ModalResult := mrCancel;
        Cancel := True;
        SetBounds(MulDiv(92, DialogUnits.x, 4), ButtonTop, ButtonWidth,
          ButtonHeight);
      end;
      cbxFornecedor.ItemIndex := 0;
      if ShowModal = mrOK then
      begin
        Value := cbxFornecedor.ItemIndex;
        result := Value;
      end;
    finally
      Form.Free;
      Form := nil;
    end;
  end;
end;

function TFrmPrincipalPreVenda.ChamaInputBoxEtiquetaZanquy(const ACaption,
  APrompt: string): integer;
var
  Form: TForm;
  Prompt: TLabel;
  cbxFornecedor: TComboBox;
  DialogUnits: TPoint;
  ButtonTop, ButtonWidth, ButtonHeight: Integer;
  Value: integer;
  i: Integer;
  Buffer: array [0 .. 51] of Char;
begin
  result := -1;
  Form := TForm.Create(Application);
  with Form do
  begin
    try
      Canvas.Font := Font;
      for i := 0 to 25 do
        Buffer[i] := Chr(i + Ord('A'));
      for i := 0 to 25 do
        Buffer[i + 26] := Chr(i + Ord('a'));
      GetTextExtentPoint(Canvas.handle, Buffer, 52, TSize(DialogUnits));
      DialogUnits.x := DialogUnits.x div 52;
      BorderStyle := bsDialog;
      caption := ACaption;
      ClientWidth := MulDiv(380, DialogUnits.x, 4);
      ClientHeight := MulDiv(63, DialogUnits.y, 8);
      Position := poScreenCenter;
      Prompt := TLabel.Create(Form);
      with Prompt do
      begin
        Parent := Form;
        AutoSize := True;
        Left := MulDiv(8, DialogUnits.x, 4);
        Top := MulDiv(8, DialogUnits.y, 8);
        caption := APrompt;
      end;
      cbxFornecedor := TComboBox.Create(Form);
      with cbxFornecedor do
      begin
        Parent := Form;
        ItemIndex := 5;
        Left := Prompt.Left;
        Top := MulDiv(19, DialogUnits.y, 8);
        width := MulDiv(340, DialogUnits.x, 4);
        Style := csDropDownList;
        // MaxLength := 255;
        // aqui vc pode adicionar a data de como vai ser exibida no input:
        // EditMask := '99/99/9999';
        // PasswordChar := '*';
        // SelectAll;
        cbxFornecedor.Items.Add('ZANQUY CENTRO');
        cbxFornecedor.Items.Add('YZLU PREMIO');
        cbxFornecedor.Items.Add('YZLU JOAO PESSOA');
        cbxFornecedor.Items.Add('ZANQUY PREMIO');
        cbxFornecedor.Items.Add('EQUILIBRIO');
        cbxFornecedor.Items.Add('AQUARELA');
        cbxFornecedor.Items.Add('YZLU CALCADOS');
        cbxFornecedor.Items.Add('ZANQUY LARANJEIRAS');
        cbxFornecedor.Items.Add('QUIVER');
        cbxFornecedor.Items.Add('YZLU PEIXOTO');
      end;
      ButtonTop := MulDiv(41, DialogUnits.y, 8);
      ButtonWidth := MulDiv(50, DialogUnits.x, 4);
      ButtonHeight := MulDiv(14, DialogUnits.y, 8);
      with TButton.Create(Form) do
      begin
        Parent := Form;
        caption := 'OK';
        ModalResult := mrOK;
        Default := True;
        SetBounds(MulDiv(38, DialogUnits.x, 4), ButtonTop, ButtonWidth,
          ButtonHeight);
      end;
      with TButton.Create(Form) do
      begin
        Parent := Form;
        caption := 'Cancel';
        ModalResult := mrCancel;
        Cancel := True;
        SetBounds(MulDiv(92, DialogUnits.x, 4), ButtonTop, ButtonWidth,
          ButtonHeight);
      end;
      cbxFornecedor.ItemIndex := 0;
      if ShowModal = mrOK then
      begin
        Value := cbxFornecedor.ItemIndex;
        result := Value;
      end;
    finally
      Form.Free;
      Form := nil;
    end;
  end;
end;

function TFrmPrincipalPreVenda.ChamaInputBoxTurno(const ACaption,
  APrompt: string): Integer;
var
  Form: TForm;
  Prompt: TLabel;
  cbxFornecedor: TComboBox;
  DialogUnits: TPoint;
  ButtonTop, ButtonWidth, ButtonHeight: Integer;
  Value: Integer;
  i: Integer;
  Buffer: array [0 .. 51] of Char;
begin
  result := 0;
  Form := TForm.Create(Application);
  with Form do
  begin
    try
      Canvas.Font := Font;
      for i := 0 to 25 do
        Buffer[i] := Chr(i + Ord('A'));
      for i := 0 to 25 do
        Buffer[i + 26] := Chr(i + Ord('a'));
      GetTextExtentPoint(Canvas.handle, Buffer, 52, TSize(DialogUnits));
      DialogUnits.x := DialogUnits.x div 52;
      BorderStyle := bsDialog;
      caption := ACaption;
      ClientWidth := MulDiv(380, DialogUnits.x, 4);
      ClientHeight := MulDiv(63, DialogUnits.y, 8);
      Position := poScreenCenter;
      Prompt := TLabel.Create(Form);
      with Prompt do
      begin
        Parent := Form;
        AutoSize := True;
        Left := MulDiv(8, DialogUnits.x, 4);
        Top := MulDiv(8, DialogUnits.y, 8);
        caption := APrompt;
      end;
      cbxFornecedor := TComboBox.Create(Form);
      with cbxFornecedor do
      begin
        Parent := Form;
        ItemIndex := 5;
        Left := Prompt.Left;
        Top := MulDiv(19, DialogUnits.y, 8);
        width := MulDiv(340, DialogUnits.x, 4);
        Style := csDropDownList;
        // MaxLength := 255;
        // aqui vc pode adicionar a data de como vai ser exibida no input:
        // EditMask := '99/99/9999';
        // PasswordChar := '*';
        // SelectAll;
        cbxFornecedor.Items.Add('Nenhum');
        cbxFornecedor.Items.Add('Manhã');
        cbxFornecedor.Items.Add('Tarde');
        cbxFornecedor.Items.Add('Noite');
        cbxFornecedor.Items.Add('Integral');
      end;
      ButtonTop := MulDiv(41, DialogUnits.y, 8);
      ButtonWidth := MulDiv(50, DialogUnits.x, 4);
      ButtonHeight := MulDiv(14, DialogUnits.y, 8);
      with TButton.Create(Form) do
      begin
        Parent := Form;
        caption := 'OK';
        ModalResult := mrOK;
        Default := True;
        SetBounds(MulDiv(38, DialogUnits.x, 4), ButtonTop, ButtonWidth,
          ButtonHeight);
      end;
      with TButton.Create(Form) do
      begin
        Parent := Form;
        caption := 'Cancel';
        ModalResult := mrCancel;
        Cancel := True;
        SetBounds(MulDiv(92, DialogUnits.x, 4), ButtonTop, ButtonWidth,
          ButtonHeight);
      end;
      cbxFornecedor.ItemIndex := 1;
      if ShowModal = mrOK then
      begin
        Value := cbxFornecedor.ItemIndex;
        result := Value;
      end;
    finally
      Form.Free;
      Form := nil;
    end;
  end;
end;

function TFrmPrincipalPreVenda.ChamaInputBox(const ACaption,
  APrompt: string): string;
var
  Form: TForm;
  Prompt: TLabel;
  cbxFornecedor: TComboBox;
  DialogUnits: TPoint;
  ButtonTop, ButtonWidth, ButtonHeight: Integer;
  Value: string;
  i: Integer;
  Buffer: array [0 .. 51] of Char;
begin
  result := '';
  Form := TForm.Create(Application);
  with Form do
  begin
    try
      Canvas.Font := Font;
      for i := 0 to 25 do
        Buffer[i] := Chr(i + Ord('A'));
      for i := 0 to 25 do
        Buffer[i + 26] := Chr(i + Ord('a'));
      GetTextExtentPoint(Canvas.handle, Buffer, 52, TSize(DialogUnits));
      DialogUnits.x := DialogUnits.x div 52;
      BorderStyle := bsDialog;
      caption := ACaption;
      ClientWidth := MulDiv(180, DialogUnits.x, 4);
      ClientHeight := MulDiv(63, DialogUnits.y, 8);
      Position := poScreenCenter;
      Prompt := TLabel.Create(Form);
      with Prompt do
      begin
        Parent := Form;
        AutoSize := True;
        Left := MulDiv(8, DialogUnits.x, 4);
        Top := MulDiv(8, DialogUnits.y, 8);
        caption := APrompt;
      end;
      cbxFornecedor := TComboBox.Create(Form);
      with cbxFornecedor do
      begin
        Parent := Form;
        Left := Prompt.Left;
        Top := MulDiv(19, DialogUnits.y, 8);
        width := MulDiv(164, DialogUnits.x, 4);
        Style := csDropDownList;
        // MaxLength := 255;
        // aqui vc pode adicionar a data de como vai ser exibida no input:
        // EditMask := '99/99/9999';
        // PasswordChar := '*';
        // SelectAll;
        With FrmPrincipalPreVenda.adoEntrada do
        begin // monta a combo dos clientes
          sql.Text :=
            'SELECT P.nmPessoa,P.cdPessoa,E.nmLogradouro,E.dsUF,T.dsNaturalidade as Apelido,C.dsPreVenda,    '
            + 'C.vlDescVista,C.vlDescPrazo,C.dsVista,C.DSLIMCREDITO                                      '
            + 'FROM P_Fisica T WITH (NOLOCK) INNER JOIN Endereco E WITH (NOLOCK) ON T.cdPessoa = E.cdPessoa INNER '
            + 'JOIN Pessoa P WITH (NOLOCK) ON T.cdPessoa = P.cdPessoa LEFT JOIN Cliente C WITH (NOLOCK) '
            + 'ON C.cdPessoa = P.cdPessoa AND E.cdPessoa = P.cdPessoa Where (P.Ser = ''F'') and P.dsAtivo = ''S'' ';
          if (UpperCase(vEmpresa) = 'CAMARATUBA') OR
            (UpperCase(vEmpresa) = 'CARDOSOACESSORIOS') then
            sql.Add('and C.cdCodigo <> 2 ');
          sql.Add('union ');
          sql.Add('SELECT P.nmPessoa,P.cdPessoa,E.nmLogradouro,E.dsUF,T.nmRazao as Apelido,C.dsPreVenda,');
          sql.Add('C.vlDescVista,C.vlDescPrazo,C.dsVista,C.DSLIMCREDITO                          ');
          sql.Add('FROM P_Juridica T WITH (NOLOCK) INNER JOIN Endereco E WITH (NOLOCK) ON T.cdPessoa = E.cdPessoa  ');
          sql.Add('INNER JOIN Pessoa P WITH (NOLOCK) ON T.cdPessoa = P.cdPessoa LEFT JOIN Cliente C WITH (NOLOCK)  ');
          sql.Add('ON C.cdPessoa = P.cdPessoa AND E.cdPessoa = P.cdPessoa Where (P.Ser = ''F'') and P.dsAtivo = ''S'' ');
          if (UpperCase(vEmpresa) = 'CAMARATUBA') OR
            (UpperCase(vEmpresa) = 'CARDOSOACESSORIOS') then
            sql.Add('and C.cdCodigo <> 2 ');
          sql.Add('Order By P.nmPessoa ');
          MontaComboListBoolADO(FrmPrincipalPreVenda.adoEntrada, cbxFornecedor);
        end;
      end;
      ButtonTop := MulDiv(41, DialogUnits.y, 8);
      ButtonWidth := MulDiv(50, DialogUnits.x, 4);
      ButtonHeight := MulDiv(14, DialogUnits.y, 8);
      with TButton.Create(Form) do
      begin
        Parent := Form;
        caption := 'OK';
        ModalResult := mrOK;
        Default := True;
        SetBounds(MulDiv(38, DialogUnits.x, 4), ButtonTop, ButtonWidth,
          ButtonHeight);
      end;
      with TButton.Create(Form) do
      begin
        Parent := Form;
        caption := 'Cancel';
        ModalResult := mrCancel;
        Cancel := True;
        SetBounds(MulDiv(92, DialogUnits.x, 4), ButtonTop, ButtonWidth,
          ButtonHeight);
      end;
      if ShowModal = mrOK then
      begin
        FrmPrincipalPreVenda.adoEntrada.open;
        if FrmPrincipalPreVenda.adoEntrada.Locate('nmPessoa',
          cbxFornecedor.Text, []) then
          Value := FrmPrincipalPreVenda.adoEntrada.FieldByName
            ('cdPessoa').AsString
        else
          Value := '';
        result := Value;
      end;
    finally
      Form.Free;
      Form := nil;
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.AuxiliarLanctoNFe(i: Integer);
begin
  SgDados.Cells[0, i] := ADOQryProcura.FieldByName('cdProduto').AsString;
  SgDados.Cells[1, i] := ADOQryProduto.FieldByName('nmProduto').AsString;
  SgDados.Cells[2, i] :=
    FloatToStr(RoundTo(ADOQryProcura.FieldByName('nrQtd').AsFloat,
    vCasasQtd * -1));
  SgDados.Cells[3, i] :=
    FloatToStr(RoundTo(ADOQryProcura.FieldByName('VLUNITARIO_DESC').AsFloat,
    vCasasPreco * -1));
  SgDados.Cells[4, i] :=
    FloatToStr(RoundTo(ADOQryProcura.FieldByName('nrQtd').AsFloat *
    ADOQryProcura.FieldByName('VLUNITARIO_DESC').AsFloat, -2));
  EdtTotal.Text := FloatToStr(RoundTo(StrToFloat(EdtTotal.Text) +
    (StrToFloat(SgDados.Cells[9, i]) * StrToFloat(SgDados.Cells[2, i])), -2));
  SgDados.Cells[6, i] := ADOQryProduto.FieldByName('cdFabricante').AsString;
  SgDados.Cells[7, i] := ADOQryProduto.FieldByName('dsReferencia').AsString;
  SgDados.Cells[8, i] := ADOQryProduto.FieldByName('nrQtdReal').AsString;
  SgDados.Cells[9, i] :=
    FloatToStr(RoundTo(ADOQryProcura.FieldByName('vlDesconto').AsFloat,
    vCasasPreco * -1));
  edtValorBruto.Text :=
    FloatToStr(RoundTo(StrToFloat(edtValorBruto.Text) +
    (StrToFloat(SgDados.Cells[9, i]) * StrToFloat(SgDados.Cells[2, i])), -2));
end;

procedure TFrmPrincipalPreVenda.Importarvendasexternas1Click(Sender: TObject);
begin
  if StrToFloat(EdtTotal.Text) > 0 then
  begin
    ShowMessage('Existe um orçamento ou uma pré-venda em andamento!');
    exit;
  end;
  FrmListaPedidos := TFrmListaPedidos.Create(Application); // Cria o formulário
  // vobs_Venda_Externa := '';
  FrmListaPedidos.Position := poMainFormCenter;
  FrmListaPedidos.DtInicial.Date := Date;
  FrmListaPedidos.Dt_Final.DateTime := Date;
  FrmListaPedidos.ShowModal;
end;

// quantidade do produto em um lote na StringGrid sgDados
function TFrmPrincipalPreVenda.QuantidadeNoLoteNaGrid(nrLote: string;
  cdProduto: Integer; cdFabricanteLote: Integer): Real;
var
  i: Integer;
  resultado: Real;
begin
  resultado := 0;
  for i := 1 to SgDados.RowCount - 1 do
  begin
    if (SgDados.Cells[13, i] = nrLote) and
      (SgDados.Cells[0, i] = intToStr(cdProduto)) then
    // and (sgDados.Cells[16,i] = IntToStr(cdFabricanteLote))
    begin
      resultado := resultado + StrToFloatDef(SgDados.Cells[2, i], 0);
    end;
  end;
  result := resultado;
end;

function TFrmPrincipalPreVenda.QuantidadePositiva: Boolean;
{ Verifica se algum produto esta com a quantidade a ser vendida menor que zero }
var
  i: Integer;
  resultado: Boolean;
begin
  resultado := True;
  if (RgOpcoes.ItemIndex = 0) then
  begin
    for i := 0 to prevenda.itens.Count - 1 do
    begin
      if prevenda.itens[i].quantidade <= 0 then
      begin
        Application.MessageBox
          (PWideChar('O produto ' + prevenda.itens[i].descricao +
          ' está com a quantidade zerada ou negativa.' + #13#10 +
          'Para excluí-lo da pré venda dê dois cliques no item!'), 'Atenção',
          mb_Ok + MB_ICONWARNING + MB_APPLMODAL);
        resultado := false;
        Break;
      end;
    end;
  end;
  result := resultado;
end;

// função para calcular a quantidade disponível no lote (qtdlote - prevendas abertas - já inseridos na prevenda atual)
function TFrmPrincipalPreVenda.QuantidadeDispNoLote(nrLote: string;
  cdProduto: Integer; cdFabricanteLote: Integer): Real;
var
  query: TADOQuery;
  QtdLote, qtdPrevendas, qtdAtual, resultado: Real;
  banco_deposito: string;
begin
  query := TADOQuery.Create(self);
  query.Connection := DModulo.Conexao;
  with query do
  begin
    // PEGO A QUANTIDADE NAS TABELAS ITELOTE (LOJA + DEPÓSITO)
    // if (UpperCase(vEmpresa) = 'PBFARMA') then
    // begin
    // Connection := DModulo.ADODeposito;
    // SQL.Text := 'SELECT DB_NAME() AS DataBaseName';
    // Open;
    // banco_deposito := '[' + fieldbyname('DataBaseName').asString + ']' + '.dbo.';
    // Connection := DModulo.Conexao;
    // SQL.Text:= 'select sum(LOTE.nrQtd) as nrQtd '+
    // 'from	(select nrqtd FROM ITELOTE where (cdproduto = :CODIGO1) and (nrLote =:LOTE1) and (cdFabricante=:CDFABRICANTE1) '+
    // '	 union all '+
    // '	 select nrqtd FROM ' + banco_deposito + 'ITELOTE where (cdproduto = :CODIGO2) and (nrLote =:LOTE2) and (cdFabricante=:CDFABRICANTE2)) as LOTE';
    // Parameters.ParamByName('CODIGO1').Value:= cdproduto;
    // Parameters.ParamByName('CODIGO2').Value:= cdproduto;
    // Parameters.ParamByName('LOTE1').Value:= nrlote;
    // Parameters.ParamByName('LOTE2').Value:= nrlote;
    // Parameters.ParamByName('CDFABRICANTE1').Value:= cdFabricanteLote;
    // Parameters.ParamByName('CDFABRICANTE2').Value:= cdFabricanteLote;
    // end
    // else

    { }
    begin
      sql.Text :=
        'select isnull(sum(isnull(nrqtd,0)),0) nrqtd FROM ITELOTE WITH (NOLOCK) where cdproduto = :CODIGO and nrLote =:LOTE ';
      // cdfabricante = :cdfabricante
      Parameters.ParamByName('CODIGO').Value := cdProduto;
      Parameters.ParamByName('LOTE').Value := nrLote;
      // Parameters.ParamByName('cdfabricante').Value:= cdFabricanteLote;
    end;
    open;
    QtdLote := FieldByName('nrqtd').AsFloat;
    // DIMINUO A QUANTIDADE JÁ USADA NAS PREVENDAS
    sql.Text := 'select sum(i.nrqtd) as nrqtd               ' +
      'from iteorcamento i WITH (NOLOCK) inner join orcamento o WITH (NOLOCK) '
      + '	on i.nrorcamento= o.nrorcamento          ' +
      'where o.nrobjeto = 0                       ' +
      '	and o.dsimpresso = ''N''                 ' +
      '	and i.dssituacao <> ''C''                ' +
      '	and i.cdproduto = :cdproduto             ' +
      '	and i.nrLote = :nrLote                   ';
    // '  and i.cdpessoa = :cdfabricante ';
    Parameters.ParamByName('cdproduto').Value := cdProduto;
    Parameters.ParamByName('nrLote').Value := nrLote;
    // Parameters.ParamByName('cdfabricante').Value:= cdFabricanteLote;
    open;
    qtdPrevendas := FieldByName('nrqtd').AsFloat;
    // DIMINUO A QUANTIDADE JÁ USADA NA GRID
    qtdAtual := QuantidadeNoLoteNaGrid(nrLote, cdProduto, cdFabricanteLote);
  end;
  FreeAndNil(query);
  resultado := QtdLote - qtdPrevendas - qtdAtual;
  if resultado < 0 then
    resultado := 0;
  result := resultado;
end;

procedure TFrmPrincipalPreVenda.CbLoteChange(Sender: TObject);
var
  lote: string;
  cdProduto, cdFabricanteLote: Integer;
begin
  lote := copy_campo(CbLote.Text, '|', 1);
  cdFabricanteLote := StrToInt(copy_campo(CbLote.Text, '|', 4));
  cdProduto := ADOSPConsulta.FieldByName('Código').AsInteger;
  setLabel23(QuantidadeDispNoLote(lote, cdProduto, cdFabricanteLote));
end;

// coloca no caption do label23 a quantidade disponível no lote selecionado
procedure TFrmPrincipalPreVenda.setLabel23(quantidade: Real);
begin
  Label23.caption := 'Quant. disponível: ' + FloatToStr(quantidade);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaLayeVictorArgoxOS214;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0500');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H09');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('111100000640012' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('131100000020013' + 'R$ ' + SgDados.Cells[3, L]); // preco
    Editor.Lines.Add('1F2203100200011' + trim(SgDados.Cells[6, L]));
    // Cod. Barra
    Editor.Lines.Add('131100000020154' + 'R$ ' + SgDados.Cells[3, L]); // preco
    Editor.Lines.Add('131100000020295' + 'R$ ' + SgDados.Cells[3, L]); // preco
    Editor.Lines.Add('111100000640152' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('1F2203100200151' + trim(SgDados.Cells[6, L]));
    // Cod. Barra
    Editor.Lines.Add('111100000640294' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('1F2203100200293' + trim(SgDados.Cells[6, L]));
    // Cod. Barra
    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('Q' + FormatFloat('0000', vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.EdtCFOPExit(Sender: TObject);
var
  cfop, UF_cliente, mensagem_retorno: string;
begin
  if CbxCliente.ItemIndex <> -1 then
  begin
    cfop := EdtCFOP.Text;
    UF_cliente := ADOQryCliente.FieldByName('dsUF').AsString;
    if not ValidarCFOP(cfop, false, UF_cliente, mensagem_retorno,
      DModulo.Conexao.ConnectionString) and (cfop <> '') then
    begin
      Application.OnMessage := FormPrincipal.NaoProcessaMsg;
      MessageDlg(mensagem_retorno, mtWarning, [mbOK], 0);
      Application.OnMessage := FormPrincipal.ProcessaMsg;
      EdtCFOP.Clear;
      EdtCFOP.Setfocus;
      exit;
    end;
  end
  else
  begin
    if (trim(CbxCliente.Text) = '') and (CbxCliente.Enabled) then
    begin
      ShowMessage
        ('Para validar o campo CFOP, é necessário selecionar um cliente na caixa acima.');
      CbxCliente.Setfocus;
    end;
  end;
end;

function TFrmPrincipalPreVenda.GetVersaoArq: string;
var
  VerInfoSize: DWORD;
  VerInfo: Pointer;
  VerValueSize: DWORD;
  VerValue: PVSFixedFileInfo;
  Dummy: DWORD;
  versao: String;
begin
  VerInfoSize := GetFileVersionInfoSize(PWideChar(ParamStr(0)), Dummy);
  GetMem(VerInfo, VerInfoSize);
  GetFileVersionInfo(PWideChar(ParamStr(0)), 0, VerInfoSize, VerInfo);
  VerQueryValue(VerInfo, '\', Pointer(VerValue), VerValueSize);
  with VerValue^ do
  begin
    versao := intToStr(dwFileVersionMS shr 16);
    versao := versao + '.' + intToStr(dwFileVersionMS and $FFFF);
    versao := versao + '.' + intToStr(dwFileVersionLS shr 16);
    versao := versao + '.' + intToStr(dwFileVersionLS and $FFFF);
  end;
  result := (versao);
  FreeMem(VerInfo, VerInfoSize);
end;

procedure TFrmPrincipalPreVenda.salvarPosicaoColunasDbGrid1;
var
  SupportIni: TIniFile; // Variáveis que irão cahamar o support.ini
  i: Integer;
begin
  SupportIni := TIniFile.Create(ExtractFilePath(Application.ExeName) +
    'Support.ini');
  try
    for i := 0 to DBGrid1.Columns.Count - 1 do
    begin
      SupportIni.WriteString('FrmPrincipalPreVenda.dbGrid1', intToStr(i),
        DBGrid1.Columns[i].fieldName + '|' +
        intToStr(DBGrid1.Columns[i].width));
    end;
  except
    SupportIni.Free;
    exit;
  end;
  SupportIni.Free;
end;

{ Carrega a última posição das colunas da DBGrid1 que ficou salva no support.ini }
procedure TFrmPrincipalPreVenda.carregarPosicaoColunasDbGrid1;
var
  SupportIni: TIniFile; // Variáveis que irão cahamar o support.ini
  i, indiceAtual: Integer;
  fieldName: string;
  tamanho: Integer;
begin
  SupportIni := TIniFile.Create(ExtractFilePath(Application.ExeName) +
    'Support.ini');
  for i := 0 to DBGrid1.Columns.Count - 1 do
  begin
    fieldName := copy_campo
      (SupportIni.ReadString('FrmPrincipalPreVenda.dbGrid1', intToStr(i),
      ''), '|', 1);
    tamanho := StrToIntDef
      (copy_campo(SupportIni.ReadString('FrmPrincipalPreVenda.dbGrid1',
      intToStr(i), ''), '|', 2), -1);
    if fieldName <> '' then
    begin
      indiceAtual := IndexOfDbGrid(DBGrid1, fieldName);
      if indiceAtual > -1 then
        trocarColunaDbGrid(DBGrid1, indiceAtual, i, tamanho);
    end;
  end;
  SupportIni.Free;
end;

procedure TFrmPrincipalPreVenda.DBGrid1ColumnMoved(Sender: TObject;
  FromIndex, ToIndex: Integer);
begin
  salvarPosicaoColunasDbGrid1;
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaBrumar_Nova;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  vetorEtiqueta: array [1 .. 900] of Integer;
  x, z, cont: Integer;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;

  cont := 0;
  for x := 1 to SgDados.RowCount do
  begin
    if SgDados.Cells[0, x] = '' then
    begin
      cont := cont + 1;
      vetorEtiqueta[cont] := 99;
      // Break;
    end
    else
    begin
      for z := 1 to Trunc(StrToFloat(SgDados.Cells[2, x])) do
      begin
        cont := cont + 1;
        vetorEtiqueta[cont] := x;
      end;
    end;
  end;
  if Frac(cont / 2) = 0.00 then
    vqtd := cont / 2
  else
    vqtd := (StrToInt(FormatFloat('0', cont)) div 2) + 1;
  L := Trunc(vqtd);
  cont := 1;
  Editor.Lines.Clear;
  for x := 1 to L do
  begin // Salvando os itens da pré-venda.
    if vetorEtiqueta[cont] = 99 then
      Break;

    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0394');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H09');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');

    Editor.Lines.Add('1F3303500260032' + SgDados.Cells[6, vetorEtiqueta[cont]]);
    // código de barras produto
    Editor.Lines.Add('121100000910053' +
      trim(Copy(SgDados.Cells[1, vetorEtiqueta[cont]], 1, 20))); // descrição
    // if SgDados.Cells[7,vetorEtiqueta[cont]] <> '' then
    // Editor.Lines.Add('191100101540009REF: '+SgDados.Cells[7,vetorEtiqueta[cont]]) //referencia
    // else
    // Editor.Lines.Add('191100101540009'+SgDados.Cells[7,vetorEtiqueta[cont]]);
    Editor.Lines.Add('121100000770053' +
      trim(Copy(SgDados.Cells[1, vetorEtiqueta[cont]], 21, 20))); // descrição
    if SgDados.Cells[3, vetorEtiqueta[cont]] <> '' then
    begin
      if StrToFloat(FormatFloat('0.00', StrToFloat(SgDados.Cells[3,
        vetorEtiqueta[cont]]))) <
        StrToFloat(FormatFloat('0.00', PegaValorVarejo(StrToInt(SgDados.Cells[0,
        vetorEtiqueta[cont]])))) then
      begin // esta em promocao
        Editor.Lines.Add('121100000130030De:');
        Editor.Lines.Add('121100000130047' + FormatFloat('0.00',
          PegaValorVarejo(StrToInt(SgDados.Cells[0, vetorEtiqueta[cont]]))));
        Editor.Lines.Add('121100000010060Por:');
        Editor.Lines.Add('131100000010084' + FormatFloat('0.00',
          StrToFloat(SgDados.Cells[3, vetorEtiqueta[cont]])));
      end
      else
        Editor.Lines.Add('141100000040039R$ ' + FormatFloat('0.00',
          StrToFloat(SgDados.Cells[3, vetorEtiqueta[cont]]))); // valor
    end
    else
      Editor.Lines.Add('141100000040039' + SgDados.Cells[3, vetorEtiqueta[cont]
        ]); // valor
    Editor.Lines.Add('1F3303500260228' + SgDados.Cells[6,
      vetorEtiqueta[cont + 1]]); // código de barras produto
    Editor.Lines.Add('121100000910250' +
      trim(Copy(SgDados.Cells[1, vetorEtiqueta[cont + 1]], 1, 20)));
    // if SgDados.Cells[7,vetorEtiqueta[cont+1]] <> '' then begin
    // Editor.Lines.Add('191100101540151REF:'+SgDados.Cells[7,vetorEtiqueta[cont+1]]);  //referencia
    // end
    // else
    // Editor.Lines.Add('191100101540151'+SgDados.Cells[7,vetorEtiqueta[cont+1]]);  //referencia
    Editor.Lines.Add('121100000770250' +
      trim(Copy(SgDados.Cells[1, vetorEtiqueta[cont + 1]], 21, 20)));
    if SgDados.Cells[3, vetorEtiqueta[cont + 1]] <> '' then
    begin
      if StrToFloat(FormatFloat('0.00', StrToFloat(SgDados.Cells[3,
        vetorEtiqueta[cont + 1]]))) <
        StrToFloat(FormatFloat('0.00', PegaValorVarejo(StrToInt(SgDados.Cells[0,
        vetorEtiqueta[cont + 1]])))) then
      begin // esta em promocao
        Editor.Lines.Add('121100000130226De:');
        Editor.Lines.Add('121100000130243' + FormatFloat('0.00',
          PegaValorVarejo(StrToInt(SgDados.Cells[0,
          vetorEtiqueta[cont + 1]]))));
        Editor.Lines.Add('121100000010256Por:');
        Editor.Lines.Add('131100000010280' + FormatFloat('0.00',
          StrToFloat(SgDados.Cells[3, vetorEtiqueta[cont + 1]])));
      end
      else
        Editor.Lines.Add('141100000040231R$ ' + FormatFloat('0.00',
          StrToFloat(SgDados.Cells[3, vetorEtiqueta[cont + 1]])));
    end
    else
      Editor.Lines.Add('141100000040231' + SgDados.Cells[3,
        vetorEtiqueta[cont + 1]]);
    if SgDados.Cells[0, vetorEtiqueta[cont]] <> '' then
      Editor.Lines.Add('421100000490037Cd:' + SgDados.Cells[0,
        vetorEtiqueta[cont]])
    else
      Editor.Lines.Add('421100000490037' + SgDados.Cells[0,
        vetorEtiqueta[cont]]);
    if SgDados.Cells[0, vetorEtiqueta[cont + 1]] <> '' then
      Editor.Lines.Add('421100000430232Cd:' + SgDados.Cells[0,
        vetorEtiqueta[cont + 1]])
    else
      Editor.Lines.Add('421100000430232' + SgDados.Cells[0,
        vetorEtiqueta[cont + 1]]);
    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    Editor.Lines.Add('Q' + FormatFloat('0000', 1));
    Editor.Lines.Add('E');
    cont := cont + 2;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

// procedure TFrmPrincipalPreVenda.ImprimeEtiquetaParPerfeito;
// var L : integer;
// Arq : TextFile;
// vQtd : real;
// vetorEtiqueta : array[1..900] of integer;
// x,z,cont : integer;
// begin
// //if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
// if SgDados.Cells[0,1] = '' then begin
// Messagedlg('Não foi lançado nenhum item para impressão das etiquetas!', mtWarning, [mbOk], 0);
// EdtConsulta.Setfocus;
// exit;
// end;
//
// cont := 0;
// for x := 1 to SgDados.RowCount do begin
// if SgDados.Cells[0,x] = '' then begin
// cont := cont + 1;
// vetorEtiqueta[cont] := 99;
// //Break;
// end
// else begin
// for z := 1 to Trunc(StrtoFloat(SgDados.Cells[2,x])) do begin
// cont := cont + 1;
// vetorEtiqueta[cont] := x;
// end;
// end;
// end;
// if Frac(cont/3) = 0.00 then
// vQtd := cont/3
// else
// vQtd := (StrToint(FormatFloat('0',cont)) div 3) + 1;
// L := Trunc(vQtd);
// cont := 1;
// Editor.Lines.Clear;
// for x := 1 to L do begin // Salvando os itens da pré-venda.
// if vetorEtiqueta[cont] = 99 then Break;
//
// Editor.Lines.Add('c0000');
// Editor.Lines.Add('KI503');
// Editor.Lines.Add('O0220');
// Editor.Lines.Add('f220');
// Editor.Lines.Add('KW0417');
// Editor.Lines.Add('KI7');
// Editor.Lines.Add('V0');
// Editor.Lines.Add('L');
// Editor.Lines.Add('H12');
// Editor.Lines.Add('PC');
// Editor.Lines.Add('A2');
// Editor.Lines.Add('D11');
// Editor.Lines.Add('1Y1100001720038PB1');
//
// Editor.Lines.Add('1F2203700770018'+ SgDados.Cells[6,vetorEtiqueta[cont]]); //código de barras produto
// Editor.Lines.Add('121100001410009'+ Trim(Copy(SgDados.Cells[1,vetorEtiqueta[cont]],1,20))); //descrição
// if SgDados.Cells[7,vetorEtiqueta[cont]] <> '' then
// Editor.Lines.Add('191100101540009REF: '+SgDados.Cells[7,vetorEtiqueta[cont]]) //referencia
// else
// Editor.Lines.Add('191100101540009'+SgDados.Cells[7,vetorEtiqueta[cont]]);
// Editor.Lines.Add('121100001260009'+ Trim(Copy(SgDados.Cells[1,vetorEtiqueta[cont]],21,20))); //descrição
// if SgDados.Cells[3,vetorEtiqueta[cont]] <> '' then
// Editor.Lines.Add('141100000250014R$ '+SgDados.Cells[3,vetorEtiqueta[cont]]) //valor
// else
// Editor.Lines.Add('141100000250014'+SgDados.Cells[3,vetorEtiqueta[cont]]); //valor
// Editor.Lines.Add('1F2203700770160'+SgDados.Cells[6,vetorEtiqueta[cont+1]]);  //código de barras produto
// Editor.Lines.Add('121100001410151'+ Trim(Copy(SgDados.Cells[1,vetorEtiqueta[cont+1]],1,20)));
// if SgDados.Cells[7,vetorEtiqueta[cont+1]] <> '' then begin
// Editor.Lines.Add('191100101540151REF:'+SgDados.Cells[7,vetorEtiqueta[cont+1]]);  //referencia
// Editor.Lines.Add('1Y1100001720178PB2');
// end
// else
// Editor.Lines.Add('191100101540151'+SgDados.Cells[7,vetorEtiqueta[cont+1]]);  //referencia
// Editor.Lines.Add('121100001260151'+ Trim(Copy(SgDados.Cells[1,vetorEtiqueta[cont+1]],21,20)));
// if SgDados.Cells[3,vetorEtiqueta[cont+1]] <> '' then
// Editor.Lines.Add('141100000250152R$ '+SgDados.Cells[3,vetorEtiqueta[cont+1]])
// else
// Editor.Lines.Add('141100000250152'+SgDados.Cells[3,vetorEtiqueta[cont+1]]);
// Editor.Lines.Add('1F2203700770302'+SgDados.Cells[6,vetorEtiqueta[cont+2]]);  //código de barras produto
// Editor.Lines.Add('121100001410293'+ Trim(Copy(SgDados.Cells[1,vetorEtiqueta[cont+2]],1,20)));
// if SgDados.Cells[7,vetorEtiqueta[cont+2]] <> '' then begin
// Editor.Lines.Add('191100101540293REF:'+SgDados.Cells[7,vetorEtiqueta[cont+2]]); //referencia
// Editor.Lines.Add('1Y1100001720320PB3');
// end
// else
// Editor.Lines.Add('191100101540293'+SgDados.Cells[7,vetorEtiqueta[cont+2]]); //referencia
// Editor.Lines.Add('121100001260293'+ Trim(Copy(SgDados.Cells[1,vetorEtiqueta[cont+2]],21,20)));
// if SgDados.Cells[3,vetorEtiqueta[cont+2]] <> '' then
// Editor.Lines.Add('141100000250294R$ '+SgDados.Cells[3,vetorEtiqueta[cont+2]])
// else
// Editor.Lines.Add('141100000250294'+SgDados.Cells[3,vetorEtiqueta[cont+2]]);
//
// Editor.Lines.Add('^01');
// // Cálculo para imprimir a qtd de etiquetas certo
// Editor.Lines.Add('Q'+ FormatFloat('0000',1));
// Editor.Lines.Add('E');
// cont := cont + 3;
// end;
// Editor.Lines.SaveToFile(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName)+'etiqueta.txt')));
// WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName)+'print2.bat')),sw_ShowNormal);
// if not FileExists('Print2.bat') then
// ShowMessage('Não foi encontrado o arquivo Print2.bat');
// Application.OnMessage := FormPrincipal.ProcessaMsg;
// Limpar_Tela;
// RgOpcoes.ItemIndex := 0;
// Messagedlg('Impressão ok!', mtInformation, [mbOk], 0);
// end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaParPerfeito;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  vetorEtiqueta: array [1 .. 900] of Integer;
  x, z, cont: Integer;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;

  cont := 0;
  for x := 1 to SgDados.RowCount do
  begin
    if SgDados.Cells[0, x] = '' then
    begin
      cont := cont + 1;
      vetorEtiqueta[cont] := 99;
      // Break;
    end
    else
    begin
      for z := 1 to Trunc(StrToFloat(SgDados.Cells[2, x])) do
      begin
        cont := cont + 1;
        vetorEtiqueta[cont] := x;
      end;
    end;
  end;
  vqtd := cont / 2;
  L := Trunc(vqtd);
  cont := 1;

  Editor.Lines.Clear;
  for x := 1 to L do
  begin // Salvando os itens da pré-venda.
    if (vetorEtiqueta[cont] = 99) or (vetorEtiqueta[cont] = 0) then
      Break;

    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0335');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    // Editor.Lines.Add('1Y1100002300030PB1');

    Editor.Lines.Add('1Y1100002450222PB1');
    Editor.Lines.Add('121100001150029_____/______/_______');
    Editor.Lines.Add('111100001320022* PRAZO PARA TROCA ATE 15 DIAS');
    Editor.Lines.Add('141100000380032R$ ' + SgDados.Cells[3,
      vetorEtiqueta[cont]]);
    Editor.Lines.Add('121100001630030' +
      trim(Copy(SgDados.Cells[1, vetorEtiqueta[cont]], 1, 20)));
    Editor.Lines.Add('121100001480030' +
      trim(Copy(SgDados.Cells[1, vetorEtiqueta[cont]], 21, 20)));
    Editor.Lines.Add('191100101750030REF: ' + TNEGProduto.buscarProduto
      (StrToInt(SgDados.Cells[0, vetorEtiqueta[cont]])).referenciaInterna);
    // codigo
    Editor.Lines.Add('1Y1100002300193PB8');
    Editor.Lines.Add('1F2203301910034' + SgDados.Cells[6, vetorEtiqueta[cont]]);
    // cod barras

    if trim(Copy(SgDados.Cells[1, vetorEtiqueta[cont + 1]], 1, 20)) <> '' then
    begin
      Editor.Lines.Add('121100001150192_____/______/_______');
      Editor.Lines.Add('111100001320185* PRAZO PARA TROCA ATE 15 DIAS');
      Editor.Lines.Add('141100000380195R$ ' + SgDados.Cells[3,
        vetorEtiqueta[cont + 1]]);
      Editor.Lines.Add('121100001630193' +
        trim(Copy(SgDados.Cells[1, vetorEtiqueta[cont + 1]], 1, 20)));
      Editor.Lines.Add('121100001480193' +
        trim(Copy(SgDados.Cells[1, vetorEtiqueta[cont + 1]], 21, 20)));
      Editor.Lines.Add('191100101750193REF: ' + TNEGProduto.buscarProduto
        (StrToInt(SgDados.Cells[0, vetorEtiqueta[cont + 1]]))
        .referenciaInterna); // codigo
      // Editor.Lines.Add('1Y1100002300193PB8');
      Editor.Lines.Add('1Y1100002450056PB2');
      Editor.Lines.Add('1F2203301920199' + SgDados.Cells[6,
        vetorEtiqueta[cont + 1]]); // cod barras
    end;

    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    Editor.Lines.Add('Q' + FormatFloat('0000', 1));
    Editor.Lines.Add('E');
    cont := cont + 2;
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);

  // var L : integer;
  // Arq : TextFile;
  // vQtd : real;
  // vetorEtiqueta : array[1..900] of integer;
  // x,z,cont : integer;
  // begin
  // //if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  // if SgDados.Cells[0,1] = '' then begin
  // Messagedlg('Não foi lançado nenhum item para impressão das etiquetas!', mtWarning, [mbOk], 0);
  // EdtConsulta.Setfocus;
  // exit;
  // end;
  //
  // cont := 0;
  // for x := 1 to SgDados.RowCount do begin
  // if SgDados.Cells[0,x] = '' then begin
  // cont := cont + 1;
  // vetorEtiqueta[cont] := 99;
  // //Break;
  // end
  // else begin
  // for z := 1 to Trunc(StrtoFloat(SgDados.Cells[2,x])) do begin
  // cont := cont + 1;
  // vetorEtiqueta[cont] := x;
  // end;
  // end;
  // end;
  /// /  if Frac(cont/3) = 0.00 then
  /// /     vQtd := cont/3
  /// /  else
  /// /     vQtd := (StrToint(FormatFloat('0',cont)) div 3) + 1;
  // vQtd := 2;
  // L := Trunc(vQtd);
  // cont := 1;
  // Editor.Lines.Clear;
  // for x := 1 to L do begin // Salvando os itens da pré-venda.
  // if (vetorEtiqueta[cont] = 99) or (vetorEtiqueta[cont] = 0) then Break;
  //
  // Editor.Lines.Add('c0000');
  // Editor.Lines.Add('KI503');
  // Editor.Lines.Add('O0220');
  // Editor.Lines.Add('f220');
  // Editor.Lines.Add('KW0335');
  // Editor.Lines.Add('KI7');
  // Editor.Lines.Add('V0');
  // Editor.Lines.Add('L');
  // Editor.Lines.Add('H12');
  // Editor.Lines.Add('PC');
  // Editor.Lines.Add('A2');
  // Editor.Lines.Add('D11');
  // Editor.Lines.Add('1Y1100002300030PB1');
  // Editor.Lines.Add('121100001150029_____/______/_______');
  // Editor.Lines.Add('111100001320022* PRAZO PARA TROCA ATE 15 DIAS');
  // Editor.Lines.Add('141100000380032R$ '+SgDados.Cells[3,vetorEtiqueta[cont]]);
  // Editor.Lines.Add('121100001630030'+ Trim(Copy(SgDados.Cells[1,vetorEtiqueta[cont]],1,20)));
  // Editor.Lines.Add('121100001480030'+ Trim(Copy(SgDados.Cells[1,vetorEtiqueta[cont]],21,20)));
  // Editor.Lines.Add('191100101750030REF: '+TNEGProduto.buscarProduto(StrtoInt(SgDados.Cells[0,vetorEtiqueta[cont]])).referenciaInterna);       //codigo
  // Editor.Lines.Add('1Y1100002300193PB8');
  // Editor.Lines.Add('1F2203301910034'+SgDados.Cells[6,vetorEtiqueta[cont]]); // cod barras
  //
  //
  // if Trim(Copy(SgDados.Cells[1,vetorEtiqueta[cont+1]],1,20)) <> '' then begin
  // Editor.Lines.Add('121100001150192_____/______/_______');
  // Editor.Lines.Add('111100001320185* PRAZO PARA TROCA ATE 15 DIAS');
  // Editor.Lines.Add('141100000380195R$ '+SgDados.Cells[3,vetorEtiqueta[cont+1]]);
  // Editor.Lines.Add('121100001630193'+ Trim(Copy(SgDados.Cells[1,vetorEtiqueta[cont+1]],1,20)));
  // Editor.Lines.Add('121100001480193'+ Trim(Copy(SgDados.Cells[1,vetorEtiqueta[cont+1]],21,20)));
  // Editor.Lines.Add('191100101750193REF: '+TNEGProduto.buscarProduto(StrtoInt(SgDados.Cells[0,vetorEtiqueta[cont+1]])).referenciaInterna);       //codigo
  // Editor.Lines.Add('1Y1100002300193PB8');
  // Editor.Lines.Add('1F2203301920199'+SgDados.Cells[6,vetorEtiqueta[cont+1]]); // cod barras
  // end;
  //
  // Editor.Lines.Add('^01');
  // // Cálculo para imprimir a qtd de etiquetas certo
  // Editor.Lines.Add('Q'+ FormatFloat('0000',1));
  // Editor.Lines.Add('E');
  // cont := cont + 2;
  // end;
  // Editor.Lines.SaveToFile(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName)+'etiqueta.txt')));
  // WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName)+'print2.bat')),sw_ShowNormal);
  // if not FileExists('Print2.bat') then
  // ShowMessage('Não foi encontrado o arquivo Print2.bat');
  // Application.OnMessage := FormPrincipal.ProcessaMsg;
  // Limpar_Tela;
  // RgOpcoes.ItemIndex := 0;
  // Messagedlg('Impressão ok!', mtInformation, [mbOk], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaPequenoTriploRural;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q792');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('A16,6,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A16,25,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 20) +
      '"'); // descricao

    if SgDados.Cells[6, L] <> '' then
    begin
      Editor.Lines.Add('A48,95,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
      // barra
      Editor.Lines.Add('B21,49,0,2,2,5,41,N,"' + SgDados.Cells[6, L] + '"');
      // barra
    end
    else
    begin
      Editor.Lines.Add('A48,95,0,2,1,1,N,"' + SgDados.Cells[0, L] + '"');
      // barra
      Editor.Lines.Add('B21,49,0,2,2,5,41,N,"' +
        Formatar13Digitos(SgDados.Cells[0, L]) + '"'); // barra
    end;
    Editor.Lines.Add('A272,6,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A272,25,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 20) +
      '"'); // descricao
    if SgDados.Cells[6, L] <> '' then
    begin
      Editor.Lines.Add('A304,95,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
      // barra
      Editor.Lines.Add('B277,49,0,2,2,5,41,N,"' + SgDados.Cells[6, L] + '"');
      // barra
    end
    else
    begin
      Editor.Lines.Add('A304,95,0,2,1,1,N,"' + SgDados.Cells[0, L] + '"');
      // barra
      Editor.Lines.Add('B277,49,0,2,2,5,41,N,"' +
        Formatar13Digitos(SgDados.Cells[0, L]) + '"'); // barra
    end;
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A527,6,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // descricao
    Editor.Lines.Add('A527,25,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 20) +
      '"'); // descricao
    if SgDados.Cells[6, L] <> '' then
    begin
      Editor.Lines.Add('A559,95,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
      // barra
      Editor.Lines.Add('B532,49,0,2,2,5,41,N,"' + SgDados.Cells[6, L] + '"');
      // barra
    end
    else
    begin
      Editor.Lines.Add('A559,95,0,2,1,1,N,"' + SgDados.Cells[0, L] + '"');
      // barra
      Editor.Lines.Add('B532,49,0,2,2,5,41,N,"' +
        Formatar13Digitos(SgDados.Cells[0, L]) + '"'); // barra
    end;
    Editor.Lines.Add('Q120,24');

    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;

  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);

end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaMEGA;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0236');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('1Y1100000020186PB1');
    Editor.Lines.Add('1f3303900080019' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('121100000750018CODIGO INTERNO....:' +
      TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]))
      .referenciaInterna); // codigo
    Editor.Lines.Add('121100001000018' + Copy(SgDados.Cells[1, L], 1, 26));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO
    Editor.Lines.Add('121100000870018' + Copy(SgDados.Cells[1, L], 27, 13));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO
    Editor.Lines.Add('121100000620018PRATELEIRA........:' + SgDados.Cells[5, L]
      ); // PRATILEIRA
    Editor.Lines.Add('121100000500018CODIGO FABRICANTE.:' +
      TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]))
      .referenciaFabrica);

    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaPoliana;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0415');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('1F2202400050022' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('191100100770015' + SgDados.Cells[0, L]); // codigo
    Editor.Lines.Add('191100300370015R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('191100100650015' + Copy(SgDados.Cells[1, L], 1, 20));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO
    Editor.Lines.Add('191100100530015' + Copy(SgDados.Cells[1, L], 21, 20));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO

    Editor.Lines.Add('1F2202300060159' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('191100100770152' + SgDados.Cells[0, L]); // codigo
    Editor.Lines.Add('191100300370152R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('191100100650152' + Copy(SgDados.Cells[1, L], 1, 20));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO
    Editor.Lines.Add('191100100530152' + Copy(SgDados.Cells[1, L], 21, 20));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO

    Editor.Lines.Add('1F2202200070298' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('191100100770291' + SgDados.Cells[0, L]); // codigo
    Editor.Lines.Add('191100300370291R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('191100100650291' + Copy(SgDados.Cells[1, L], 1, 20));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO
    Editor.Lines.Add('191100100530291' + Copy(SgDados.Cells[1, L], 21, 20));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO

    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaHIS;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0415');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');

    Editor.Lines.Add('131100002490075HIS');
    Editor.Lines.Add('131100002480255HIS');
    Editor.Lines.Add('111100002190021com a etiqueta fixada a peca');
    Editor.Lines.Add('111100002270021Troca em ate 15 dias');
    Editor.Lines.Add('111100002180210com a etiqueta fixada a peca');
    Editor.Lines.Add('111100002260210Troca em ate 15 dias');

    Editor.Lines.Add('121100001790019' + Copy(SgDados.Cells[1, L], 1, 20));
    Editor.Lines.Add('121100001640019' + Copy(SgDados.Cells[1, L], 21, 20));
    Editor.Lines.Add('1E1102401030036A' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1E1102200600037A' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1E1102300180037A' + SgDados.Cells[6, L]);
    Editor.Lines.Add('121100000060083R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('121100001770212' + Copy(SgDados.Cells[1, L], 1, 20));
    Editor.Lines.Add('121100001620212' + Copy(SgDados.Cells[1, L], 21, 20));
    Editor.Lines.Add('1E1102401030232A' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1E1102200600233A' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1E1102300180233A' + SgDados.Cells[6, L]);
    Editor.Lines.Add('121100000060279R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('121200001950028____/____/________');
    Editor.Lines.Add('121200001930216____/____/________');
    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaHITZ;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0330');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H09');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');

    Editor.Lines.Add('131100002270068HITZ');
    Editor.Lines.Add('131100002280243HITZ');
    Editor.Lines.Add('191100102080022Troca em ate 15 dias');
    Editor.Lines.Add('191100101960022com a etiqueta fixada a peca');
    Editor.Lines.Add('191100102090197Troca em ate 15 dias');
    Editor.Lines.Add('191100101970197com a etiqueta fixada a peca');
    Editor.Lines.Add('121100001780033____/____/______');
    Editor.Lines.Add('121100001790208____/____/______');

    Editor.Lines.Add('121100001640021' + Copy(SgDados.Cells[1, L], 1, 20));
    Editor.Lines.Add('121100001500021' + Copy(SgDados.Cells[1, L], 21, 20));
    Editor.Lines.Add('121100001650196' + Copy(SgDados.Cells[1, L], 1, 20));
    Editor.Lines.Add('121100001510196' + Copy(SgDados.Cells[1, L], 21, 20));

    Editor.Lines.Add('1l4202300700028' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1l4201600300028' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1l4201600300202' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1l4202400700202' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1l4202401160202' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1l4202301160028' + SgDados.Cells[6, L]);

    Editor.Lines.Add('191100101040050' + SgDados.Cells[6, L]);
    Editor.Lines.Add('191100101040220' + SgDados.Cells[6, L]);
    Editor.Lines.Add('191100100590050' + SgDados.Cells[6, L]);
    Editor.Lines.Add('191100100590220' + SgDados.Cells[6, L]);
    Editor.Lines.Add('191100100180051' + SgDados.Cells[6, L]);
    Editor.Lines.Add('191100100180221' + SgDados.Cells[6, L]);

    Editor.Lines.Add('121100000060099R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('121100000060275R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaNutriMix;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0413');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H09');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('131100000870075' + SgDados.Cells[1, L]);
    Editor.Lines.Add('141200000120247R$');
    Editor.Lines.Add('161200000130273' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('1F3305600120067' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('1Y1100000070007PB1');
    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaPR;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0429');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('131100000900060' + SgDados.Cells[1, L]);
    Editor.Lines.Add('1F3304400080050' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('161200000090265' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('132200000090228R$');
    Editor.Lines.Add('131100000690060' + SgDados.Cells[10, L]);
    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;


procedure TFrmPrincipalPreVenda.ImprimeEtiquetaDescontao;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    if (vAtacarejo = True) and (Produto.nrQtdAtacarejo > 0) and
      (Produto.vlAtacado < Produto.vlPreco) then
    begin
      Editor.Lines.Add('N');
      Editor.Lines.Add('R0,0');
      Editor.Lines.Add('ZT');
      Editor.Lines.Add('I8,0,001');
      Editor.Lines.Add('q832');
      Editor.Lines.Add('JY0000Kf00');
      Editor.Lines.Add('D15');
      Editor.Lines.Add('S2');
      Editor.Lines.Add('O');
      Editor.Lines.Add('JB');
      Editor.Lines.Add('JF');
      Editor.Lines.Add('A49,30,0,4,1,1,N,"' + SgDados.Cells[1, L] + '"');
      Editor.Lines.Add('X420,55,2,770,148');
      Editor.Lines.Add('X49,55,2,216,148');
      Editor.Lines.Add('X220,55,2,420,148');
      Editor.Lines.Add('A57,59,0,3,1,1,N,"A PARTIR DE"');
      Editor.Lines.Add('A108,82,0,4,2,2,N,"' +
        intToStr(Round(Produto.nrQtdAtacarejo)) + '"');
      Editor.Lines.Add('A68,129,0,3,1,1,N,"'+UpperCase(produto.unidade.dsDescricaoUnidade)+'"');
//    Roberto desistiu desse tipo de desconto
//      if UpperCase(produto.Grupo.nome) <> 'CEREAIS 2' then
//        Editor.Lines.Add('A228,66,0,4,2,3,N,"' + FormatFloat('0.00',
//          (produto.vlPreco*0.98)) + '"')
//      else
        Editor.Lines.Add('A228,66,0,4,2,3,N,"' + FormatFloat('0.00',
          produto.vlAtacado) + '"');
      Editor.Lines.Add('A423,104,0,3,1,2,N,"R$"');
      Editor.Lines.Add('A427,59,0,4,1,1,N,"VAREJO"');
      Editor.Lines.Add('A569,66,0,4,2,3,N,"' + FormatFloat('0.00',
        produto.vlPreco) + '"');
      Editor.Lines.Add('A427,165,0,3,1,1,N,"COD: ' + SgDados.Cells[0, L] + '"');
      Editor.Lines.Add('B49,154,0,1,3,6,56,N,"' + SgDados.Cells[6, L] + '"');
      Editor.Lines.Add('A133,214,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
      Editor.Lines.Add('Q6,0');
    end else
    begin
      Editor.Lines.Add('N');
      Editor.Lines.Add('R0,0');
      Editor.Lines.Add('ZT');
      Editor.Lines.Add('I8,0,001');
      Editor.Lines.Add('q832');
      Editor.Lines.Add('JY0000Kf00');
      Editor.Lines.Add('D15');
      Editor.Lines.Add('S2');
      Editor.Lines.Add('O');
      Editor.Lines.Add('JB');
      Editor.Lines.Add('JF');
      Editor.Lines.Add('A49,23,0,4,1,2,N,"' + SgDados.Cells[1, L] + '"');
      Editor.Lines.Add('X441,72,2,770,188');
      Editor.Lines.Add('A448,80,0,3,1,2,N,"R$"');
      Editor.Lines.Add('A554,80,0,5,1,2,N,"' + FormatFloat('0.00',
        produto.vlPreco) + '"');
      Editor.Lines.Add('A442,192,0,3,1,1,N,"COD: ' + SgDados.Cells[0, L] + '"');
      Editor.Lines.Add('B44,74,0,1,3,6,117,N,"' + SgDados.Cells[6, L] + '"');
      Editor.Lines.Add('A135,190,0,3,1,1,N,"' + SgDados.Cells[6, L] + '"');
      Editor.Lines.Add('Q18,0');
    end;
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + intToStr(Trunc(vqtd)));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaComplementusELGIN;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q1080');
    Editor.Lines.Add('JY0000Kf00D15');
    Editor.Lines.Add('S2');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('A12,32,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 1, 25)+'"');
    Editor.Lines.Add('A12,57,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 26, 25)+'"');
    Editor.Lines.Add('A12,106,0,4,1,1,N,"R$ ' + FormatFloat('0.00',
          StrToFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('A12,82,0,2,1,1,N,"CODIGO '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A12,135,0,2,1,1,N,"REF FAB. '+SgDados.Cells[7, L]+'"');

        Editor.Lines.Add('A300,32,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 1, 25)+'"');
    Editor.Lines.Add('A300,57,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 26, 25)+'"');
    Editor.Lines.Add('A300,106,0,4,1,1,N,"R$ ' + FormatFloat('0.00',
          StrToFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('A300,82,0,2,1,1,N,"CODIGO '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A300,135,0,2,1,1,N,"REF FAB. '+SgDados.Cells[7, L]+'"');

    Editor.Lines.Add('JF');

        Editor.Lines.Add('A587,32,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 1, 25)+'"');
    Editor.Lines.Add('A587,57,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 26, 25)+'"');
    Editor.Lines.Add('A587,106,0,4,1,1,N,"R$ ' + FormatFloat('0.00',
          StrToFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('A587,82,0,2,1,1,N,"CODIGO '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A587,135,0,2,1,1,N,"REF FAB. '+SgDados.Cells[7, L]+'"');

    Editor.Lines.Add('Q176,24');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + intToStr(Trunc(vqtd)));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaPrecoBom;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0417');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');

    Editor.Lines.Add('1F3304500090055' + trim(SgDados.Cells[6, L]));
    Editor.Lines.Add('131100000790064' +
      RetirarAcento(trim(SgDados.Cells[1, L])));
    Editor.Lines.Add('192200500160253' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('192200200440213R$');

    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);

    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaMaisEconomia;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0417');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('1F2201200350073' + trim(SgDados.Cells[6, L]));
    Editor.Lines.Add('131100000810053' +
      Copy(RetirarAcento(trim(SgDados.Cells[1, L])), 1, 20));
    Editor.Lines.Add('131100000630053' +
      Copy(RetirarAcento(trim(SgDados.Cells[1, L])), 21, 20));
    Editor.Lines.Add('192200300010102' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('192200200030069R$');

    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);

    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaGAMBIARRA;
var
  L, i: Integer;
  ObjDoc: Olevariant; // IDispatch;
  Index: Integer;
  strTemp, strPath, strExport: WideString;
  vqtd: Real;
begin
  strExport := '';
  strPath := 'D:\Support\Saef\Bin\GAMBIARRA.lbx';
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    // Creates the b-PAC object
    ObjDoc := CreateOleObject('bpac.Document');
    // Opens the template
    if ObjDoc.open(strPath) = True then
    begin
      // Searches for text from the field names, and replace the text
      Index := ObjDoc.GetTextIndex('PRODUTO QUALQUER');
      strTemp := SgDados.Cells[1, L];
      ObjDoc.SetText(Index, strTemp);
      Index := ObjDoc.GetTextIndex('R$ 50,00');
      strTemp := 'R$ ' + FormatFloat('0.00', StrToFloat(SgDados.Cells[3, L]));
      ObjDoc.SetText(Index, strTemp);
      ObjDoc.SetBarcodeData(0, SgDados.Cells[6, L]);
      // Printing or exporting
      vqtd := StrToFloat(SgDados.Cells[2, L]);
      for i := 0 to Round(vqtd) - 1 do
      begin
        if strExport = '' then
          ObjDoc.DoPrint(0, '0') // Print
        else
          ObjDoc.Export(0, strExport, 180); // Export
      end;
    end;
  end;
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaZANQUY_ELGIN;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));

    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q1080');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');

    Editor.Lines.Add('A104,6,0,4,1,1,N,"ZANQUY PREMIO"');
    Editor.Lines.Add('A35,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A35,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A32,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B35,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A35,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A254,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A520,6,0,4,1,1,N,"ZANQUY PREMIO"');
    Editor.Lines.Add('A451,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A451,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A448,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B451,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A451,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A670,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor

    Editor.Lines.Add('Q200,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;


procedure TFrmPrincipalPreVenda.ImprimeEtiquetaEquilibrio_ELGIN;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));

    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q1080');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');

    Editor.Lines.Add('A80,6,0,4,1,1,N,"EQUILIBRIO CALCADOS"');
    Editor.Lines.Add('A35,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A35,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A32,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B35,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A35,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A254,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A486,6,0,4,1,1,N,"EQUILIBRIO CALCADOS"');
    Editor.Lines.Add('A451,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A451,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A448,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B451,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A451,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A670,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor

    Editor.Lines.Add('Q200,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaAQUARELA_ELGIN;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));

    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q1080');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');

    Editor.Lines.Add('A75,10,0,4,1,1,N,"AQUARELA CONFECCOES"');
    Editor.Lines.Add('A35,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A35,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A32,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B35,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A35,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A254,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A490,10,0,4,1,1,N,"AQUARELA CONFECCOES"');
    Editor.Lines.Add('A451,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A451,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A448,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B451,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A451,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A670,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor

    Editor.Lines.Add('Q200,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaSerafina;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  desc1, desc2 : string;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    desc1 := trim(Copy(SgDados.Cells[1, L], 1,20));
    desc2 := trim(Copy(SgDados.Cells[1, L], 21,20));
    if desc2 = '' then begin
      desc2 := desc1;
      desc1 := '';
    end;
    Editor.Lines.Add('<xpml><page quantity=''0'' pitch=''40.0 mm''></xpml>I8,1,001');
    Editor.Lines.Add('q620');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('Q320,25');
    Editor.Lines.Add('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''40.0 mm''></xpml>N');
    Editor.Lines.Add('A529,296,2,1,2,2,N,"Serafina"');
    Editor.Lines.Add('B575,100,2,E30,2,4,49,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A557,206,2,1,1,2,N,"Cod '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A557,172,2,1,2,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A557,133,2,1,2,2,N,"__/__/____"');
    Editor.Lines.Add('A557,37,2,1,1,2,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A557,263,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L], 1, 25)+'"');
    Editor.Lines.Add('A557,236,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L], 26, 25)+'"');
    Editor.Lines.Add('A219,296,2,1,2,2,N,"Serafina"');
    Editor.Lines.Add('B265,100,2,E30,2,4,49,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A247,206,2,1,1,2,N,"Cod '+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A247,172,2,1,2,2,N,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('A247,133,2,1,2,2,N,"__/__/____"');
    Editor.Lines.Add('A247,37,2,1,1,2,N,"'+SgDados.Cells[6, L]+'"');
    Editor.Lines.Add('A247,263,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L], 1, 25)+'"');
    Editor.Lines.Add('A247,236,2,1,1,2,N,"'+Copy(SgDados.Cells[1, L], 26, 25)+'"');
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 3) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 3
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 3) + 1;
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaZANQUY;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));

    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q1080');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');

    Editor.Lines.Add('A104,3,0,4,1,1,N,"ZANQUY CENTRO"');
    Editor.Lines.Add('A35,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A35,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A32,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B35,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A35,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A254,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A520,3,0,4,1,1,N,"ZANQUY CENTRO"');
    Editor.Lines.Add('A451,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A451,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A448,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B451,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A451,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A670,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor

    Editor.Lines.Add('Q200,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaCASADOROSARIO2COLUNAS;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));

    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q648');
    Editor.Lines.Add('JY0000Kf00');
    Editor.Lines.Add('D15');
    Editor.Lines.Add('S2');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('A23,15,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 1, 25)+'"');
    Editor.Lines.Add('A23,34,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 26, 25)+'"');
    Editor.Lines.Add('B40,51,0,1,2,4,58,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A38,114,0,3,1,2,N,"R$ '+FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L]))+'"');
    if p.vlPreco > p.vlAtacado then
      Editor.Lines.Add('A40,159,0,2,1,1,N,"AT. R$ '+FormatFloat('0.00',
      p.vlAtacado)+'"')
    else
      Editor.Lines.Add('A40,159,0,2,1,1,N,""');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A351,15,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 1, 25)+'"');
    Editor.Lines.Add('A351,34,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 26, 25)+'"');
    Editor.Lines.Add('B368,51,0,1,2,4,58,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A366,114,0,3,1,2,N,"R$ '+FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L]))+'"');
    if p.vlPreco > p.vlAtacado then
      Editor.Lines.Add('A368,159,0,2,1,1,N,"AT. R$ '+FormatFloat('0.00',
      p.vlAtacado)+'"')
    else
      Editor.Lines.Add('A368,159,0,2,1,1,N,""');
    Editor.Lines.Add('Q200,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaCASADOROSARIO3COLUNAS;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));

    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q848');
    Editor.Lines.Add('JY0000Kf00');
    Editor.Lines.Add('D15');
    Editor.Lines.Add('S2');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('A8,4,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 1, 25)+'"');
    Editor.Lines.Add('A8,23,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 26, 25)+'"');
    Editor.Lines.Add('B25,40,0,1,2,4,58,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A23,104,0,3,1,2,N,"R$ '+FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L]))+'"');
    if p.vlPreco > p.vlAtacado then
      Editor.Lines.Add('A23,140,0,2,1,1,N,"AT. R$ '+FormatFloat('0.00',
      p.vlAtacado)+'"')
    else
      Editor.Lines.Add('A23,140,0,2,1,1,N,""');
    Editor.Lines.Add('A296,4,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 1, 25)+'"');
    Editor.Lines.Add('A296,23,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 26, 25)+'"');
    Editor.Lines.Add('B313,40,0,1,2,4,58,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A311,104,0,3,1,2,N,"R$ '+FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L]))+'"');
    if p.vlPreco > p.vlAtacado then
      Editor.Lines.Add('A311,140,0,2,1,1,N,"AT. R$ '+FormatFloat('0.00',
      p.vlAtacado)+'"')
    else
      Editor.Lines.Add('A311,140,0,2,1,1,N,""');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A583,4,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 1, 25)+'"');
    Editor.Lines.Add('A583,23,0,2,1,1,N,"'+Copy(SgDados.Cells[1, L], 26, 25)+'"');
    Editor.Lines.Add('B600,40,0,1,2,4,58,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A598,104,0,3,1,2,N,"R$ '+FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L]))+'"');
    if p.vlPreco > p.vlAtacado then
      Editor.Lines.Add('A598,140,0,2,1,1,N,"AT. R$ '+FormatFloat('0.00',
      p.vlAtacado)+'"')
    else
      Editor.Lines.Add('A598,140,0,2,1,1,N,""');
    Editor.Lines.Add('Q160,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaQUIVER;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));

    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q1080');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');

    Editor.Lines.Add('A104,6,0,4,1,1,N,"QUIVER"');
    Editor.Lines.Add('A35,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A35,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A32,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B35,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A35,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A254,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A520,6,0,4,1,1,N,"QUIVER"');
    Editor.Lines.Add('A451,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A451,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A448,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B451,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A451,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A670,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor

    Editor.Lines.Add('Q200,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaYZLU;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q1080');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');

    Editor.Lines.Add('A104,2,0,4,1,1,N,"YZLU PREMIO"');
    Editor.Lines.Add('A35,27,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A35,48,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A32,145,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B35,80,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A35,65,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A254,145,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A520,2,0,4,1,1,N,"YZLU PREMIO"');
    Editor.Lines.Add('A451,27,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A451,48,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A448,145,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B451,80,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A451,65,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A670,145,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor

    Editor.Lines.Add('Q200,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaDOFF;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));

    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q1080');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');

    Editor.Lines.Add('A104,3,0,4,1,1,N,"ZANQUY LARANJEIRAS"');
    Editor.Lines.Add('A35,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A35,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A32,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B35,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A35,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A254,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A520,3,0,4,1,1,N,"ZANQUY LARANJEIRAS"');
    Editor.Lines.Add('A451,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A451,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A448,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B451,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A451,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A670,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor

    Editor.Lines.Add('Q200,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;



procedure TFrmPrincipalPreVenda.ImprimeEtiquetaIMA;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));

    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q1080');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');

    Editor.Lines.Add('A104,6,0,4,1,1,N,"  IMA"');
    Editor.Lines.Add('A35,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A35,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A32,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B35,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A35,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A254,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A520,6,0,4,1,1,N,"  IMA"');
    Editor.Lines.Add('A451,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A451,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A448,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B451,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A451,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A670,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor

    Editor.Lines.Add('Q200,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaYZLUCALCADOS;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q1080');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');

    Editor.Lines.Add('A104,2,0,4,1,1,N,"YZLU CALCADOS"');
    Editor.Lines.Add('A35,27,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A35,48,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A32,145,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B35,80,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A35,65,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A254,145,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A520,2,0,4,1,1,N,"YZLU CALCADOS"');
    Editor.Lines.Add('A451,27,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A451,48,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A448,145,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B451,80,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A451,65,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A670,145,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor

    Editor.Lines.Add('Q200,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaYZLUCENTRO;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q1080');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');

    Editor.Lines.Add('A64,2,0,4,1,1,N,"YZLU JOAOPESSOA"');
    Editor.Lines.Add('A35,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A35,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A32,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B35,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A35,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A254,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A480,2,0,4,1,1,N,"YZLU JOAOPESSOA"');
    Editor.Lines.Add('A451,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A451,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A448,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B451,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A451,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A670,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor

    Editor.Lines.Add('Q200,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaYZLUPEIXOTO;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  p: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    p := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q1080');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');

    Editor.Lines.Add('A64,2,0,4,1,1,N,"YZLU PEIXOTO"');
    Editor.Lines.Add('A35,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A35,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A32,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B35,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A35,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A254,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A480,2,0,4,1,1,N,"YZLU PEIXOTO"');
    Editor.Lines.Add('A451,42,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 25) +
      '"'); // descricao
    Editor.Lines.Add('A451,61,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 26, 25) +
      '"'); // descricao
    Editor.Lines.Add('A448,167,0,3,1,1,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('B451,102,0,1,4,8,61,N,"' + SgDados.Cells[0, L] + '"');
    // código
    Editor.Lines.Add('A451,85,0,2,1,1,N,"' + p.referenciaInterna + '"');
    // ref interna
    Editor.Lines.Add('A670,165,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor

    Editor.Lines.Add('Q200,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaPR_ELGIN;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A114,13,0,4,1,1,N,"' + SgDados.Cells[1, L] + '"');
    // descricao
    Editor.Lines.Add('A114,42,0,4,1,1,N,"' + SgDados.Cells[10, L] + '"');
    // unidade
    Editor.Lines.Add('A503,110,0,5,1,1,N,"R$"');
    Editor.Lines.Add('A575,66,0,5,1,2,N,"' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B110,70,0,1,3,6,95,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A207,169,0,3,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // Editor.Lines.Add('GG204,166,"BarCode1"');
    Editor.Lines.Add('Q200,24');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaSAOJOAO;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A114,5,0,4,1,1,N,"' + SgDados.Cells[1, L] + '"');
    // descricao
    Editor.Lines.Add('A114,38,0,4,1,1,N,"' + SgDados.Cells[10, L] + '"');
    // unidade
    Editor.Lines.Add('A503,110,0,5,1,1,N,"R$"');
    Editor.Lines.Add('A575,66,0,5,1,2,N,"' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B110,65,0,1,3,6,95,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A207,155,0,3,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // Editor.Lines.Add('GG204,166,"BarCode1"');
    Editor.Lines.Add('Q200,24');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaPRECINHO10;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('A44,53,0,4,1,1,N,"PRECINHO DEZ"');
    Editor.Lines.Add('A17,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A17,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A68,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A68,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B17,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras

    Editor.Lines.Add('A324,53,0,4,1,1,N,"PRECINHO DEZ"');
    Editor.Lines.Add('A297,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A297,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A348,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A348,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B297,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A603,53,0,4,1,1,N,"PRECINHO DEZ"');
    Editor.Lines.Add('A576,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A576,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A627,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A627,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B576,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('JF');

    Editor.Lines.Add('Q400,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));

    // Editor.Lines.Add('N');
    // Editor.Lines.Add('R0,0');
    // Editor.Lines.Add('ZB');
    // Editor.Lines.Add('I8,0,001');
    // Editor.Lines.Add('q680');
    // Editor.Lines.Add('JY0000Kf00D11');
    // Editor.Lines.Add('S3');
    // Editor.Lines.Add('OD');
    // Editor.Lines.Add('JB');
    // Editor.Lines.Add('JF');
    // Editor.Lines.Add('A134,159,0,3,1,1,N,"'+SgDados.Cells[0,L]+'"');
    // Editor.Lines.Add('B60,19,0,1,3,6,126,N,"'+SgDados.Cells[0,L]+'"');//codigo de barras
    //
    // Editor.Lines.Add('A454,159,0,3,1,1,N,"'+SgDados.Cells[0,L]+'"');
    // Editor.Lines.Add('B380,19,0,1,3,6,126,N,"'+SgDados.Cells[0,L]+'"');//codigo de barras
    //
    // Editor.Lines.Add('Q200,16');

    // Editor.Lines.Add('N');
    // Editor.Lines.Add('R0,0');
    // Editor.Lines.Add('ZB');
    // Editor.Lines.Add('I8,0,001');
    // Editor.Lines.Add('q840');
    // Editor.Lines.Add('JY0000Kf00D8');
    // Editor.Lines.Add('S3');
    // Editor.Lines.Add('O');
    // Editor.Lines.Add('JB');
    //
    // Editor.Lines.Add('A65,53,0,4,1,1,N,"PRECINHO 10"');
    // Editor.Lines.Add('A17,118,0,2,1,1,N,"'+Copy(SgDados.Cells[1,L],1,20)+'"');
    // Editor.Lines.Add('A17,146,0,2,1,1,N,"'+Copy(SgDados.Cells[1,L],21,20)+'"');
    // Editor.Lines.Add('A68,347,0,4,1,1,N,"R$'+formatfloat('0.00',strtofloat(SgDados.Cells[3,L]))+'"'); //valor
    // Editor.Lines.Add('A68,283,0,2,1,1,N,"'+SgDados.Cells[6,L]+'"');//codigo de barras
    // Editor.Lines.Add('B17,190,0,1,2,4,80,N,"'+SgDados.Cells[6,L]+'"');//codigo de barras
    //
    // Editor.Lines.Add('A345,53,0,4,1,1,N,"PRECINHO 10"');
    // Editor.Lines.Add('A297,118,0,2,1,1,N,"'+Copy(SgDados.Cells[1,L],1,20)+'"');
    // Editor.Lines.Add('A297,146,0,2,1,1,N,"'+Copy(SgDados.Cells[1,L],21,20)+'"');
    // Editor.Lines.Add('A348,347,0,4,1,1,N,"R$'+formatfloat('0.00',strtofloat(SgDados.Cells[3,L]))+'"'); //valor
    // Editor.Lines.Add('A348,283,0,2,1,1,N,"'+SgDados.Cells[6,L]+'"');//codigo de barras
    // Editor.Lines.Add('B297,190,0,1,2,4,80,N,"'+SgDados.Cells[6,L]+'"');//codigo de barras
    // Editor.Lines.Add('JF');
    //
    // Editor.Lines.Add('A605,53,0,4,1,1,N,"PRECINHO 10"');
    // Editor.Lines.Add('A576,118,0,2,1,1,N,"'+Copy(SgDados.Cells[1,L],1,20)+'"');
    // Editor.Lines.Add('A576,146,0,2,1,1,N,"'+Copy(SgDados.Cells[1,L],21,20)+'"');
    // Editor.Lines.Add('A627,347,0,4,1,1,N,"R$'+formatfloat('0.00',strtofloat(SgDados.Cells[3,L]))+'"'); //valor
    // Editor.Lines.Add('A627,283,0,2,1,1,N,"'+SgDados.Cells[6,L]+'"');//codigo de barras
    // Editor.Lines.Add('B576,190,0,1,2,4,80,N,"'+SgDados.Cells[6,L]+'"');//codigo de barras
    // Editor.Lines.Add('JF');
    //
    // Editor.Lines.Add('Q400,16');
    // vQtd := StrToFloat(SgDados.Cells[2,L]);
    // Editor.Lines.Add('P1,'+FormatFloat('0000',vQtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

// procedure TFrmPrincipalPreVenda.ImprimeEtiquetaBRAZNAMODA;
// var L : integer;
// Arq : TextFile;
// vQtd : real;
// begin
// //if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
// if SgDados.Cells[0,1] = '' then begin
// Messagedlg('Não foi lançado nenhum item para impressão das etiquetas!', mtWarning, [mbOk], 0);
// EdtConsulta.Setfocus;
// exit;
// end;
// //if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
// //SalvaEtiquetas;
// Editor.Lines.Clear;
// for L := 1 to SgDados.RowCount - 1 do begin // Salvando os itens da pré-venda.
// if SgDados.Cells[0,L] = '' then Break;
// Editor.Lines.Add('N');
// Editor.Lines.Add('R0,0');
// Editor.Lines.Add('ZB');
// Editor.Lines.Add('I8,0,001');
// Editor.Lines.Add('q688');
// Editor.Lines.Add('JY0000Kf00D8');
// Editor.Lines.Add('S3');
// Editor.Lines.Add('O');
// Editor.Lines.Add('JB');
// Editor.Lines.Add('B50,25,0,1,2,4,80,N,"'+SgDados.Cells[6,L]+'"');//codigo de barras
// Editor.Lines.Add('A71,114,0,4,1,1,N,"'+SgDados.Cells[6,L]+'"');//codigo de barras
// Editor.Lines.Add('A105,156,0,4,1,1,N,"R$ '+FormatFloat('0.00',Strtofloat(SgDados.Cells[3,L]))+'"');
// Editor.Lines.Add('JF');
// Editor.Lines.Add('B394,25,0,1,2,4,80,N,"'+SgDados.Cells[6,L]+'"');//codigo de barras
// Editor.Lines.Add('A415,114,0,4,1,1,N,"'+SgDados.Cells[6,L]+'"');//codigo de barras
// Editor.Lines.Add('A449,156,0,4,1,1,N,"R$ '+FormatFloat('0.00',Strtofloat(SgDados.Cells[3,L]))+'"');
// Editor.Lines.Add('Q200,16');
// vQtd := StrToFloat(SgDados.Cells[2,L]);
// Editor.Lines.Add('P1,'+FormatFloat('0000',vQtd));
// end;
// Editor.Lines.SaveToFile(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName)+'etiqueta.txt')));
// WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName)+'print2.bat')),sw_ShowNormal);
// if not FileExists('Print2.bat') then
// ShowMessage('Não foi encontrado o arquivo Print2.bat');
// Application.OnMessage := FormPrincipal.ProcessaMsg;
// Limpar_Tela;
// RgOpcoes.ItemIndex := 0;
// Messagedlg('Impressão ok!', mtInformation, [mbOk], 0);
// end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaBRAZNAMODA;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('A44,53,0,4,1,1,N,"BRAZ NA MODA"');
    Editor.Lines.Add('A17,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A17,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A68,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A68,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B17,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras

    Editor.Lines.Add('A324,53,0,4,1,1,N,"BRAZ NA MODA"');
    Editor.Lines.Add('A297,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A297,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A348,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A348,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B297,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A603,53,0,4,1,1,N,"BRAZ NA MODA"');
    Editor.Lines.Add('A576,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A576,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A627,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A627,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B576,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('JF');

    Editor.Lines.Add('Q400,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaECONOMIZE_ELGIN;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A114,13,0,4,1,1,N,"' + SgDados.Cells[1, L] + '"');
    // descricao
    Editor.Lines.Add('A114,42,0,4,1,1,N,"' + SgDados.Cells[10, L] + '"');
    // unidade
    Editor.Lines.Add('A503,110,0,5,1,1,N,"R$"');
    Editor.Lines.Add('A575,66,0,5,1,2,N,"' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B110,70,0,1,3,6,95,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A207,169,0,3,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // Editor.Lines.Add('GG204,166,"BarCode1"');
    Editor.Lines.Add('Q200,24');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaMERCADINHOSAOJUDASTADEU18_ELGIN;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A114,13,0,4,1,1,N,"' + SgDados.Cells[1, L] + '"');
    // descricao
    Editor.Lines.Add('A114,42,0,4,1,1,N,"' + SgDados.Cells[10, L] + '"');
    // unidade
    Editor.Lines.Add('A503,110,0,5,1,1,N,"R$"');
    Editor.Lines.Add('A575,66,0,5,1,2,N,"' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B110,70,0,1,3,6,95,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A207,169,0,3,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // Editor.Lines.Add('GG204,166,"BarCode1"');
    Editor.Lines.Add('Q200,24');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaDISSEMEDISSE_ELGIN;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('A024,53,0,4,1,1,N,"DISSE ME DISSE"');
    Editor.Lines.Add('A17,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A17,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A68,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A60,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B09,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras

    Editor.Lines.Add('A304,53,0,4,1,1,N,"DISSE ME DISSE"');
    Editor.Lines.Add('A297,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A297,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A348,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A340,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B289,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A583,53,0,4,1,1,N,"DISSE ME DISSE"');
    Editor.Lines.Add('A576,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A576,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A627,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A619,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B567,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('JF');

    Editor.Lines.Add('Q400,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaCLOSETMARIAFLOR_ELGIN;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('A0,53,0,4,1,1,N,"CLOSET MARIA FLOR"');
    Editor.Lines.Add('A17,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A17,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A68,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A60,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B09,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras

    Editor.Lines.Add('A276,53,0,4,1,1,N,"CLOSET MARIA FLOR"');
    Editor.Lines.Add('A297,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A297,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A348,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A340,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B289,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A555,53,0,4,1,1,N,"CLOSET MARIA FLOR"');
    Editor.Lines.Add('A576,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A576,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A627,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A619,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B567,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('JF');

    Editor.Lines.Add('Q400,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaFlorDLis;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('    N');
    Editor.Lines.Add('');
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('q811');
    Editor.Lines.Add('Q184,25');
    Editor.Lines.Add('O');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('A16,4,0,2,1,2,N,"'+Copy(SgDados.Cells[1, L], 1,19)+'"');
    Editor.Lines.Add('A16,36,0,2,1,2,N,"'+Copy(SgDados.Cells[1, L], 20,19)+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('LO16,68,224,36');
    Editor.Lines.Add('A64,76,0,4,1,1,R,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('B16,104,0,1,3,5,36,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A32,150,0,4,1,1,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A296,4,0,2,1,2,N,"'+Copy(SgDados.Cells[1, L], 1,19)+'"');
    Editor.Lines.Add('A296,36,0,2,1,2,N,"'+Copy(SgDados.Cells[1, L], 20,19)+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('LO296,68,224,36');
    Editor.Lines.Add('A344,76,0,4,1,1,R,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('B296,104,0,1,3,5,36,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A312,150,0,4,1,1,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A576,4,0,2,1,2,N,"'+Copy(SgDados.Cells[1, L], 1,19)+'"');
    Editor.Lines.Add('A576,36,0,2,1,2,N,"'+Copy(SgDados.Cells[1, L], 20,19)+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('LO576,68,224,36');
    Editor.Lines.Add('A624,76,0,4,1,1,R,"R$ '+SgDados.Cells[3, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('B576,104,0,1,3,5,36,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A592,150,0,4,1,1,N,"'+SgDados.Cells[0, L]+'"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaDAYA_ELGIN;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('A104,53,0,4,1,1,N,"DAYA"');
    Editor.Lines.Add('A17,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A17,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A68,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A68,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B17,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras

    Editor.Lines.Add('A384,53,0,4,1,1,N,"DAYA"');
    Editor.Lines.Add('A297,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A297,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A348,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A348,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B297,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A663,53,0,4,1,1,N,"DAYA"');
    Editor.Lines.Add('A576,118,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1,
      20) + '"');
    Editor.Lines.Add('A576,146,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21,
      20) + '"');
    Editor.Lines.Add('A627,347,0,4,1,1,N,"R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('A627,283,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('B576,190,0,1,2,4,80,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('JF');

    Editor.Lines.Add('Q400,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaAtacarejo;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('N');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('q863');
    Editor.Lines.Add('Q240,24');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('D9');
    Editor.Lines.Add('S2');
    Editor.Lines.Add('0');
    Editor.Lines.Add('A49,0,0,3,1,1,N,"' + SgDados.Cells[1, L] + '"');
    Editor.Lines.Add('A49,24,0,3,13,5,R," "');
    Editor.Lines.Add('A65,28,0,2,1,1,R,"A PARTIR DE"');
    Editor.Lines.Add('A116,49,0,4,1,2,R,"' +
      intToStr(Round(Produto.nrQtdAtacarejo)) + '"');
    Editor.Lines.Add('A75,104,0,2,1,1,R,"UNIDADES"');
    Editor.Lines.Add('B49,128,0,3,2,4,51,B,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A211,24,0,3,15,5,R," "');
    Editor.Lines.Add('A258,39,0,4,1,3,R,"' + FormatFloat('0.00',
      Produto.vlAtacado) + '"');
    Editor.Lines.Add('A530,65,0,4,1,2,N,"' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"');
    Editor.Lines.Add('A414,51,0,3,1,1,N,"R$"');
    Editor.Lines.Add('A473,28,0,3,1,1,N,"VAREJO"');
    Editor.Lines.Add('X394,24,2,615,123');
    Editor.Lines.Add('A463,158,0,3,1,1,N,"COD: ' + SgDados.Cells[0, L] + '"');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaJetLaser;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0346');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('1f2202500230060' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('121100000650050' +
      Copy(PegaNomeFabricante(StrToInt(SgDados.Cells[0, L])), 1, 20) + '.');
    Editor.Lines.Add('121100000540050' + 'Ref.' + SgDados.Cells[7, L]);
    Editor.Lines.Add('131100000020059R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('1f2202500230231' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('121100000650221' +
      Copy(PegaNomeFabricante(StrToInt(SgDados.Cells[0, L])), 1, 20) + '.');
    Editor.Lines.Add('121100000540221' + 'Ref.' + SgDados.Cells[7, L]);
    Editor.Lines.Add('131100000020230R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaChaloc;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  nomeFabricante: String;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0415');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('121100000590002' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('121100000470002' + trim(Copy(SgDados.Cells[1, L],
      21, 20)));
    Editor.Lines.Add('121100000590144' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('121100000470144' + trim(Copy(SgDados.Cells[1, L],
      21, 20)));
    Editor.Lines.Add('121100000590284' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('121100000470284' + trim(Copy(SgDados.Cells[1, L],
      21, 20)));
    Editor.Lines.Add('121100000730002COD: ' + SgDados.Cells[0, L]);
    Editor.Lines.Add('121100000730144COD: ' + SgDados.Cells[0, L]);
    Editor.Lines.Add('121100000730284COD: ' + SgDados.Cells[0, L]);
    Editor.Lines.Add('131100000280002R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('131100000280144R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('131100000280284R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    nomeFabricante :=
      Copy(PegaNomeFabricante(StrToInt(SgDados.Cells[0, L])), 1, 20);
    Editor.Lines.Add('121100000170002FAB: ' + nomeFabricante);
    // SgDados.Cells[7,L]);
    Editor.Lines.Add('121100000170144FAB: ' + nomeFabricante);
    // SgDados.Cells[7,L]);
    Editor.Lines.Add('121100000170284FAB: ' + nomeFabricante);
    // SgDados.Cells[7,L]);

    // Editor.Lines.Add('c0000');
    // Editor.Lines.Add('KI503');
    // Editor.Lines.Add('O0220');
    // Editor.Lines.Add('f220');
    // Editor.Lines.Add('KW0415');
    // Editor.Lines.Add('KI7');
    // Editor.Lines.Add('V0');
    // Editor.Lines.Add('L');
    // Editor.Lines.Add('H12');
    // Editor.Lines.Add('PC');
    // Editor.Lines.Add('A2');
    // Editor.Lines.Add('D11');
    // Editor.Lines.Add('121100000700009'+Trim(Copy(SgDados.Cells[1,L],1,20)));
    // Editor.Lines.Add('121100000580009'+Trim(Copy(SgDados.Cells[1,L],21,20)));
    // Editor.Lines.Add('121100000700152'+Trim(Copy(SgDados.Cells[1,L],1,20)));
    // Editor.Lines.Add('121100000580152'+Trim(Copy(SgDados.Cells[1,L],21,20)));
    // Editor.Lines.Add('121100000700293'+Trim(Copy(SgDados.Cells[1,L],1,20)));
    // Editor.Lines.Add('121100000580293'+Trim(Copy(SgDados.Cells[1,L],21,20)));
    // Editor.Lines.Add('121100000440010COD: '+SgDados.Cells[0,L]);
    // Editor.Lines.Add('131100000230010R$ '+formatfloat('0.00',strtofloat(SgDados.Cells[3,L])));
    // nomeFabricante := copy(PegaNomeFabricante(strtoint(SgDados.Cells[0,L])),1,20);
    // Editor.Lines.Add('121100000090010FAB: '+ nomeFabricante); // SgDados.Cells[7,L]);
    // Editor.Lines.Add('121100000440152COD: '+SgDados.Cells[0,L]);
    // Editor.Lines.Add('131100000230152R$ '+formatfloat('0.00',strtofloat(SgDados.Cells[3,L])));
    // Editor.Lines.Add('121100000090152FAB: ' + nomeFabricante);// SgDados.Cells[7,L]);
    // Editor.Lines.Add('121100000440293COD: '+SgDados.Cells[0,L]);
    // Editor.Lines.Add('131100000230293R$ '+formatfloat('0.00',strtofloat(SgDados.Cells[3,L])));
    // Editor.Lines.Add('121100000090293FAB: '+ nomeFabricante); //SgDados.Cells[7,L]);

    Editor.Lines.Add('^01');
    // if Frac(StrToFloat(SgDados.Cells[2,L])/2) = 0.00 then
    // vQtd := StrToFloat(SgDados.Cells[2,L])/2
    // else vQtd := (StrToint(FormatFloat('000',StrToFloat(SgDados.Cells[2,L]))) div 2) + 1;
    // Editor.Lines.Add('^'+FormatFloat('00',vQtd));
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + FormatFloat('000', vqtd));
    Editor.Lines.Add('E');

  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaChavesDeOuro;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0417');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('1F2203200100022' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('121100000770015' + Copy(SgDados.Cells[1, L], 1, 20));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO
    Editor.Lines.Add('191100100510015REF: ' + SgDados.Cells[7, L]);
    // Referencia interna
    // A cliente solicitou a retirada do preço. Protocolo: 31277
    // Editor.Lines.Add('121100000390016R$ '+ formatfloat('0.00',strtofloat(SgDados.Cells[3,L])));
    Editor.Lines.Add('121100000650015' + Copy(SgDados.Cells[1, L], 21, 20));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO

    Editor.Lines.Add('1F2203200100158' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('121100000770151' + Copy(SgDados.Cells[1, L], 1, 20));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO
    Editor.Lines.Add('191100100510151REF: ' + SgDados.Cells[7, L]);
    // Referencia Interna
    // A cliente solicitou a retirada do preço. Protocolo: 31277
    // Editor.Lines.Add('121100000390152R$ '+ formatfloat('0.00',strtofloat(SgDados.Cells[3,L])));
    Editor.Lines.Add('121100000650151' + Copy(SgDados.Cells[1, L], 21, 20));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO

    Editor.Lines.Add('1F2203200110296' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('121100000770288' + Copy(SgDados.Cells[1, L], 1, 20));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO
    Editor.Lines.Add('191100100510288REF: ' + SgDados.Cells[7, L]);
    // Referencia Interna
    // A cliente solicitou a retirada do preço. Protocolo: 31277
    // Editor.Lines.Add('121100000390289R$ '+ formatfloat('0.00',strtofloat(SgDados.Cells[3,L])));
    Editor.Lines.Add('121100000650288' + Copy(SgDados.Cells[1, L], 21, 20));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO

    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaPS;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  exibirPreco: Boolean;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if Application.MessageBox('Deseja exibir o preço na etiqueta?', 'Confirmação',
    Mb_YesNo + MB_ICONQUESTION + MB_APPLMODAL) = id_yes then
    exibirPreco := True
  else
    exibirPreco := false;

  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0394');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('1F2204500200085' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('131100000770074' + Copy(SgDados.Cells[1, L], 1, 35));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO
    if exibirPreco then
    begin
      Editor.Lines.Add('131100000380206R$');
      Editor.Lines.Add('161100000210225' + FormatFloat('0.00',
        StrToFloat(SgDados.Cells[3, L])));
      Editor.Lines.Add('121100000600206CODIGO: ' + SgDados.Cells[0, L]);
      // CODIGO:
    end
    else
    begin
      Editor.Lines.Add('131100000380206CODIGO: ' + SgDados.Cells[0, L]);
    end;
    Editor.Lines.Add('1X1100000170071b0311007900010001');
    Editor.Lines.Add('^01');

    // Editor.Lines.Add('c0000');
    // Editor.Lines.Add('KI503');
    // Editor.Lines.Add('O0220');
    // Editor.Lines.Add('f220');
    // Editor.Lines.Add('KW0417');
    // Editor.Lines.Add('KI7');
    // Editor.Lines.Add('V0');
    // Editor.Lines.Add('L');
    // Editor.Lines.Add('H12');
    // Editor.Lines.Add('PC');
    // Editor.Lines.Add('A2');
    // Editor.Lines.Add('D11');
    // Editor.Lines.Add('1F2203900310076'+SgDados.Cells[6,L]);       //barra
    // Editor.Lines.Add('131100000780073'+copy(SgDados.Cells[1,L],1,35));    //DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO
    // Editor.Lines.Add('141100000420189CODIGO: '+SgDados.Cells[0,L]);    //CODIGO:
    // Editor.Lines.Add('1X1100000190056b0310008000010001');
    // Editor.Lines.Add('^01');


    // etiqueta ps antigo

    // Editor.Lines.Add('c0000');
    // Editor.Lines.Add('KI503');
    // Editor.Lines.Add('O0220');
    // Editor.Lines.Add('f220');
    // Editor.Lines.Add('KW0433');
    // Editor.Lines.Add('KI7');
    // Editor.Lines.Add('V0');
    // Editor.Lines.Add('L');
    // Editor.Lines.Add('H12');
    // Editor.Lines.Add('PC');
    // Editor.Lines.Add('A2');
    // Editor.Lines.Add('D11');
    // Editor.Lines.Add('1F3304200220004'+SgDados.Cells[6,L]);       //barra
    // Editor.Lines.Add('131100000800004'+SgDados.Cells[1,L]);
    // Editor.Lines.Add('141100000260166CODIGO: '+SgDados.Cells[0,L]);
    // Editor.Lines.Add('1X1100000200001b0313007700010001');
    // Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaBrumar;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0394');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('1F3305200110027' + SgDados.Cells[6, L]); // barra
    Editor.Lines.Add('121100000840037' + Copy(SgDados.Cells[1, L], 1, 35));
    // DESCRICAO DO PRODUTO DESCRICAO DO PRODUTO
    Editor.Lines.Add('131100000430208R$'); // CODIGO:
    Editor.Lines.Add('161100000150222' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('^01');

    // etiqueta ps antigo

    // Editor.Lines.Add('c0000');
    // Editor.Lines.Add('KI503');
    // Editor.Lines.Add('O0220');
    // Editor.Lines.Add('f220');
    // Editor.Lines.Add('KW0433');
    // Editor.Lines.Add('KI7');
    // Editor.Lines.Add('V0');
    // Editor.Lines.Add('L');
    // Editor.Lines.Add('H12');
    // Editor.Lines.Add('PC');
    // Editor.Lines.Add('A2');
    // Editor.Lines.Add('D11');
    // Editor.Lines.Add('1F3304200220004'+SgDados.Cells[6,L]);       //barra
    // Editor.Lines.Add('131100000800004'+SgDados.Cells[1,L]);
    // Editor.Lines.Add('141100000260166CODIGO: '+SgDados.Cells[0,L]);
    // Editor.Lines.Add('1X1100000200001b0313007700010001');
    // Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

function TFrmPrincipalPreVenda.getVMudaPreco: string;
var
  query: TADOQuery;
begin
  query := TADOQuery.Create(self);
  query.Connection := DModulo.Conexao;
  with query do
  begin
    sql.Text := 'SELECT dsMudaPreco FROM configuracao WITH(NOLOCK)';
    open;
    result := FieldByName('dsMudaPreco').AsString;
  end;
  FreeAndNil(query);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasComplemento;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0415');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');

    Editor.Lines.Add('121100000700009' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('121100000580009' + trim(Copy(SgDados.Cells[1, L],
      21, 20)));
    Editor.Lines.Add('121100000700149' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('121100000580149' + trim(Copy(SgDados.Cells[1, L],
      21, 20)));
    Editor.Lines.Add('121100000700290' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('121100000580290' + trim(Copy(SgDados.Cells[1, L],
      21, 20)));
    Editor.Lines.Add('121100000440010COD: ' + SgDados.Cells[0, L]);
    Editor.Lines.Add('131100000230010R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('121100000090010REF FAB.' + SgDados.Cells[7, L]);
    Editor.Lines.Add('121100000440149COD: ' + SgDados.Cells[0, L]);
    Editor.Lines.Add('131100000230149R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('121100000090010REF FAB.' + SgDados.Cells[7, L]);
    Editor.Lines.Add('121100000090149COD: ' + SgDados.Cells[0, L]);
    Editor.Lines.Add('131100000230290R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('121100000090290REF FAB.' + SgDados.Cells[7, L]);

    Editor.Lines.Add('^01');
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 2) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 2
    else
      vqtd := (StrToInt(FormatFloat('000', StrToFloat(SgDados.Cells[2, L])))
        div 2) + 1;
    // Editor.Lines.Add('^'+FormatFloat('00',vQtd));
    Editor.Lines.Add('Q' + FormatFloat('000', vqtd));
    Editor.Lines.Add('E');

    // Editor.Lines.Add('c0000');
    // Editor.Lines.Add('KI503');
    // Editor.Lines.Add('O0220');
    // Editor.Lines.Add('f220');
    // Editor.Lines.Add('KW0354');
    // Editor.Lines.Add('KI7');
    // Editor.Lines.Add('V0');
    // Editor.Lines.Add('L');
    // Editor.Lines.Add('H12');
    // Editor.Lines.Add('PC');
    // Editor.Lines.Add('A2');
    // Editor.Lines.Add('D11');
    // Editor.Lines.Add('191100100270013CÓD. '+SgDados.Cells[0,L]);
    // Editor.Lines.Add('191100200140026'+formatfloat('0.00',strtofloat(SgDados.Cells[3,L])));
    // Editor.Lines.Add('191100100030013REF FAB.'+SgDados.Cells[7,L]);
    // Editor.Lines.Add('191100100150013R$');
    // Editor.Lines.Add('191100100370013'+Trim(Copy(SgDados.Cells[1,L],21,40)));
    // Editor.Lines.Add('191100100450013'+Trim(Copy(SgDados.Cells[1,L],1,20)));
    // Editor.Lines.Add('191100100280128CÓD. '+SgDados.Cells[0,L]);
    // Editor.Lines.Add('191100200150141'+formatfloat('0.00',strtofloat(SgDados.Cells[3,L])));
    // Editor.Lines.Add('191100100040128REF FAB.'+ SgDados.Cells[7,L]);
    // Editor.Lines.Add('191100100160128R$');
    // Editor.Lines.Add('191100100380128'+Trim(Copy(SgDados.Cells[1,L],21,40)));
    // Editor.Lines.Add('191100100460128'+Trim(Copy(SgDados.Cells[1,L],1,20)));
    // Editor.Lines.Add('191100100280242CÓD. '+SgDados.Cells[0,L]);
    // Editor.Lines.Add('191100200150255'+formatfloat('0.00',strtofloat(SgDados.Cells[3,L])));
    // Editor.Lines.Add('191100100040242REF FAB.'+ SgDados.Cells[7,L]);
    // Editor.Lines.Add('191100100160242R$');
    // Editor.Lines.Add('191100100380242'+Trim(Copy(SgDados.Cells[1,L],21,40)));
    // Editor.Lines.Add('191100100460242'+Trim(Copy(SgDados.Cells[1,L],1,20)));
    // Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    // if Frac(StrToFloat(SgDados.Cells[2,L])/2) = 0.00 then
    // vQtd := StrToFloat(SgDados.Cells[2,L])/2
    // else vQtd := (StrToint(FormatFloat('000',StrToFloat(SgDados.Cells[2,L]))) div 2) + 1;
    // //Editor.Lines.Add('^'+FormatFloat('00',vQtd));
    // Editor.Lines.Add('Q'+FormatFloat('000',vQtd));
    // Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasMarttina;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add(' <xpml><page quantity=''0'' pitch=''60.1 mm''></xpml>n');
    Editor.Lines.Add('M0592');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('D');
    Editor.Lines.Add
      ('<xpml></page></xpml><xpml><page quantity=''1'' pitch=''60.1 mm''></xpml>L');
    Editor.Lines.Add('D11');
    Editor.Lines.Add('H14');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('1911A0801560008' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('1911A0801390009' + trim(Copy(SgDados.Cells[1, L],
      21, 40)));
    Editor.Lines.Add('1911A0801200009COD FAB: ' + SgDados.Cells[7, L]);
    Editor.Lines.Add('1911A0801010009COD PROD: ' + SgDados.Cells[0, L]);
    Editor.Lines.Add('1911A0800840009A VISTA/CARTAO R$ ' + FormatFloat('0.00',
      PegaValorAtacado(StrToInt(SgDados.Cells[0, L]))));
    Editor.Lines.Add('1f4203600230032' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1911A08000900352');
    Editor.Lines.Add('1911A08000900423');
    Editor.Lines.Add('1911A08000900494');
    Editor.Lines.Add('1911A08000900575');
    Editor.Lines.Add('1911A08000900646');
    Editor.Lines.Add('1911A08000900701');
    Editor.Lines.Add('1911A08000900812');
    Editor.Lines.Add('1911A08000900883');
    Editor.Lines.Add('1911A08000900954');
    Editor.Lines.Add('1911A08000901015');
    Editor.Lines.Add('1911A08000901096');
    Editor.Lines.Add('1911A08000901160');
    Editor.Lines.Add('1911A08000900231');
    Editor.Lines.Add('1911A0800670009A PRAZO R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('1911A0801560165' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('1911A0801390166' + trim(Copy(SgDados.Cells[1, L],
      21, 40)));
    Editor.Lines.Add('1911A0801200166COD FAB: ' + SgDados.Cells[7, L]);
    Editor.Lines.Add('1911A0801010166COD PROD: ' + SgDados.Cells[0, L]);
    Editor.Lines.Add('1911A0800840166A VISTA/CARTAO R$ ' + FormatFloat('0.00',
      PegaValorAtacado(StrToInt(SgDados.Cells[0, L]))));
    Editor.Lines.Add('1f4203600230189' + SgDados.Cells[6, L]);
    Editor.Lines.Add('1911A08000901932');
    Editor.Lines.Add('1911A08000902003');
    Editor.Lines.Add('1911A08000902064');
    Editor.Lines.Add('1911A08000902145');
    Editor.Lines.Add('1911A08000902216');
    Editor.Lines.Add('1911A08000902281');
    Editor.Lines.Add('1911A08000902382');
    Editor.Lines.Add('1911A08000902453');
    Editor.Lines.Add('1911A08000902524');
    Editor.Lines.Add('1911A08000902595');
    Editor.Lines.Add('1911A08000902666');
    Editor.Lines.Add('1911A08000902730');
    Editor.Lines.Add('1911A08000901801');
    Editor.Lines.Add('1911A0800670166A PRAZO R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 2) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 2
    else
      vqtd := (StrToInt(FormatFloat('000', StrToFloat(SgDados.Cells[2, L])))
        div 2) + 1;
    // Editor.Lines.Add('^'+FormatFloat('00',vQtd));
    Editor.Lines.Add('Q' + FormatFloat('000', vqtd));
    Editor.Lines.Add('E');
    Editor.Lines.Add('<xpml></page></xpml><xpml><end/></xpml>');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasPazone;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q856');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A15,11,0,4,1,1,N,"' + SgDados.Cells[1, L] + '"');
    Editor.Lines.Add('B13,63,0,1,3,6,109,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A425,146,0,5,1,1,N,"R$"');
    Editor.Lines.Add('A503,102,0,5,1,2,N,"' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"');
    Editor.Lines.Add('A15,42,0,3,1,1,N,"Cod. ' + SgDados.Cells[0, L] + '"');
    Editor.Lines.Add('A76,178,0,3,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('Q216,8');
    // Cálculo para imprimir a qtd de etiquetas certo
    // if Frac(StrToFloat(SgDados.Cells[2,L])/2) = 0.00 then
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    // else vQtd := (StrToint(FormatFloat('0000',StrToFloat(SgDados.Cells[2,L]))) div 2) + 1;
    // Editor.Lines.Add('^'+FormatFloat('00',vQtd));
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasSaboramil;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q856');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A15,11,0,4,1,1,N,"' + SgDados.Cells[1, L] + '"');
    Editor.Lines.Add('B15,59,0,1,4,8,114,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A15,176,0,3,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A617,148,0,5,1,1,N,"R$"');
    Editor.Lines.Add('A700,171,0,4,1,1,N,"' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"');
    Editor.Lines.Add('A15,38,0,3,1,1,N,"Cod. ' + SgDados.Cells[0, L] + '"');
    Editor.Lines.Add('Q216,8');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 2) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 2
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 2) + 1;
    // Editor.Lines.Add('^'+FormatFloat('00',vQtd));
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasDalBosco;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('JY0000Kf00');
    Editor.Lines.Add('D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('B57,78,0,1,2,4,85,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A34,36,0,3,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      25)) + '"');
    Editor.Lines.Add('A245,165,0,4,1,3,N,"R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"');
    Editor.Lines.Add('A34,55,0,3,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 26,
      40)) + '"');
    Editor.Lines.Add('LO3,32,373,2');
    Editor.Lines.Add('A57,6,0,4,1,1,N,"Rancho Dalbosco"');
    Editor.Lines.Add('A666,165,0,4,1,3,N,"R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"');
    Editor.Lines.Add('B480,78,0,1,2,4,85,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A455,57,0,3,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 26,
      40)) + '"');
    Editor.Lines.Add('A455,36,0,3,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      25)) + '"');
    Editor.Lines.Add('LO420,32,373,2');
    Editor.Lines.Add('A486,6,0,4,1,1,N,"Rancho Dalbosco"');
    Editor.Lines.Add('A11,207,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A433,205,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('Q240,24');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 2) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 2
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 2) + 1;
    Editor.Lines.Add('^' + FormatFloat('00', vqtd));
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasComercialGraca;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q840');
    Editor.Lines.Add('JY0000Kf00');
    Editor.Lines.Add('D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('B57,78,0,1,2,4,85,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A34,36,0,3,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      25)) + '"');
    Editor.Lines.Add('A245,165,0,4,1,3,N,"R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"');
    Editor.Lines.Add('A34,55,0,3,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 26,
      40)) + '"');
    Editor.Lines.Add('LO3,32,373,2');
    Editor.Lines.Add('A57,6,0,4,1,1,N,"Comercial Graca"');
    Editor.Lines.Add('A666,165,0,4,1,3,N,"R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"');
    Editor.Lines.Add('B480,78,0,1,2,4,85,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A455,57,0,3,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 26,
      40)) + '"');
    Editor.Lines.Add('A455,36,0,3,1,1,N,"' + trim(Copy(SgDados.Cells[1, L], 1,
      25)) + '"');
    Editor.Lines.Add('LO420,32,373,2');
    Editor.Lines.Add('A486,6,0,4,1,1,N,"Comercial Graca"');
    Editor.Lines.Add('A11,207,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('A433,205,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('Q240,24');
    // Cálculo para imprimir a qtd de etiquetas certo
    if Frac(StrToFloat(SgDados.Cells[2, L]) / 2) = 0.00 then
      vqtd := StrToFloat(SgDados.Cells[2, L]) / 2
    else
      vqtd := (StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])))
        div 2) + 1;
    Editor.Lines.Add('^' + FormatFloat('00', vqtd));
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

{ Indica se a prevenda ou orçamento já possui itens lançados na grid }
function TFrmPrincipalPreVenda.possuiItensLançados: Boolean;
begin
  result := trim(SgDados.Cells[0, 1]) <> '';
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaECOLLIMP;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto: TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    if (vAtacarejo = True) and (Produto.nrQtdAtacarejo > 0) and
      (Produto.vlAtacado < Produto.vlPreco) then
    begin
      Editor.Lines.Add('I8,A,001');
      Editor.Lines.Add('');
      Editor.Lines.Add('');
      Editor.Lines.Add('Q240,024');
      Editor.Lines.Add('q831');
      Editor.Lines.Add('rN');
      Editor.Lines.Add('S3');
      Editor.Lines.Add('D7');
      Editor.Lines.Add('ZT');
      Editor.Lines.Add('JF');
      Editor.Lines.Add('O');
      Editor.Lines.Add('R0,0');
      Editor.Lines.Add('f100');
      Editor.Lines.Add('N');
      Editor.Lines.Add('A811,155,2,4,1,1,N,"LT"');
      Editor.Lines.Add('A418,67,2,4,1,1,N,"Preco Atacado :"');
      Editor.Lines.Add('A291,35,2,4,1,1,N,"'+intToStr(Round(Produto.nrQtdAtacarejo))+' + Unidades"');
      Editor.Lines.Add('A161,82,2,4,1,2,N,"'+FormatFloat('0.00',
        Produto.vlAtacado)+'"');
      Editor.Lines.Add('A161,129,2,4,1,2,N,"'+SgDados.Cells[3, L]+'"');
      Editor.Lines.Add('A417,116,2,4,1,1,N,"Preco Varejo :"');
      Editor.Lines.Add('A811,189,2,4,1,1,N,"'+SgDados.Cells[1, L]+'"');
      Editor.Lines.Add('B812,116,2,1,3,9,74,B,"'+SgDados.Cells[6, L]+'"');
    end
    else
    begin
      Editor.Lines.Add('I8,A,001');
      Editor.Lines.Add('');
      Editor.Lines.Add('');
      Editor.Lines.Add('Q240,024');
      Editor.Lines.Add('q831');
      Editor.Lines.Add('rN');
      Editor.Lines.Add('S3');
      Editor.Lines.Add('D7');
      Editor.Lines.Add('ZT');
      Editor.Lines.Add('JF');
      Editor.Lines.Add('O');
      Editor.Lines.Add('R0,0');
      Editor.Lines.Add('f100');
      Editor.Lines.Add('N');
      Editor.Lines.Add('A811,155,2,4,1,1,N,"LT"');
      //Editor.Lines.Add('A418,67,2,4,1,1,N,"Preco Atacado :"');
      //Editor.Lines.Add('A291,35,2,4,1,1,N,"5 + Unidades"');
      //Editor.Lines.Add('A161,82,2,4,1,2,N,"8,00"');
      Editor.Lines.Add('A161,129,2,4,1,2,N,"'+SgDados.Cells[3, L]+'"');
      Editor.Lines.Add('A417,116,2,4,1,1,N,"Preco Varejo :"');
      Editor.Lines.Add('A811,189,2,4,1,1,N,"'+SgDados.Cells[1, L]+'"');
      Editor.Lines.Add('B812,116,2,1,3,9,74,B,"'+SgDados.Cells[6, L]+'"');
    end;
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + intToStr(Trunc(vqtd)));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaEletroSatDuplaGrande;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q680');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A14,4,0,3,1,1,N,"' + 'Codigo: ' + SgDados.Cells[0, L] +
      '"'); // Código
    Editor.Lines.Add('A14,38,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // Descricao
    Editor.Lines.Add('A14,68,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 40) +
      '"'); // Descricao
    Editor.Lines.Add('A21,99,0,3,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B21,127,0,1,2,4,40,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A20,173,0,3,1,1,N,"' + SgDados.Cells[6, L] + '"');

    Editor.Lines.Add('A362,4,0,3,1,1,N,"' + 'Codigo: ' + SgDados.Cells[0, L] +
      '"'); // Código
    Editor.Lines.Add('A362,38,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // Descricao
    Editor.Lines.Add('A362,68,0,3,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 40) +
      '"'); // Descricao
    Editor.Lines.Add('A369,99,0,3,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B370,127,0,1,2,4,40,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A370,173,0,3,1,1,N,"' + SgDados.Cells[6, L] + '"');

    Editor.Lines.Add('Q200,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);

end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaElBarretoTriplaGrande;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q864');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A14,4,0,2,1,1,N,"' + 'Codigo: ' + SgDados.Cells[0, L] +
      '"'); // Código
    Editor.Lines.Add('A14,38,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // Descricao
    Editor.Lines.Add('A14,66,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 40) +
      '"'); // Descricao
    Editor.Lines.Add('A14,97,0,2,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B14,114,0,1,2,4,34,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A14,152,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');

    Editor.Lines.Add('A302,4,0,2,1,1,N,"' + 'Codigo: ' + SgDados.Cells[0, L] +
      '"'); // Código
    Editor.Lines.Add('A302,38,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // Descricao
    Editor.Lines.Add('A302,66,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 40) +
      '"'); // Descricao
    Editor.Lines.Add('A302,97,0,2,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B302,114,0,1,2,4,34,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A302,152,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A589,4,0,2,1,1,N,"' + 'Codigo: ' + SgDados.Cells[0, L] +
      '"'); // Código
    Editor.Lines.Add('A589,38,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // Descricao
    Editor.Lines.Add('A589,66,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 40) +
      '"'); // Descricao
    Editor.Lines.Add('A589,97,0,2,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B586,114,0,1,2,4,34,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A589,152,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('Q176,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaElBarretoTriplaMenor;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q704');
    Editor.Lines.Add('JY0000Kf00');
    Editor.Lines.Add('D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('A22,17,0,1,1,1,N,"'+Copy(SgDados.Cells[1, L], 1, 20)+'"');
    Editor.Lines.Add('A24,30,0,1,1,1,N,"'+Copy(SgDados.Cells[1, L], 21, 40)+'"');
    Editor.Lines.Add('A24,44,0,2,1,1,N,"R$ '+FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('A22,0,0,1,1,1,N,"COD.FAB. '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('B52,63,0,1,2,4,31,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A82,97,0,1,1,1,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A254,17,0,1,1,1,N,"'+Copy(SgDados.Cells[1, L], 1, 20)+'"');
    Editor.Lines.Add('A256,30,0,1,1,1,N,"'+Copy(SgDados.Cells[1, L], 21, 40)+'"');
    Editor.Lines.Add('A256,44,0,2,1,1,N,"R$ '+FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('A254,0,0,1,1,1,N,"COD.FAB. '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('B284,63,0,1,2,4,31,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A314,97,0,1,1,1,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A486,17,0,1,1,1,N,"'+Copy(SgDados.Cells[1, L], 1, 20)+'"');
    Editor.Lines.Add('A488,30,0,1,1,1,N,"'+Copy(SgDados.Cells[1, L], 21, 40)+'"');
    Editor.Lines.Add('A488,44,0,2,1,1,N,"R$ '+FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('A486,0,0,1,1,1,N,"COD.FAB. '+SgDados.Cells[7, L]+'"');
    Editor.Lines.Add('B516,63,0,1,2,4,31,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('A546,97,0,1,1,1,N,"'+SgDados.Cells[0, L]+'"');
    Editor.Lines.Add('Q128,8');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaElBarretoJoias;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q1008');
    Editor.Lines.Add('JY0000Kf00D11');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('OD');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A543,31,0,1,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 19) +
      '"'); // Descricao
    Editor.Lines.Add('A543,50,0,1,1,1,N,"' + Copy(SgDados.Cells[1, L], 20, 19) +
      '"'); // Descricao
    Editor.Lines.Add('A580,72,0,2,1,1,N,"R$"');
    Editor.Lines.Add('A624,69,0,3,1,1,N,"' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // Valor
    Editor.Lines.Add('A346,38,0,2,1,1,N,"' + 'Cod: ' + SgDados.Cells[0, L] +
      '"'); // Código
    Editor.Lines.Add('A343,72,0,1,1,1,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('Q8,0');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaEletroSatGrande;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q624');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A35,11,0,4,1,1,N,"' + 'Codigo: ' + SgDados.Cells[0, L] +
      '"'); // Código
    Editor.Lines.Add('A37,49,0,4,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 30) +
      '"'); // Descricao
    Editor.Lines.Add('A37,78,0,4,1,1,N,"' + Copy(SgDados.Cells[1, L], 31, 40) +
      '"'); // Descricao
    Editor.Lines.Add('A37,125,0,4,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B35,156,0,1,2,4,46,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A33,211,0,3,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('Q240,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaEletroSatTriplaGrande;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q864');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('A14,4,0,2,1,1,N,"' + 'Codigo: ' + SgDados.Cells[0, L] +
      '"'); // Código
    Editor.Lines.Add('A14,38,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // Descricao
    Editor.Lines.Add('A14,66,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 40) +
      '"'); // Descricao
    Editor.Lines.Add('A14,97,0,2,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B14,114,0,1,2,4,34,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A14,152,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');

    Editor.Lines.Add('A302,4,0,2,1,1,N,"' + 'Codigo: ' + SgDados.Cells[0, L] +
      '"'); // Código
    Editor.Lines.Add('A302,38,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // Descricao
    Editor.Lines.Add('A302,66,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 40) +
      '"'); // Descricao
    Editor.Lines.Add('A302,97,0,2,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B302,114,0,1,2,4,34,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A302,152,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A589,4,0,2,1,1,N,"' + 'Codigo: ' + SgDados.Cells[0, L] +
      '"'); // Código
    Editor.Lines.Add('A589,38,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // Descricao
    Editor.Lines.Add('A589,66,0,2,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 40) +
      '"'); // Descricao
    Editor.Lines.Add('A589,97,0,2,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B586,114,0,1,2,4,34,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A589,152,0,2,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('Q176,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaEletroSatTriplaPequena;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
    Editor.Lines.Add('N');
    Editor.Lines.Add('R0,0');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('I8,0,001');
    Editor.Lines.Add('q720');
    Editor.Lines.Add('JY0000Kf00D8');
    Editor.Lines.Add('S3');
    Editor.Lines.Add('O');
    Editor.Lines.Add('JB');
    Editor.Lines.Add('A27,4,0,1,1,1,N,"' + 'Codigo: ' + SgDados.Cells[0, L] +
      '"'); // Código
    Editor.Lines.Add('A27,23,0,1,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // Descricao
    Editor.Lines.Add('A27,40,0,1,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 40) +
      '"'); // Descricao
    Editor.Lines.Add('A27,59,0,1,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B27,74,0,1,1,2,26,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A24,106,0,1,1,1,N,"' + SgDados.Cells[6, L] + '"');

    Editor.Lines.Add('A259,4,0,1,1,1,N,"' + 'Codigo: ' + SgDados.Cells[0, L] +
      '"'); // Código
    Editor.Lines.Add('A259,23,0,1,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // Descricao
    Editor.Lines.Add('A259,40,0,1,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 40) +
      '"'); // Descricao
    Editor.Lines.Add('A259,59,0,1,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B259,74,0,1,1,2,26,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A256,106,0,1,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('JF');

    Editor.Lines.Add('A491,4,0,1,1,1,N,"' + 'Codigo: ' + SgDados.Cells[0, L] +
      '"'); // Código
    Editor.Lines.Add('A491,23,0,1,1,1,N,"' + Copy(SgDados.Cells[1, L], 1, 20) +
      '"'); // Descricao
    Editor.Lines.Add('A491,40,0,1,1,1,N,"' + Copy(SgDados.Cells[1, L], 21, 40) +
      '"'); // Descricao
    Editor.Lines.Add('A491,59,0,1,1,1,N,"' + 'R$ ' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])) + '"'); // valor
    Editor.Lines.Add('B491,74,0,1,1,2,26,N,"' + SgDados.Cells[6, L] + '"');
    // codigo de barras
    Editor.Lines.Add('A488,106,0,1,1,1,N,"' + SgDados.Cells[6, L] + '"');
    Editor.Lines.Add('Q120,16');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P1,' + FormatFloat('0000', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaEmporioJardins;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0394');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');

    Editor.Lines.Add('1F3304500060055' + SgDados.Cells[6, L]);
    Editor.Lines.Add('131100000760064' + trim(Copy(SgDados.Cells[1, L],
      1, 40)));
    Editor.Lines.Add('121100000960065Codigo:');
    Editor.Lines.Add('121100000960114' + SgDados.Cells[0, L]);
    Editor.Lines.Add('192200500210223R$:' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));

    // Editor.Lines.Add('1F3306200060015'+SgDados.Cells[6,L]);
    // Editor.Lines.Add('191100200820024' + Trim(Copy(SgDados.Cells[1,L],1,40)));
    // Editor.Lines.Add('111100000990025Codigo:');
    // Editor.Lines.Add('111100000990059'+ SgDados.Cells[0,L]);
    // Editor.Lines.Add('192200500210183R$'+ formatfloat('0.00',strtofloat(SgDados.Cells[3,L])));

    // Editor.Lines.Add('1F2202900080128'+SgDados.Cells[6,L]);
    // Editor.Lines.Add('191100100470010' + Trim(Copy(SgDados.Cells[1,L],1,20)));
    // Editor.Lines.Add('111100000100074Cod:');
    // Editor.Lines.Add('111100000100093'+ SgDados.Cells[0,L]);
    // Editor.Lines.Add('121100000100012R$'+ formatfloat('0.00',strtofloat(SgDados.Cells[3,L])));
    // Editor.Lines.Add('111100000490131Cod:');
    // Editor.Lines.Add('111100000490151'+ SgDados.Cells[0,L]);
    // Editor.Lines.Add('111100000480199R$'+ formatfloat('0.00',strtofloat(SgDados.Cells[3,L])));
    // Editor.Lines.Add('191100100340010' + Trim(Copy(SgDados.Cells[1,L],21,20)));
    // Editor.Lines.Add('111100000230010'+ SgDados.Cells[7,L]);

    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaEmporioJardins_Pequeno;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0394');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');

    // Editor.Lines.Add('1F2204100080050'+SgDados.Cells[6,L]);
    // Editor.Lines.Add('131100000760055' + Trim(Copy(SgDados.Cells[1,L],1,20)));
    // Editor.Lines.Add('121100000960056Codigo:');
    // Editor.Lines.Add('121100000960101'+ SgDados.Cells[0,L]);
    // Editor.Lines.Add('192200100220168'+ formatfloat('0.00',strtofloat(SgDados.Cells[3,L])));
    // Editor.Lines.Add('131100000590055' + Trim(Copy(SgDados.Cells[1,L],21,20)));
    // Editor.Lines.Add('191100000250155R$');

    Editor.Lines.Add('131100000860055' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('131100000690055' + trim(Copy(SgDados.Cells[1, L],
      21, 20)));
    Editor.Lines.Add('191100200060090' + SgDados.Cells[6, L]);

    if isProdutoPromocao(StrToInt(SgDados.Cells[0, L])) = True then
    begin
      Editor.Lines.Add('191100200460055De:');
      Editor.Lines.Add('191200200290072' + FormatFloat('0.00',
        PegaValorVarejo(StrToInt(SgDados.Cells[0, L]))));
      Editor.Lines.Add('191100500380111Por:');
      Editor.Lines.Add('192300200230147' + FormatFloat('0.00',
        StrToFloat(SgDados.Cells[3, L])));
    end
    else
    begin
      Editor.Lines.Add('191100400310065R$');
      Editor.Lines.Add('192200400260093' + FormatFloat('0.00',
        StrToFloat(SgDados.Cells[3, L])));
    end;

    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetaOticaSantaLuiza;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  // if (Trim(EdtCdCliente.Text)<> '') and (Trim(EdtCdNome.Text) <> '') then
  // SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;

    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0394');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');

    Editor.Lines.Add('1F2202900080128' + SgDados.Cells[6, L]);
    Editor.Lines.Add('191100100470010' + trim(Copy(SgDados.Cells[1, L],
      1, 20)));
    Editor.Lines.Add('111100000100074Cod:');
    Editor.Lines.Add('111100000100093' + SgDados.Cells[0, L]);
    Editor.Lines.Add('121100000100012R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('111100000490131Cod:');
    Editor.Lines.Add('111100000490151' + SgDados.Cells[0, L]);
    Editor.Lines.Add('111100000480199R$' + FormatFloat('0.00',
      StrToFloat(SgDados.Cells[3, L])));
    Editor.Lines.Add('191100100340010' + trim(Copy(SgDados.Cells[1, L],
      21, 20)));
    Editor.Lines.Add('111100000230010' + SgDados.Cells[7, L]);

    Editor.Lines.Add('^01');
    // Cálculo para imprimir a qtd de etiquetas certo
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
    Editor.Lines.Add('E');

  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

function TFrmPrincipalPreVenda.MessageDlgDef2(const Msg, MyCaption: string;
  AType: TMsgDlgType; AButtons: TMsgDlgButtons; DefButton: TModalResult;
  HelpCtx: Integer): Word;
var
  i: Integer;
begin
  with CreateMessageDialog(Msg, AType, AButtons) do
  begin
    try
      caption := MyCaption;
      HelpContext := HelpCtx;
      for i := 0 to ComponentCount - 1 do
      begin
        if (Components[i] is TButton) and
          (TButton(Components[i]).ModalResult = DefButton) then
          ActiveControl := TButton(Components[i]);
        if Components[i] is TButton then
        begin
          with TButton(Components[i]) do
          begin
            case ModalResult of
              mrYes:
                caption := '&Varejo';
              mrNo:
                caption := 'No';
              mrOK:
                caption := '&Atacado';
              mrCancel:
                caption := 'Cancela';
              mrAbort:
                caption := 'Abortar';
              mrRetry:
                caption := 'Tente Novamente';
              mrIgnore:
                caption := 'Ignorar';
            end;
          end;
        end;
      end;
      result := ShowModal;
    finally
      Free;
    end;
  end;
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasSafiraZebra;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto: TDOMProduto;
  esp1, esp2, esp3: string;
  i, ult: Integer;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,A,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q112,024');
    Editor.Lines.Add('q831');
    Editor.Lines.Add('rN');
    Editor.Lines.Add('S4');
    Editor.Lines.Add('D7');
    Editor.Lines.Add('ZT');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('OD');
    Editor.Lines.Add('R136,0');
    Editor.Lines.Add('f100');
    Editor.Lines.Add('N');
    Editor.Lines.Add('A305,37,2,1,1,1,N,"' + Produto.referenciaFabrica + '"');

    Memo1.Text := Produto.especificacao;

    esp1 := '';
    esp2 := '';
    esp3 := '';

    for i := 0 to Memo1.Lines.Count - 1 do
    begin
      if i = 0 then
      begin
        if Memo1.Lines[i] <> '' then
          esp1 := Copy(Memo1.Lines[i], 1, 14);
      end
      else if i = 1 then
      begin
        if Memo1.Lines[i] <> '' then
          esp2 := Copy(Memo1.Lines[i], 1, 14);
      end
      else if i = 2 then
      begin
        if Memo1.Lines[i] <> '' then
          esp3 := Copy(Memo1.Lines[i], 1, 14);
      end;
    end;

    Editor.Lines.Add('A145,41,2,1,1,1,N,"' + esp3 + '"');
    Editor.Lines.Add('A145,55,2,1,1,1,N,"' + esp2 + '"');
    Editor.Lines.Add('B305,102,2,1,2,6,40,N,"' +
      intToStr(Produto.cdProduto) + '"');
    if Produto.referenciaInterna <> '' then
      Editor.Lines.Add('A145,102,2,2,1,1,N,"' + Produto.referenciaInterna + '"')
    else
      Editor.Lines.Add('A145,102,2,2,1,1,N,"' + FormatFloat('0.00',
        Produto.vlPreco) + '"');
    Editor.Lines.Add('A145,69,2,1,1,1,N,"' + esp1 + '"');
    Editor.Lines.Add('A252,57,2,1,1,1,N,"' + intToStr(Produto.cdProduto) + '"');
    vqtd := StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])));
    Editor.Lines.Add('P' + FloatToStr(vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print.bat')), sw_ShowNormal);
  if not FileExists('Print.bat') then
    ShowMessage('Não foi encontrado o arquivo Print.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;

procedure TFrmPrincipalPreVenda.ImprimeEtiquetasSafiraArgox;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Integer;
  Produto: TDOMProduto;
  esp1, esp2, esp3: string;
  i, ult: Integer;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin
    if SgDados.Cells[0, L] = '' then
      Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('c0000');
    Editor.Lines.Add('KI503');
    Editor.Lines.Add('O0220');
    Editor.Lines.Add('f220');
    Editor.Lines.Add('KW0307');
    Editor.Lines.Add('KI7');
    Editor.Lines.Add('V0');
    Editor.Lines.Add('L');
    Editor.Lines.Add('H12');
    Editor.Lines.Add('PC');
    Editor.Lines.Add('A2');
    Editor.Lines.Add('D11');
    // Editor.Lines.Add('A305,37,2,1,1,1,N,"'+produto.referenciaFabrica+'"');

    Memo1.Text := Produto.especificacao;

    esp1 := '';
    esp2 := '';
    esp3 := '';

    for i := 0 to Memo1.Lines.Count - 1 do
    begin
      if i = 0 then
      begin
        if Memo1.Lines[i] <> '' then
          esp1 := Copy(Memo1.Lines[i], 1, 14);
      end
      else if i = 1 then
      begin
        if Memo1.Lines[i] <> '' then
          esp2 := Copy(Memo1.Lines[i], 1, 14);
      end
      else if i = 2 then
      begin
        if Memo1.Lines[i] <> '' then
          esp3 := Copy(Memo1.Lines[i], 1, 14);
      end;
    end;

    Editor.Lines.Add('1d6301600280019' + intToStr(Produto.cdProduto));
    Editor.Lines.Add('121100000170018' + intToStr(Produto.cdProduto));
    Editor.Lines.Add('121100000040018' + Produto.referenciaFabrica);

    // Editor.Lines.Add('121100000360213R$'+formatFloat('0.00',produto.vlPreco));
    Editor.Lines.Add('121100000260114' + esp1);
    Editor.Lines.Add('121100000150114' + esp2);
    Editor.Lines.Add('121100000040114' + esp3);

    if Produto.referenciaInterna <> '' then
      Editor.Lines.Add('121100000360114' + Produto.referenciaInterna)
      // Editor.Lines.Add('A145,102,2,2,1,1,N,"'+produto.referenciaInterna+'"')
    else
      Editor.Lines.Add('121100000360114R$' + FormatFloat('0.00',
        Produto.vlPreco));
    // Editor.Lines.Add('A145,102,2,2,1,1,N,"'+formatFloat('0.00',produto.vlPreco)+'"');

    vqtd := StrToInt(FormatFloat('0000', StrToFloat(SgDados.Cells[2, L])));
    Editor.Lines.Add('^01');
    Editor.Lines.Add('Q' + intToStr(vqtd));
    Editor.Lines.Add('E');
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;


procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_ZeroGrauDepositoMercearia;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
    Break;
    Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
    Editor.Lines.Add('I8,1,001');
    Editor.Lines.Add('');
    Editor.Lines.Add('Q240,25');
    Editor.Lines.Add('q819');
    Editor.Lines.Add('');
    Editor.Lines.Add('D15');
    Editor.Lines.Add('');
    Editor.Lines.Add('OD');
    Editor.Lines.Add('');
    Editor.Lines.Add('JF');
    Editor.Lines.Add('');
    Editor.Lines.Add('WN');
    Editor.Lines.Add('');
    Editor.Lines.Add('ZB');
    Editor.Lines.Add('');
    Editor.Lines.Add('N');
    Editor.Lines.Add('');
    Editor.Lines.Add('A54,31,0,4,1,1,N,"'+SgDados.Cells[1, L]+'"');
    Editor.Lines.Add('A54,63,0,4,1,1,N,"'+SgDados.Cells[10, L]+'"');
    Editor.Lines.Add('');
    Editor.Lines.Add('A350,85,0,2,1,1,N,"Pr. Varejo"');
    Editor.Lines.Add('A256,120,0,3,2,4,N,"R$ '+FormatFloat('0.00',StrtoFloat(SgDados.Cells[3, L]))+'"');
    Editor.Lines.Add('');
    vqtd := StrToFloat(SgDados.Cells[2, L]);
    Editor.Lines.Add('P' + FormatFloat('0', vqtd));
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;


procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_MaisRacoes;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
      Editor.Lines.Add('I8,1,001');
      Editor.Lines.Add('');
      Editor.Lines.Add('Q240,12');
      Editor.Lines.Add('q832');
      Editor.Lines.Add('');
      Editor.Lines.Add('D11');
      Editor.Lines.Add('');
      Editor.Lines.Add('O');
      Editor.Lines.Add('');
      Editor.Lines.Add('JF');
      Editor.Lines.Add('');
      Editor.Lines.Add('WN');
      Editor.Lines.Add('');
      Editor.Lines.Add('ZB');
      Editor.Lines.Add('');
      Editor.Lines.Add('N');
      Editor.Lines.Add('');
      Editor.Lines.Add('A16,24,0,4,1,2,N,"'+SgDados.Cells[1, L]+'"');
      Editor.Lines.Add('A16,76,0,4,1,2,N,"'+Produto.unidade.unidade+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('B24,130,0,1,3,6,48,N,"'+SgDados.Cells[6, L]+'"');
      Editor.Lines.Add('A120,184,0,1,1,2,N,"'+SgDados.Cells[6, L]+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('A450,144,0,1,2,3,N,"R$"');
      Editor.Lines.Add('A498,96,0,3,2,5,N,"'+FormatFloat('0.00',StrtoFloat(SgDados.Cells[3, L]))+'"');
      Editor.Lines.Add('');
      vqtd := StrToFloat(SgDados.Cells[2, L]);
      Editor.Lines.Add('P' + FormatFloat('0', vqtd));
      FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;


procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_MerceariaDandan;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
      Editor.Lines.Add('I8,1,001');
      Editor.Lines.Add('');
      Editor.Lines.Add('Q240,12');
      Editor.Lines.Add('q832');
      Editor.Lines.Add('');
      Editor.Lines.Add('D11');
      Editor.Lines.Add('');
      Editor.Lines.Add('O');
      Editor.Lines.Add('');
      Editor.Lines.Add('JF');
      Editor.Lines.Add('');
      Editor.Lines.Add('WN');
      Editor.Lines.Add('');
      Editor.Lines.Add('ZB');
      Editor.Lines.Add('');
      Editor.Lines.Add('N');
      Editor.Lines.Add('');
      Editor.Lines.Add('A16,24,0,4,1,2,N,"'+SgDados.Cells[1, L]+'"');
      Editor.Lines.Add('A16,76,0,4,1,2,N,"'+Produto.unidade.unidade+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('B24,130,0,1,3,6,48,N,"'+SgDados.Cells[6, L]+'"');
      Editor.Lines.Add('A120,184,0,1,1,2,N,"'+SgDados.Cells[6, L]+'"');
      Editor.Lines.Add('');
      Editor.Lines.Add('A450,144,0,1,2,3,N,"R$"');
      Editor.Lines.Add('A498,96,0,3,2,5,N,"'+FormatFloat('0.00',StrtoFloat(SgDados.Cells[3, L]))+'"');
      Editor.Lines.Add('');
      vqtd := StrToFloat(SgDados.Cells[2, L]);
      Editor.Lines.Add('P' + FormatFloat('0', vqtd));
      FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;


procedure TFrmPrincipalPreVenda.ImprimeEtiquetas_EldoradoCasaDaArte;
var
  L: Integer;
  Arq: TextFile;
  vqtd: Real;
  Produto : TDOMProduto;
begin
  // if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
  if SgDados.Cells[0, 1] = '' then
  begin
    MessageDlg('Não foi lançado nenhum item para impressão das etiquetas!',
      mtWarning, [mbOK], 0);
    EdtConsulta.Setfocus;
    exit;
  end;
  if (trim(EdtCdCliente.Text) <> '') and (trim(EdtCdNome.Text) <> '') then
    SalvaEtiquetas;
  Editor.Lines.Clear;
  for L := 1 to SgDados.RowCount - 1 do
  begin // Salvando os itens da pré-venda.
    if SgDados.Cells[0, L] = '' then
      Break;
      Produto := TNEGProduto.buscarProduto(StrToInt(SgDados.Cells[0, L]));
      Editor.Lines.Add('n');
      Editor.Lines.Add('');
      Editor.Lines.Add('M0500');
      Editor.Lines.Add('');
      Editor.Lines.Add('O0220');
      Editor.Lines.Add('');
      Editor.Lines.Add('V0');
      Editor.Lines.Add('');
      Editor.Lines.Add('f318');
      Editor.Lines.Add('');
      Editor.Lines.Add('D');
      Editor.Lines.Add('');
      Editor.Lines.Add('L');
      Editor.Lines.Add('');
      Editor.Lines.Add('D11');
      Editor.Lines.Add('');
      Editor.Lines.Add('A2');
      Editor.Lines.Add('');
      Editor.Lines.Add('111100000800019ELDORADO CASA DA ARTE');
      Editor.Lines.Add('');
      Editor.Lines.Add('102400000590004 R$ ' +FormatFloat('0.00',StrtoFloat(SgDados.Cells[3, L])));
      Editor.Lines.Add('');
      Editor.Lines.Add('102200000450004' +copy(SgDados.Cells[1, L],1,20));
      Editor.Lines.Add('102200000340004' +copy(SgDados.Cells[1, L],21,20));
      Editor.Lines.Add('');
      Editor.Lines.Add('1e4201700130002C' +copy(SgDados.Cells[0, L],1,Length(SgDados.Cells[0, L])-1) +'&E' +copy(SgDados.Cells[0, L],Length(SgDados.Cells[0, L]),1));
      Editor.Lines.Add('111100000030034' +SgDados.Cells[0, L]);
      Editor.Lines.Add('');
      Editor.Lines.Add('');
      Editor.Lines.Add('');
      Editor.Lines.Add('');
      Editor.Lines.Add('111100000800160ELDORADO CASA DA ARTE');
      Editor.Lines.Add('');
      Editor.Lines.Add('102400000590145 R$ ' +FormatFloat('0.00',StrtoFloat(SgDados.Cells[3, L])));
      Editor.Lines.Add('');
      Editor.Lines.Add('102200000450145' +copy(SgDados.Cells[1, L],1,20));
      Editor.Lines.Add('102200000340145' +copy(SgDados.Cells[1, L],21,20));
      Editor.Lines.Add('');
      Editor.Lines.Add('1e4201700130143C' +copy(SgDados.Cells[0, L],1,Length(SgDados.Cells[0, L])-1) +'&E' +copy(SgDados.Cells[0, L],Length(SgDados.Cells[0, L]),1));
      Editor.Lines.Add('111100000030175' +SgDados.Cells[0, L]);
      Editor.Lines.Add('');
      Editor.Lines.Add('');
      Editor.Lines.Add('');
      Editor.Lines.Add('');
      Editor.Lines.Add('111100000800299ELDORADO CASA DA ARTE');
      Editor.Lines.Add('');
      Editor.Lines.Add('102400000590284 R$ ' +FormatFloat('0.00',StrtoFloat(SgDados.Cells[3, L])));
      Editor.Lines.Add('');
      Editor.Lines.Add('102200000450284' +copy(SgDados.Cells[1, L],1,20));
      Editor.Lines.Add('102200000340284' +copy(SgDados.Cells[1, L],21,20));
      Editor.Lines.Add('');
      Editor.Lines.Add('1e4201700130282C' +copy(SgDados.Cells[0, L],1,Length(SgDados.Cells[0, L])-1) +'&E' +copy(SgDados.Cells[0, L],Length(SgDados.Cells[0, L]),1));
      Editor.Lines.Add('111100000030314' +SgDados.Cells[0, L]);
      Editor.Lines.Add('');
      Editor.Lines.Add('');

      vqtd := StrToFloat(SgDados.Cells[2, L]);
      Editor.Lines.Add('Q' + intToStr(Trunc(vqtd)));
      Editor.Lines.Add('E');
      FreeAndNil(Produto);
  end;
  Editor.Lines.SaveToFile
    (PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'etiqueta.txt')));
  WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName) +
    'print2.bat')), sw_ShowNormal);
  if not FileExists('Print2.bat') then
    ShowMessage('Não foi encontrado o arquivo Print2.bat');
  Application.OnMessage := FormPrincipal.ProcessaMsg;
  Limpar_Tela;
  RgOpcoes.ItemIndex := 0;
  MessageDlg('Impressão ok!', mtInformation, [mbOK], 0);
end;


// procedure TFrmPrincipalPreVenda.ImprimeEtiquetasSafiraArgox;
// var L : integer;
// Arq : TextFile;
// vQtd : integer;
// produto: TDOMProduto;
// esp1, esp2, esp3: string;
// i, ult: integer;
// begin
// //if not CamposObrigatoriosPreenchidos(FrmPrincipalPreVenda) then exit;
// if SgDados.Cells[0,1] = '' then begin
// Messagedlg('Não foi lançado nenhum item para impressão das etiquetas!', mtWarning, [mbOk], 0);
// EdtConsulta.Setfocus;
// exit;
// end;
// Editor.Lines.Clear;
// for L := 1 to SgDados.RowCount - 1 do begin
// if SgDados.Cells[0,L] = '' then Break;
// produto := TNegProduto.BuscarProduto(strtoint(SgDados.Cells[0,L]));
// Editor.Lines.Add('c0000');
// Editor.Lines.Add('KI503');
// Editor.Lines.Add('O0220');
// Editor.Lines.Add('f220');
// Editor.Lines.Add('KW0307');
// Editor.Lines.Add('KI7');
// Editor.Lines.Add('V0');
// Editor.Lines.Add('L');
// Editor.Lines.Add('H12');
// Editor.Lines.Add('PC');
// Editor.Lines.Add('A2');
// Editor.Lines.Add('D11');
/// /    Editor.Lines.Add('A305,37,2,1,1,1,N,"'+produto.referenciaFabrica+'"');
//
// Memo1.Text := produto.especificacao;
//
// esp1 := '';
// esp2 := '';
// esp3 := '';
//
// for I := 0 to Memo1.Lines.Count - 1 do begin
// if i = 0 then begin
// if Memo1.lines[i] <> '' then
// esp1 := copy(Memo1.lines[i],1,14);
// end
// else
// if i = 1 then begin
// if Memo1.lines[i] <> '' then
// esp2 := copy(Memo1.lines[i],1,14);
// end
// else
// if i = 2 then begin
// if Memo1.lines[i] <> '' then
// esp3 := copy(Memo1.lines[i],1,14);
// end;
// end;
//
// Editor.Lines.Add('1d6301600280131' + inttostr(produto.cdProduto));
// Editor.Lines.Add('121100000170130' + inttostr(produto.cdProduto));
// Editor.Lines.Add('121100000040130' + produto.referenciaFabrica);
//
/// /    Editor.Lines.Add('121100000360213R$'+formatFloat('0.00',produto.vlPreco));
// Editor.Lines.Add('121100000260213' + esp1);
// Editor.Lines.Add('121100000150213' + esp2);
// Editor.Lines.Add('121100000040213' + esp3);
//
// if produto.referenciaInterna <> '' then
// Editor.Lines.Add('121100000360213'+produto.referenciaInterna)
/// /      Editor.Lines.Add('A145,102,2,2,1,1,N,"'+produto.referenciaInterna+'"')
// else
// Editor.Lines.Add('121100000360213R$'+formatFloat('0.00',produto.vlPreco));
/// /      Editor.Lines.Add('A145,102,2,2,1,1,N,"'+formatFloat('0.00',produto.vlPreco)+'"');
//
//
// vQtd := StrToint(FormatFloat('0000',StrToFloat(SgDados.Cells[2,L])));
// Editor.Lines.Add('^01');
// Editor.Lines.Add('Q'+ IntToStr(vQtd));
// Editor.Lines.Add('E');
// end;
// Editor.Lines.SaveToFile(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName)+'etiqueta.txt')));
// WinExec(PAnsichar(AnsiString(ExtractFilePath(Application.ExeName)+'print2.bat')),sw_ShowNormal);
// if not FileExists('Print2.bat') then
// ShowMessage('Não foi encontrado o arquivo Print2.bat');
// Application.OnMessage := FormPrincipal.ProcessaMsg;
// Limpar_Tela;
// RgOpcoes.ItemIndex := 0;
// Messagedlg('Impressão ok!', mtInformation, [mbOk], 0);
// end;

procedure TFrmPrincipalPreVenda.persistirFormulario;
var
  nomeFormulario, Arquivo: string;
begin
  Arquivo := ExtractFilePath(Application.ExeName) + 'Support.ini';
  nomeFormulario := self.Name;
  persistirForm(nomeFormulario, 'chkOcultarProdutosSemEstoque.checked',
    BoolToStr(chkOcultarProdutosSemEstoque.Checked, false), Arquivo);
end;

procedure TFrmPrincipalPreVenda.verificaLucro(PorcCustoTotal : real; Inicializar : boolean = false);
begin
  if Inicializar = true then begin
    Image2.Picture := imgTransparente.Picture;
    Image3.Picture := imgTransparente.Picture;
    Image4.Picture := imgTransparente.Picture;
  end
  else begin
    if PorcCustoTotal <= 0 then begin
      //Result := 'Fraca';
      Image2.Picture := imgBaixa.Picture;
      Image3.Picture := imgTransparente.Picture;
      Image4.Picture := imgTransparente.Picture;
    end
    else if (PorcCustoTotal > 5) then begin
      //Result := 'Forte';
      Image2.Picture := imgTransparente.Picture;
      Image3.Picture := imgTransparente.Picture;
      Image4.Picture := imgAlta.Picture;
    end
    else if (PorcCustoTotal > 0) and (PorcCustoTotal < 4.99) then begin
      //Result := 'Média';
      Image2.Picture := imgTransparente.Picture;
      Image3.Picture := imgNormal.Picture;
      Image4.Picture := imgTransparente.Picture;
    end;
  end;
  FrmPrincipalPreVenda.Width := FrmPrincipalPreVenda.Width + 1;
  FrmPrincipalPreVenda.Width := FrmPrincipalPreVenda.Width - 1;
end;


procedure TFrmPrincipalPreVenda.persistirUltimoEstadoForm;
var
  nomeFormulario: string;
begin
  nomeFormulario := self.Name;
  chkOcultarProdutosSemEstoque.Checked :=
    StrToBoolDef(ReadSupportIni(nomeFormulario,
    'chkOcultarProdutosSemEstoque.checked', ''), false);
end;

{ TDBGrid }

procedure TDBGrid.ColWidthsChanged;
begin
  inherited;
  if Assigned(FColResize) then
    FColResize(self);
end;

{ TLiveracao }

constructor TLiveracao.novo;
begin

end;

initialization

vLimiteCasasPreco := 0;

// RLConsts.SetVersion(3, 71, 'B');

end.
